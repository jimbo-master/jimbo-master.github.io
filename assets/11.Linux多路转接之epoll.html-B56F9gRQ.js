import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/Linux%E7%9A%84IO%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5%EF%BC%9Aepoll-Cwag6bU3.png",e="/assets/epoll%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%951-DUdcEYPg.png",o="/assets/epoll%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%952-CB8uUEIw.png",c="/assets/epoll%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%953-q8Gn-ntH.png",l="/assets/epoll%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%954-DJkbhcq_.png",i="/assets/epoll%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%955-DQes0Ozi.png",u={},r=t('<h1 id="第十一章-linux的io多路转接之epoll" tabindex="-1"><a class="header-anchor" href="#第十一章-linux的io多路转接之epoll"><span>第十一章：Linux的IO多路转接之epoll</span></a></h1><h2 id="_1-知识点思维导图" tabindex="-1"><a class="header-anchor" href="#_1-知识点思维导图"><span>1.知识点思维导图</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_2-epoll服务器代码" tabindex="-1"><a class="header-anchor" href="#_2-epoll服务器代码"><span>2.epoll服务器代码</span></a></h2><h3 id="_2-1-epollserver类" tabindex="-1"><a class="header-anchor" href="#_2-1-epollserver类"><span>2.1 EpollServer类</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;socket.hpp&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BACK_LOG</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">256</span></span></span>

class EpollServer
<span class="token punctuation">{</span>
private<span class="token operator">:</span>
	<span class="token keyword">int</span> _listen_sock<span class="token punctuation">;</span> <span class="token comment">//监听套接字</span>
	<span class="token keyword">int</span> _port<span class="token punctuation">;</span> <span class="token comment">//端口号</span>
	<span class="token keyword">int</span> _epfd<span class="token punctuation">;</span> <span class="token comment">//epoll模型</span>
public<span class="token operator">:</span>
	<span class="token function">EpollServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span>
		<span class="token operator">:</span> <span class="token function">_port</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>
	<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">InitEpollServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_listen_sock <span class="token operator">=</span> Socket<span class="token operator">::</span><span class="token function">SocketCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		Socket<span class="token operator">::</span><span class="token function">SocketBind</span><span class="token punctuation">(</span>_listen_sock<span class="token punctuation">,</span> _port<span class="token punctuation">)</span><span class="token punctuation">;</span>
		Socket<span class="token operator">::</span><span class="token function">SocketListen</span><span class="token punctuation">(</span>_listen_sock<span class="token punctuation">,</span> BACK_LOG<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">//创建epoll模型</span>
		_epfd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_epfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
			std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;epoll_create error&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token operator">~</span><span class="token function">EpollServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_listen_sock <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
			<span class="token function">close</span><span class="token punctuation">(</span>_listen_sock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_epfd <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
			<span class="token function">close</span><span class="token punctuation">(</span>_epfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-2-运行服务器" tabindex="-1"><a class="header-anchor" href="#_2-2-运行服务器"><span>2.2 运行服务器</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;socket.hpp&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BACK_LOG</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">256</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_NUM</span> <span class="token expression"><span class="token number">64</span></span></span>

class EpollServer
<span class="token punctuation">{</span>
private<span class="token operator">:</span>
	<span class="token keyword">int</span> _listen_sock<span class="token punctuation">;</span> <span class="token comment">//监听套接字</span>
	<span class="token keyword">int</span> _port<span class="token punctuation">;</span> <span class="token comment">//端口号</span>
	<span class="token keyword">int</span> _epfd<span class="token punctuation">;</span> <span class="token comment">//epoll模型</span>
public<span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">AddEvent</span><span class="token punctuation">(</span>_listen_sock<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将监听套接字添加到epoll模型中，并关心其读事件</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
			<span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> revs<span class="token punctuation">[</span>MAX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>_epfd<span class="token punctuation">,</span> revs<span class="token punctuation">,</span> MAX_NUM<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
				std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;epoll_wait error&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
				std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;timeout...&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span>
            <span class="token punctuation">{</span>
				<span class="token comment">//正常的事件处理</span>
				<span class="token comment">//std::cout&lt;&lt;&quot;有事件发生...&quot;&lt;&lt;std::endl;</span>
				<span class="token function">HandlerEvent</span><span class="token punctuation">(</span>revs<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
private<span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">AddEvent</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> event<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>
		ev<span class="token punctuation">.</span>events <span class="token operator">=</span> event<span class="token punctuation">;</span>
		ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> sock<span class="token punctuation">;</span>
		
		<span class="token function">epoll_ctl</span><span class="token punctuation">(</span>_epfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-3-事件处理" tabindex="-1"><a class="header-anchor" href="#_2-3-事件处理"><span>2.3 事件处理</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;socket.hpp&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BACK_LOG</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">256</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_NUM</span> <span class="token expression"><span class="token number">64</span></span></span>

class EpollServer
<span class="token punctuation">{</span>
private<span class="token operator">:</span>
	<span class="token keyword">int</span> _listen_sock<span class="token punctuation">;</span> <span class="token comment">//监听套接字</span>
	<span class="token keyword">int</span> _port<span class="token punctuation">;</span> <span class="token comment">//端口号</span>
	<span class="token keyword">int</span> _epfd<span class="token punctuation">;</span> <span class="token comment">//epoll模型</span>
public<span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">HandlerEvent</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> revs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
			<span class="token keyword">int</span> fd <span class="token operator">=</span> revs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span> <span class="token comment">//就绪的文件描述符</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> _listen_sock<span class="token operator">&amp;&amp;</span>revs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token operator">&amp;</span>EPOLLIN<span class="token punctuation">)</span>
            <span class="token punctuation">{</span> <span class="token comment">//连接事件就绪</span>
				<span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> peer<span class="token punctuation">;</span>
				<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>peer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token class-name">socklen_t</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">int</span> sock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>_listen_sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>peer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>sock <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span> <span class="token comment">//获取连接失败</span>
					std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;accept error&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
					<span class="token keyword">continue</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				std<span class="token operator">::</span>string peer_ip <span class="token operator">=</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>peer<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">int</span> peer_port <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>peer<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
				std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;get a new link[&quot;</span> <span class="token operator">&lt;&lt;</span> peer_ip <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">&lt;&lt;</span> peer_port <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;]&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
				
				<span class="token function">AddEvent</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将获取到的套接字添加到epoll模型中，并关心其读事件</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>revs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token operator">&amp;</span>EPOLLIN<span class="token punctuation">)</span>
            <span class="token punctuation">{</span> <span class="token comment">//读事件就绪</span>
				<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token class-name">ssize_t</span> size <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span> <span class="token comment">//读取成功</span>
					buffer<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
					std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;echo# &quot;</span> <span class="token operator">&lt;&lt;</span> buffer <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span> <span class="token comment">//对端连接关闭</span>
					std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;client quit&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
					<span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token function">DelEvent</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将文件描述符从epoll模型中删除</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">else</span>
                <span class="token punctuation">{</span>
					std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;recv error&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
					<span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token function">DelEvent</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将文件描述符从epoll模型中删除</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
private<span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">AddEvent</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> event<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>
		ev<span class="token punctuation">.</span>events <span class="token operator">=</span> event<span class="token punctuation">;</span>
		ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> sock<span class="token punctuation">;</span>
		
		<span class="token function">epoll_ctl</span><span class="token punctuation">(</span>_epfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">DelEvent</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">epoll_ctl</span><span class="token punctuation">(</span>_epfd<span class="token punctuation">,</span> EPOLL_CTL_DEL<span class="token punctuation">,</span> sock<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-4-epoll服务器测试" tabindex="-1"><a class="header-anchor" href="#_2-4-epoll服务器测试"><span>2.4 epoll服务器测试</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;epoll_server.hpp&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Usage</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string proc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Usage: &quot;</span> <span class="token operator">&lt;&lt;</span> proc <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; port&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
		<span class="token function">Usage</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	EpollServer<span class="token operator">*</span> svr <span class="token operator">=</span> new <span class="token function">EpollServer</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
	svr<span class="token operator">-&gt;</span><span class="token function">InitEpollServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	svr<span class="token operator">-&gt;</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>因为编写epoll服务器在调用epoll_wait函数时，我们将timeout的值设置成了-1，因此运行服务器后如果没有客户端发来连接请求，那么服务器就会在调用epoll_wait函数后进行阻塞等待</strong></p></blockquote><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>当我们用telnet工具连接epoll服务器后，epoll服务器调用的epoll_wait函数在检测到监听套接字的读事件就绪后就会调用accept获取建立好的连接，并打印输出客户端的IP和端口号，此时客户端发来的数据也能够成功被epoll服务器收到并进行打印输出</strong></p></blockquote><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>此外，我们这里编写的也是一个单进程的epoll服务器，但是它可以同时为多个客户端提供服务</strong></p></blockquote><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>我们可以用ls /proc/PID/fd命令，查看当前epoll服务器的文件描述符的使用情况。其中文件描述符0、1、2是默认打开的，分别对应的是标准输入、标准输出和标准错误，3号文件描述符对应的是监听套接字，4号文件描述符对应的是服务器创建的epoll模型，5号和6号文件描述符对应的分别是正在访问服务器的两个客户端</strong></p></blockquote><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>当服务器端检测到客户端退出后，也会关闭对应的连接，此时epoll服务器对应的5号和6号文件描述符就关闭了</strong></p></blockquote><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',26),k=[r];function d(v,m){return s(),a("div",null,k)}const f=n(u,[["render",d],["__file","11.Linux多路转接之epoll.html.vue"]]),g=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/3.Linux/11.Linux%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5%E4%B9%8Bepoll.html","title":"第十一章：Linux的IO多路转接之epoll","lang":"zh-CN","frontmatter":{"date":"2024-04-11T00:00:00.000Z","order":11,"description":"第十一章：Linux的IO多路转接之epoll 1.知识点思维导图 2.epoll服务器代码 2.1 EpollServer类 2.2 运行服务器 2.3 事件处理 2.4 epoll服务器测试 因为编写epoll服务器在调用epoll_wait函数时，我们将timeout的值设置成了-1，因此运行服务器后如果没有客户端发来连接请求，那么服务器就会在调...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/3.Linux/11.Linux%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5%E4%B9%8Bepoll.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第十一章：Linux的IO多路转接之epoll"}],["meta",{"property":"og:description","content":"第十一章：Linux的IO多路转接之epoll 1.知识点思维导图 2.epoll服务器代码 2.1 EpollServer类 2.2 运行服务器 2.3 事件处理 2.4 epoll服务器测试 因为编写epoll服务器在调用epoll_wait函数时，我们将timeout的值设置成了-1，因此运行服务器后如果没有客户端发来连接请求，那么服务器就会在调..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-04-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十一章：Linux的IO多路转接之epoll\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.知识点思维导图","slug":"_1-知识点思维导图","link":"#_1-知识点思维导图","children":[]},{"level":2,"title":"2.epoll服务器代码","slug":"_2-epoll服务器代码","link":"#_2-epoll服务器代码","children":[{"level":3,"title":"2.1 EpollServer类","slug":"_2-1-epollserver类","link":"#_2-1-epollserver类","children":[]},{"level":3,"title":"2.2 运行服务器","slug":"_2-2-运行服务器","link":"#_2-2-运行服务器","children":[]},{"level":3,"title":"2.3 事件处理","slug":"_2-3-事件处理","link":"#_2-3-事件处理","children":[]},{"level":3,"title":"2.4 epoll服务器测试","slug":"_2-4-epoll服务器测试","link":"#_2-4-epoll服务器测试","children":[]}]}],"git":{},"readingTime":{"minutes":3.53,"words":1059},"filePathRelative":"编程学习/3.Linux/11.Linux多路转接之epoll.md","localizedDate":"2024年4月11日","autoDesc":true,"excerpt":"\\n<h2>1.知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>2.epoll服务器代码</h2>\\n<h3>2.1 EpollServer类</h3>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"socket.hpp\\"</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;sys/epoll.h&gt;</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">BACK_LOG</span> <span class=\\"token expression\\"><span class=\\"token number\\">5</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">SIZE</span> <span class=\\"token expression\\"><span class=\\"token number\\">256</span></span></span>\\n\\nclass EpollServer\\n<span class=\\"token punctuation\\">{</span>\\nprivate<span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">int</span> _listen_sock<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//监听套接字</span>\\n\\t<span class=\\"token keyword\\">int</span> _port<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//端口号</span>\\n\\t<span class=\\"token keyword\\">int</span> _epfd<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//epoll模型</span>\\npublic<span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">EpollServer</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> port<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token operator\\">:</span> <span class=\\"token function\\">_port</span><span class=\\"token punctuation\\">(</span>port<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">InitEpollServer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t_listen_sock <span class=\\"token operator\\">=</span> Socket<span class=\\"token operator\\">::</span><span class=\\"token function\\">SocketCreate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\tSocket<span class=\\"token operator\\">::</span><span class=\\"token function\\">SocketBind</span><span class=\\"token punctuation\\">(</span>_listen_sock<span class=\\"token punctuation\\">,</span> _port<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\tSocket<span class=\\"token operator\\">::</span><span class=\\"token function\\">SocketListen</span><span class=\\"token punctuation\\">(</span>_listen_sock<span class=\\"token punctuation\\">,</span> BACK_LOG<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\n\\t\\t<span class=\\"token comment\\">//创建epoll模型</span>\\n\\t\\t_epfd <span class=\\"token operator\\">=</span> <span class=\\"token function\\">epoll_create</span><span class=\\"token punctuation\\">(</span>SIZE<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_epfd <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tstd<span class=\\"token operator\\">::</span>cerr <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"epoll_create error\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token function\\">exit</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token operator\\">~</span><span class=\\"token function\\">EpollServer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_listen_sock <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span>_listen_sock<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_epfd <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span>_epfd<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}');export{f as comp,g as data};
