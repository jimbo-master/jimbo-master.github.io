import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const e="/assets/10.C__%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88-D6_yMeBt.png",p={},o=t('<h1 id="第十章-c-智能指针" tabindex="-1"><a class="header-anchor" href="#第十章-c-智能指针"><span>第十章：C++智能指针</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：jimbo（1353429820@qq.com）</span>
<span class="token comment">//  Filename：main</span>
<span class="token comment">//  Date：2024/1/23</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>

<span class="token comment">//智能指针概念：用于对一个资源进行管理，避免因为疏忽或错误造成程序未能释放已经不再使用的内存的情况</span>

<span class="token comment">//智能指针的设计：</span>
<span class="token comment">//1.在对象构造时获取资源，在对象析构时释放资源，利用对象的生命周期来控制资源，即RAII特性</span>
<span class="token comment">//2.对*和-&gt;运算符进行重载，使得智能指针具有和指针一样的行为</span>
<span class="token comment">//3.智能指针的拷贝问题：根据解决拷贝问题方式的不同，从而衍生出了不同版本的智能指针</span>

<span class="token comment">//分类：auto_ptr、unique_ptr、shared_ptr、weak_ptr</span>
<span class="token comment">//0.它们的头文件是：#include&lt;memory&gt;</span>
<span class="token comment">//1.auto_ptr：通过管理权限转移的方式，保证一个资源在任何时候都只有一个对象在对其进行管理。C++11以前使用，C++11后被弃用。</span>
<span class="token comment">//2.unique_ptr：通过防拷贝的方式，防止对智能指针对象进行拷贝</span>
<span class="token comment">//3.shared_ptr：通过引用计数的方式，支持多个对象一起对同一个资源进行管理</span>
<span class="token comment">//4.weak_ptr：通过不增加、不减少引用计数的方式，解决shared_ptr的循环引用问题</span>


<span class="token comment">//auto_ptr、unique_ptr、shared_ptr、weak_ptr的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;memory&gt;</span> <span class="token comment">//auto_ptr、unique_ptr、shared_ptr、weak_ptr头文件</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//使用std::auto_ptr(C++11后弃用)</span>
    std<span class="token operator">::</span>auto_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">autoPtr</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;autoPtr：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>autoPtr <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> <span class="token comment">//输出42</span>
    <span class="token comment">//auto_ptr离开作用域后，释放内存</span>

    <span class="token comment">//使用std::unique_ptr</span>
    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">uniquePtr</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;uniquePtr：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>uniquePtr <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">//unique_ptr离开作用域后，释放内存</span>

    <span class="token comment">//使用std::shared_ptr</span>
    std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> sharedPtr <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//多个shared_ptr共享同一个对象</span>
    std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> anotherSharePtr <span class="token operator">=</span> sharedPtr<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;sharedPtr：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sharedPtr <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;anotherSharedPtr：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>anotherSharePtr <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">//当最后一个shared_ptr离开作用域后，释放内存</span>

    <span class="token comment">//使用std::weak_ptr</span>
    std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> sharedPtr1 <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>weak_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> weakPtr <span class="token operator">=</span> sharedPtr1<span class="token punctuation">;</span>
    <span class="token comment">//使用weak_ptr时需要通过lock()转换shared_ptr</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">auto</span> shared <span class="token operator">=</span> weakPtr<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;weakPtr：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>shared <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> <span class="token comment">//输出45</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The object is no longer available&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//当最后一个shared_ptr离开作用域时，weak_ptr不影响内存释放</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果</span>
<span class="token comment">//autoPtr：42</span>
<span class="token comment">//uniquePtr：43</span>
<span class="token comment">//sharedPtr：44</span>
<span class="token comment">//anotherSharedPtr：44</span>
<span class="token comment">//weakPtr：45</span>


<span class="token comment">//2.boost中智能指针关系</span>
<span class="token comment">//C++98中产生了第一个智能指针auto_ptr</span>
<span class="token comment">//C++boost给出了更实用的scoped_ptr、shared_ptr、weak_ptr</span>
<span class="token comment">//C++TR1引入boost中的shared_ptr等，不过注意的是TR1并不是标准版，而是一个技术报告</span>
<span class="token comment">//C++11引入了boost中的unique_ptr、shared_ptr和weak_ptr，其中unique_ptr对应的就是boost中的scope_ptr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function r(l,i){return s(),a("div",null,c)}const d=n(p,[["render",r],["__file","10.C__智能指针.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/10.C__%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html","title":"第十章：C++智能指针","lang":"zh-CN","frontmatter":{"date":"2024-02-10T00:00:00.000Z","order":11,"description":"第十章：C++智能指针 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/10.C__%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第十章：C++智能指针"}],["meta",{"property":"og:description","content":"第十章：C++智能指针 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十章：C++智能指针\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":2.27,"words":681},"filePathRelative":"编程学习/2.CPP/10.C++智能指针.md","localizedDate":"2024年2月10日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：jimbo（1353429820@qq.com）</span>\\n<span class=\\"token comment\\">//  Filename：main</span>\\n<span class=\\"token comment\\">//  Date：2024/1/23</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n<span class=\\"token comment\\">//智能指针概念：用于对一个资源进行管理，避免因为疏忽或错误造成程序未能释放已经不再使用的内存的情况</span>\\n\\n<span class=\\"token comment\\">//智能指针的设计：</span>\\n<span class=\\"token comment\\">//1.在对象构造时获取资源，在对象析构时释放资源，利用对象的生命周期来控制资源，即RAII特性</span>\\n<span class=\\"token comment\\">//2.对*和-&gt;运算符进行重载，使得智能指针具有和指针一样的行为</span>\\n<span class=\\"token comment\\">//3.智能指针的拷贝问题：根据解决拷贝问题方式的不同，从而衍生出了不同版本的智能指针</span>\\n\\n<span class=\\"token comment\\">//分类：auto_ptr、unique_ptr、shared_ptr、weak_ptr</span>\\n<span class=\\"token comment\\">//0.它们的头文件是：#include&lt;memory&gt;</span>\\n<span class=\\"token comment\\">//1.auto_ptr：通过管理权限转移的方式，保证一个资源在任何时候都只有一个对象在对其进行管理。C++11以前使用，C++11后被弃用。</span>\\n<span class=\\"token comment\\">//2.unique_ptr：通过防拷贝的方式，防止对智能指针对象进行拷贝</span>\\n<span class=\\"token comment\\">//3.shared_ptr：通过引用计数的方式，支持多个对象一起对同一个资源进行管理</span>\\n<span class=\\"token comment\\">//4.weak_ptr：通过不增加、不减少引用计数的方式，解决shared_ptr的循环引用问题</span>\\n\\n\\n<span class=\\"token comment\\">//auto_ptr、unique_ptr、shared_ptr、weak_ptr的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;memory&gt;</span> <span class=\\"token comment\\">//auto_ptr、unique_ptr、shared_ptr、weak_ptr头文件</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//使用std::auto_ptr(C++11后弃用)</span>\\n    std<span class=\\"token operator\\">::</span>auto_ptr<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">autoPtr</span><span class=\\"token punctuation\\">(</span>new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"autoPtr：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>autoPtr <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//输出42</span>\\n    <span class=\\"token comment\\">//auto_ptr离开作用域后，释放内存</span>\\n\\n    <span class=\\"token comment\\">//使用std::unique_ptr</span>\\n    std<span class=\\"token operator\\">::</span>unique_ptr<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">uniquePtr</span><span class=\\"token punctuation\\">(</span>new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">43</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"uniquePtr：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>uniquePtr <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//unique_ptr离开作用域后，释放内存</span>\\n\\n    <span class=\\"token comment\\">//使用std::shared_ptr</span>\\n    std<span class=\\"token operator\\">::</span>shared_ptr<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> sharedPtr <span class=\\"token operator\\">=</span> std<span class=\\"token operator\\">::</span>make_shared<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">44</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//多个shared_ptr共享同一个对象</span>\\n    std<span class=\\"token operator\\">::</span>shared_ptr<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> anotherSharePtr <span class=\\"token operator\\">=</span> sharedPtr<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"sharedPtr：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>sharedPtr <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"anotherSharedPtr：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>anotherSharePtr <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//当最后一个shared_ptr离开作用域后，释放内存</span>\\n\\n    <span class=\\"token comment\\">//使用std::weak_ptr</span>\\n    std<span class=\\"token operator\\">::</span>shared_ptr<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> sharedPtr1 <span class=\\"token operator\\">=</span> std<span class=\\"token operator\\">::</span>make_shared<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">45</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>weak_ptr<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> weakPtr <span class=\\"token operator\\">=</span> sharedPtr1<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//使用weak_ptr时需要通过lock()转换shared_ptr</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span> shared <span class=\\"token operator\\">=</span> weakPtr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"weakPtr：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>shared <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//输出45</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">else</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"The object is no longer available\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">//当最后一个shared_ptr离开作用域时，weak_ptr不影响内存释放</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果</span>\\n<span class=\\"token comment\\">//autoPtr：42</span>\\n<span class=\\"token comment\\">//uniquePtr：43</span>\\n<span class=\\"token comment\\">//sharedPtr：44</span>\\n<span class=\\"token comment\\">//anotherSharedPtr：44</span>\\n<span class=\\"token comment\\">//weakPtr：45</span>\\n\\n\\n<span class=\\"token comment\\">//2.boost中智能指针关系</span>\\n<span class=\\"token comment\\">//C++98中产生了第一个智能指针auto_ptr</span>\\n<span class=\\"token comment\\">//C++boost给出了更实用的scoped_ptr、shared_ptr、weak_ptr</span>\\n<span class=\\"token comment\\">//C++TR1引入boost中的shared_ptr等，不过注意的是TR1并不是标准版，而是一个技术报告</span>\\n<span class=\\"token comment\\">//C++11引入了boost中的unique_ptr、shared_ptr和weak_ptr，其中unique_ptr对应的就是boost中的scope_ptr</span>\\n</code></pre></div>"}');export{d as comp,m as data};
