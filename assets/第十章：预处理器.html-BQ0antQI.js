import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-Dezzdk4T.js";const t="/assets/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-C6sE9fSW.png",p="/assets/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84-DtC2rWLu.png",o="/assets/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%911-DkT2SmAX.png",i="/assets/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%912-DZkV9VDh.png",c="/assets/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%913-CQM-3rcs.png",l="/assets/%E9%A2%84%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93-CdKoK0CI.png",r={},d=e(`<h1 id="第十章-预处理器" tabindex="-1"><a class="header-anchor" href="#第十章-预处理器"><span>第十章：预处理器</span></a></h1><h2 id="_1-预处理器基本介绍" tabindex="-1"><a class="header-anchor" href="#_1-预处理器基本介绍"><span>1.预处理器基本介绍</span></a></h2><p><strong>（1）预处理器</strong></p><blockquote><p><strong>C语言编译器在编译程序之前，会先使用预处理器（preprocessor）处理代码，代码经过预处理之后再送入编译器进行编译</strong><br><br><strong>预处理器的主要任务包括宏替换、文件包含、条件编译等</strong></p></blockquote><p><strong>（2）预处理指令</strong></p><blockquote><p><strong>预处理过程中会执行预处理指令，预处理指令以 # 号开头，用于指导预处理器执行不同的任务</strong></p></blockquote><p><strong>预处理指令具有如下特点：</strong></p><blockquote><p><strong>1.预处理指令应该放在代码的开头部分</strong><br><br><strong>2.预处理指令都以 # 开头，指令前面可以有空白字符（比如空格或制表符），# 和指令的其余部分之间也可以有空格，但是为了兼容老的编译器，一般不留空格</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 推荐写法</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 不推荐写法</span>
    #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>3.预处理指令都是一行的，除非在行尾使用反斜杠，将其折行</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;std\\
io.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>4.预处理指令不需要分号作为结束符，指令结束是通过换行符来识别的</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token expression"><span class="token punctuation">;</span> 	</span><span class="token comment">// 这里有分号会报错</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span><span class="token punctuation">;</span>    	</span><span class="token comment">// 分号会成为 PI 的值的一部分</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>5.预处理指令通常不能写在函数内部，有些编译器的扩展允许将预处理指令写在函数里，但强烈不建议这么干</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 一般不允许写在这里</span>
    #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-宏定义" tabindex="-1"><a class="header-anchor" href="#_2-宏定义"><span>2.宏定义</span></a></h2><p><strong>（1）宏定义基本介绍</strong></p><blockquote><p><strong>宏定义，就是用一个标识符（宏名称）来表示一个替换文本，如果在后面的代码中出现了宏名称，预处理器会将它替换为对应的文本，称为宏替换或宏展开</strong></p></blockquote><blockquote><p><strong>宏定义基本语法：#define 宏名称 替换文本</strong><br><br><strong>宏名称：宏的名称，是一个标识符，通常使用大写字母表示，以便与变量名区分开来</strong><br><br><strong>替换文本：宏名称在代码中的每次出现都会被替换为这段文本</strong><br><br><strong>前面的案例中，我们曾经使用宏定义来定义常量和布尔类型</strong></p></blockquote><p><strong>（2）使用宏定义常量</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//下面代码中，使用宏定义声明了N，后面代码中出现了 N，会替换成 100</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 定义常量</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 定义变量保存半径，值通过用户输入获取</span>
    <span class="token keyword">double</span> radius<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入半径：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算面积并输出</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;圆的面积：%.2f&quot;</span><span class="token punctuation">,</span> radius <span class="token operator">*</span> PI <span class="token operator">*</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）使用宏定义数据类型</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>
<span class="token comment">//下面代码中使用宏定义声明了BOOL、TURE、FALSE，后面代码中出现BOOL会替换成int，出现TRUE会替换成1，出现FALSE替换成0</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 宏定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BOOL</span> <span class="token expression"><span class="token keyword">int</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 使用整型表示真假两种状态</span>
    <span class="token comment">// int isPass = 0;</span>
    <span class="token comment">// int isOk = 1;</span>

    <span class="token comment">// 借助于宏定义</span>
    BOOL isPass <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    BOOL isOk <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>isPass<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>isOk<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）宏定义的替换文本</strong></p><blockquote><p><strong>替换文本可以含任何字符，它可以是字面量、表达式、if 语句、函数等，预处理程序对它不作任何检查，直接进行文本替换，如有错误，只能在编译已被宏展开后的源程序时发现</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token punctuation">(</span>n <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> n<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRINT_SUM</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;sum=%d&quot;</span><span class="token expression"><span class="token punctuation">,</span> sum<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> M <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> M <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> M<span class="token punctuation">;</span> <span class="token comment">// 宏展开 3*(n*n+3*n)+4*(n*n+3*n)+5*(n*n+3*n);</span>
    PRINT_SUM<span class="token punctuation">;</span>                       <span class="token comment">// 宏展开 printf(&quot;sum=%d&quot;, sum)</span>

    <span class="token comment">//sum=216</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（5）宏定义嵌套</strong></p><blockquote><p><strong>宏定义允许嵌套，在宏定义的替换文本中可以使用已经定义的宏名，在宏展开时由预处理程序层层替换</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.1415926</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span> <span class="token expression">PI <span class="token operator">*</span>y <span class="token operator">*</span>y</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宏替换变为 printf(&quot;%f&quot;, 3.1415926*y*y);</span>

    <span class="token comment">//12.566370</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（6）取消宏定义</strong></p><blockquote><p><strong>如要取消宏定义使用#undef命令</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14159</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;PI=%f&quot;</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//PI=3.141590</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">PI </span><span class="token comment">// 取消宏定义</span></span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// printf(&quot;PI=%f&quot;, PI); //错误,这里不能使用到PI了</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-带参数的宏定义" tabindex="-1"><a class="header-anchor" href="#_3-带参数的宏定义"><span>3.带参数的宏定义</span></a></h2><p><strong>（1）带参数的宏定义基本介绍</strong></p><blockquote><p><strong>C语言允许宏带有参数。在宏定义中的参数称为“形式参数”，在宏调用中的参数称为“实际参数”，这和函数有些类似</strong><br><br><strong>对带参数的宏，在展开过程中不仅要进行文本替换，还要用实参去替换形参</strong><br><br><strong>带参宏定义的一般形式为#define宏名（形参列表）替换文本，在替换文本中可以含有各个形参</strong><br><br><strong>带参宏调用的一般形式为：宏名（实参列表）</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 说明</span>
<span class="token comment">//  1. MAX 就是带参数的宏</span>
<span class="token comment">//  2. (a,b) 就是形参</span>
<span class="token comment">//  3. (a&gt;b) ? a : b是带参数的宏对应字符串，该字符串中可以使用形参</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> max<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;input two numbers: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 说明</span>
    <span class="token comment">//  1.  MAX(x, y); 调用带参数宏定义</span>
    <span class="token comment">//  2.  在宏替换时(预处理，由预处理器)， 会进行字符串的替换，同时会使用实参， 去替换形参</span>
    <span class="token comment">//  3. 即MAX(x, y) 宏替换后  (x&gt;y) ? x : y</span>
    max <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max=%d\\n&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）注意事项和细节</strong></p><blockquote><p><strong>带参宏定义中，形参之间可以出现空格，但是宏名和形参列表之间不能有空格出现</strong><br><br><strong>在带参宏定义中，不会为形式参数分配内存，因此不必指明数据类型，而在宏调用中，实参包含了具体的数据，要用它们去替换形参，因此实参必须要指明数据类型</strong><br><br><strong>在宏定义中，替换文本内的形参通常要用括号括起来以避免出错</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 带参宏定义,字符串内的形参通常要用括号括起来以避免出错</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQ</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> sq<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;input a number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 宏替换为 (a+1) * (a+1)</span>
    sq <span class="token operator">=</span> <span class="token function">SQ</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sq=%d\\n&quot;</span><span class="token punctuation">,</span> sq<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）带参宏定义和函数的区别</strong></p><blockquote><p><strong>宏展开仅仅是文本的替换，不会对表达式进行计算；宏在编译之前就被处理掉了，它没有机会参与编译，也不会占用内存</strong><br><br><strong>函数是一段可以重复使用的代码，会被编译，会给它分配内存，每次调用函数， 就是执行这块内存中的代码</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//函数实现</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">SQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> y <span class="token operator">*</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">SQ</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//带参数的宏实现</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQ</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// SQ(i++) 会被宏替换为 (i++) * (i++), i++ 会执行两次，最终无法得到我们想要的结果</span>
        <span class="token comment">// printf(&quot;%d\\n&quot;, SQ(i++));</span>
        
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">SQ</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-文件包含" tabindex="-1"><a class="header-anchor" href="#_4-文件包含"><span>4.文件包含</span></a></h2><p><strong>#include 指令用于引入标准库头文件、自定义头文件或其他外部源代码文件，以便在当前源文件中使用其中定义的函数、变量、宏等内容</strong></p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>一个源文件可以导入多个头文件，一个头文件也可以被多个源文件导入</strong><br><strong>标准库头文件、自定义头文件的扩展名都是 .h</strong></p></blockquote><p><strong>（1）包含标准库头文件</strong></p><blockquote><p><strong>标准库头文件是系统提供的头文件，直接引入即可，像我们前面用过的 stdio.h、stdbool.h、string.h、time.h 等。引入标准库头文件需要使用尖括号将文件名包裹起来，格式如下:</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;头文件名.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）包含自定义头文件</strong></p><blockquote><p><strong>自定义头文件的文件名写在双引号里面，格式如下：</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;文件名.h&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>建议把所有的常量、宏、系统全局变量和函数原型写在自定义的头文件中，在需要的时候随时引用这些头文件</strong></p></blockquote><p><strong>（3）使用相对路径</strong></p><blockquote><p><strong>如果自定义的头文件在源文件的同级目录或源文件所在目录的下级目录，使用 ./ 开头的路径，./ 可以省略</strong><br><br><strong>如果自定义的头文件在源文件所在目录的上级或者更上级，使用 ../ 开头的路径</strong></p></blockquote><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>如果要在源文件 main.c 中引入以上自定义的头文件，需按照如下写法：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//需要注意的是，建议将头文件放置在源文件所在目录或子目录中，以保持项目的组织结构清晰</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;myheader01.h&quot;</span> <span class="token comment">// 等价于 #include &quot;./myheader01.h&quot; </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;includes/myheader02.h&quot;</span> <span class="token comment">// 等价于 #include &quot;./myheader01.h&quot; </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../myheader03.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../inc/myheader04.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../../myheader05.h&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）使用绝对路径</strong></p><blockquote><p><strong>绝对路径是文件在文件系统中的完整路径，它从文件系统的盘符（Windows系统）或根目录（Linux系统、MacOS系统）开始，沿着文件系统的目录结构一直到达目标文件</strong></p></blockquote><p><strong>Windows 系统中使用绝对路径引入自定义头文件，示例如下：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;C:\\Preparation\\Embedded\\01CLang\\code\\project\\foo.h&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Linux系统或MacOS系统中使用绝对路径引入自定义头文件，示例如下：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;/usr/local/lib/foo.h&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="_5-条件编译" tabindex="-1"><a class="header-anchor" href="#_5-条件编译"><span>5.条件编译</span></a></h2><p><strong>（1）#if</strong><br><strong>①#if...#endif</strong></p><blockquote><p><strong>#if...#endif指令用于预处理器的条件判断，满足条件时，内部的行会被编译，否则就被编译器忽略</strong></p></blockquote><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
  <span class="token keyword">const</span> <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span> <span class="token comment">// 不会执行</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>上面示例中，#if后面的0，表示判断条件不成立。所以，内部的变量定义语句会被编译器忽略。#if 0这种写法常用来当作注释使用，不需要的代码就放在#if 0里面</strong><br><br><strong>#if后面的判断条件，通常是一个表达式。如果表达式的值不等于0，就表示判断条件为真，编译内部的语句；如果表达式的值等于0，表示判断条件为伪，则忽略内部的语句</strong></p></blockquote><p><strong>②#if...#else...#endif</strong></p><blockquote><p><strong>#if...#endif之间还可以加入#else指令，用于指定判断条件不成立时，需要编译的语句</strong></p></blockquote><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FOO</span> <span class="token expression"><span class="token number">1</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">FOO</span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;defined\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;not defined\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>上面示例中，宏FOO如果定义过，会被替换成1，从而输出defined，否则输出not defined</strong></p></blockquote><p><strong>③#if...#elif...#else...#endif</strong></p><blockquote><p><strong>如果有多个判断条件，还可以加入#elif命令</strong></p></blockquote><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAPPY_FACTOR <span class="token operator">==</span> <span class="token number">0</span></span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m not happy!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">HAPPY_FACTOR <span class="token operator">==</span> <span class="token number">1</span></span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m just regular\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m extra happy!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>上面示例中，通过#elif指定了第二重判断。注意，#elif的位置必须在#else之前。如果多个判断条件皆不满足，则执行#else的部分</strong><br><br><strong>没有定义过的宏，等同于0。因此如果UNDEFINED是一个没有定义过的宏，那么#if UNDEFINED为伪，而#if !UNDEFINED为真</strong></p></blockquote><p><strong>（2）#ifdef</strong></p><blockquote><p><strong>①#ifdef...#endif指令用于判断某个宏是否定义过</strong></p></blockquote><blockquote><p><strong>有时源码文件可能会重复加载某个库，为了避免这种情况，可以在库文件里使用#define定义一个空的宏。通过这个宏，判断库文件是否被加载了</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//下面示例中，EXTRA_HAPPY就是一个空的宏</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTRA_HAPPY</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>然后，源码文件使用#ifdef...#endif检查这个宏是否定义过</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//下面示例中，#ifdef检查宏EXTRA_HAPPY是否定义过。如果已经存在，表示加载过库文件，就会打印一行提示</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">EXTRA_HAPPY</span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m extra happy!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>②#ifdef可以与#else指令配合使用</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//下面示例中，如果宏EXTRA_HAPPY没有定义过，就会执行#else的部分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">EXTRA_HAPPY</span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m extra happy!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m just regular\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>③#ifdef...#else...#endif可以用来实现条件加载</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//下面示例中，通过判断宏MAVIS是否定义过，实现加载不同的头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">MAVIS</span></span>
  #include <span class="token string">&quot;foo.h&quot;</span>
  #define STABLES <span class="token number">1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  #include <span class="token string">&quot;bar.h&quot;</span>
  #define STABLES <span class="token number">2</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）#if defined</strong></p><blockquote><p><strong>#ifdef指令，等同于#if defined</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//下面示例中，defined是一个预处理运算符，如果它的参数是一个定义过的宏，就会返回1，否则返回0</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">FOO</span></span>
<span class="token comment">// 等同于</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">defined FOO</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//使用这种语法，可以完成多重判断</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">defined FOO</span></span>
  x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">defined BAR</span></span>
  x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）#ifndef</strong></p><blockquote><p><strong>#ifndef...#endif指令跟#ifdef...#endif正好相反。它用来判断，如果某个宏没有被定义过，则执行指定的操作</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//下面示例中，针对宏EXTRA_HAPPY是否被定义过，#ifdef和#ifndef分别指定了两种情况各自需要编译的代码</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">EXTRA_HAPPY</span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m extra happy!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXTRA_HAPPY</span></span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m just regular\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>#ifndef常用于防止重复加载。举例来说，为了防止头文件myheader.h被重复加载，可以把它放在#ifndef...#endif里面加载</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//下面示例中，宏MYHEADER_H对应文件名myheader.h的大写。只要#ifndef发现这个宏没有被定义过，就说明该头文件没有加载过，从而加载内部的代码，并会定义宏MYHEADER_H，防止被再次加载</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MYHEADER_H</span></span>
  #define MYHEADER_H
  #include <span class="token string">&quot;myheader.h&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_6-预处理命令总结" tabindex="-1"><a class="header-anchor" href="#_6-预处理命令总结"><span>6.预处理命令总结</span></a></h2><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',107),u=[d];function k(v,m){return s(),a("div",null,u)}const h=n(r,[["render",k],["__file","第十章：预处理器.html.vue"]]),f=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/1.C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8.html","title":"第十章：预处理器","lang":"zh-CN","frontmatter":{"date":"2024-01-10T00:00:00.000Z","order":11,"description":"第十章：预处理器 1.预处理器基本介绍 （1）预处理器 C语言编译器在编译程序之前，会先使用预处理器（preprocessor）处理代码，代码经过预处理之后再送入编译器进行编译 预处理器的主要任务包括宏替换、文件包含、条件编译等 （2）预处理指令 预处理过程中会执行预处理指令，预处理指令以 # 号开头，用于指导预处理器执行不同的任务 预处理指令具有如下...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/1.C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第十章：预处理器"}],["meta",{"property":"og:description","content":"第十章：预处理器 1.预处理器基本介绍 （1）预处理器 C语言编译器在编译程序之前，会先使用预处理器（preprocessor）处理代码，代码经过预处理之后再送入编译器进行编译 预处理器的主要任务包括宏替换、文件包含、条件编译等 （2）预处理指令 预处理过程中会执行预处理指令，预处理指令以 # 号开头，用于指导预处理器执行不同的任务 预处理指令具有如下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-01-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十章：预处理器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.预处理器基本介绍","slug":"_1-预处理器基本介绍","link":"#_1-预处理器基本介绍","children":[]},{"level":2,"title":"2.宏定义","slug":"_2-宏定义","link":"#_2-宏定义","children":[]},{"level":2,"title":"3.带参数的宏定义","slug":"_3-带参数的宏定义","link":"#_3-带参数的宏定义","children":[]},{"level":2,"title":"4.文件包含","slug":"_4-文件包含","link":"#_4-文件包含","children":[]},{"level":2,"title":"5.条件编译","slug":"_5-条件编译","link":"#_5-条件编译","children":[]},{"level":2,"title":"6.预处理命令总结","slug":"_6-预处理命令总结","link":"#_6-预处理命令总结","children":[]}],"git":{},"readingTime":{"minutes":11.38,"words":3414},"filePathRelative":"编程学习/1.C语言/第十章：预处理器.md","localizedDate":"2024年1月10日","autoDesc":true,"excerpt":"\\n<h2>1.预处理器基本介绍</h2>\\n<p><strong>（1）预处理器</strong></p>\\n<blockquote>\\n<p><strong>C语言编译器在编译程序之前，会先使用预处理器（preprocessor）处理代码，代码经过预处理之后再送入编译器进行编译</strong><br><br>\\n<strong>预处理器的主要任务包括宏替换、文件包含、条件编译等</strong></p>\\n</blockquote>\\n<p><strong>（2）预处理指令</strong></p>\\n<blockquote>\\n<p><strong>预处理过程中会执行预处理指令，预处理指令以 # 号开头，用于指导预处理器执行不同的任务</strong></p>\\n</blockquote>"}');export{h as comp,f as data};
