import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as n,b as r}from"./app-Dezzdk4T.js";const e="/assets/%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92%E7%89%B9%E7%82%B9-B8zMIuZB.png",s={},i=r('<h1 id="第三章-复杂度分析" tabindex="-1"><a class="header-anchor" href="#第三章-复杂度分析"><span>第三章：复杂度分析</span></a></h1><h2 id="_1-算法效率评估" tabindex="-1"><a class="header-anchor" href="#_1-算法效率评估"><span>1.算法效率评估</span></a></h2><p><strong>在算法设计中，我们先后追求以下两个层面的目标：</strong></p><ul><li><strong>找到问题解法：算法需要在规定的输入范围内可靠地求得问题的正确解</strong></li><li><strong>寻求最优解法：同一个问题可能存在多种解法，我们希望找到尽可能高效的算法</strong></li></ul><p><strong>也就是说，在能够解决问题的前提下，算法效率已成为衡量算法优劣的主要评价指标，它包括以下两个维度：</strong></p><ul><li><strong>时间效率：算法运行速度的快慢</strong></li><li><strong>空间效率：算法占用内存空间的大小</strong></li></ul><p><strong>简而言之，我们的目标是设计“既快又省”的数据结构与算法。而有效地评估算法效率至关重要，因为只有这样，我们才能将各种算法进行对比，进而指导算法设计与优化过程</strong></p><p><strong>效率评估方法主要分为两种：实际测试、理论估算</strong></p><hr><h2 id="_2-迭代与递归" tabindex="-1"><a class="header-anchor" href="#_2-迭代与递归"><span>2.迭代与递归</span></a></h2><p><strong>在算法中，重复执行某个任务是很常见的，它与复杂度分析息息相关。因此，在介绍时间复杂度和空间复杂度之前，我们先来了解如何在程序中实现重复执行任务，即两种基本的程序控制结构：迭代、递归</strong></p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>迭代一般分为：for、while、嵌套循环</strong><br><br><strong>递归一般分为：调用栈、尾递归、递归树</strong></p></blockquote><p><strong>迭代（iteration）是一种重复执行某个任务的控制结构。在迭代中，程序会在满足一定的条件下重复执行某段代码，直到这个条件不再满足</strong></p><p><strong>递归（recursion）是一种算法策略，通过函数调用自身来解决问题。它主要包含两个阶段</strong></p><ul><li><strong>递：程序不断深入地调用自身，通常传入更小或更简化的参数，直到达到“终止条件”</strong></li><li><strong>归：触发“终止条件”后，程序从最深层的递归函数开始逐层返回，汇聚每一层的结果</strong></li></ul><blockquote><p><strong>迭代：“自下而上”地解决问题。从最基础的步骤开始，然后不断重复或累加这些步骤，直到任务完成</strong><br><br><strong>递归：“自上而下”地解决问题。将原问题分解为更小的子问题，这些子问题和原问题具有相同的形式。接下来将子问题继续分解为更小的子问题，直到基本情况时停止（基本情况的解是已知的）</strong></p></blockquote>',17),l=[i];function a(p,g){return o(),n("div",null,l)}const E=t(s,[["render",a],["__file","3.复杂度分析.html.vue"]]),m=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/3.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90.html","title":"第三章：复杂度分析","lang":"zh-CN","frontmatter":{"date":"2024-03-03T00:00:00.000Z","order":3,"description":"第三章：复杂度分析 1.算法效率评估 在算法设计中，我们先后追求以下两个层面的目标： 找到问题解法：算法需要在规定的输入范围内可靠地求得问题的正确解 寻求最优解法：同一个问题可能存在多种解法，我们希望找到尽可能高效的算法 也就是说，在能够解决问题的前提下，算法效率已成为衡量算法优劣的主要评价指标，它包括以下两个维度： 时间效率：算法运行速度的快慢 空间...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/3.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第三章：复杂度分析"}],["meta",{"property":"og:description","content":"第三章：复杂度分析 1.算法效率评估 在算法设计中，我们先后追求以下两个层面的目标： 找到问题解法：算法需要在规定的输入范围内可靠地求得问题的正确解 寻求最优解法：同一个问题可能存在多种解法，我们希望找到尽可能高效的算法 也就是说，在能够解决问题的前提下，算法效率已成为衡量算法优劣的主要评价指标，它包括以下两个维度： 时间效率：算法运行速度的快慢 空间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-03-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第三章：复杂度分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.算法效率评估","slug":"_1-算法效率评估","link":"#_1-算法效率评估","children":[]},{"level":2,"title":"2.迭代与递归","slug":"_2-迭代与递归","link":"#_2-迭代与递归","children":[]}],"git":{},"readingTime":{"minutes":2.22,"words":666},"filePathRelative":"算法学习/1.算法知识/3.复杂度分析.md","localizedDate":"2024年3月3日","autoDesc":true,"excerpt":"\\n<h2>1.算法效率评估</h2>\\n<p><strong>在算法设计中，我们先后追求以下两个层面的目标：</strong></p>\\n<ul>\\n<li><strong>找到问题解法：算法需要在规定的输入范围内可靠地求得问题的正确解</strong></li>\\n<li><strong>寻求最优解法：同一个问题可能存在多种解法，我们希望找到尽可能高效的算法</strong></li>\\n</ul>\\n<p><strong>也就是说，在能够解决问题的前提下，算法效率已成为衡量算法优劣的主要评价指标，它包括以下两个维度：</strong></p>\\n<ul>\\n<li><strong>时间效率：算法运行速度的快慢</strong></li>\\n<li><strong>空间效率：算法占用内存空间的大小</strong></li>\\n</ul>"}');export{E as comp,m as data};
