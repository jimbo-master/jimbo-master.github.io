import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/4.C__%E6%A8%A1%E6%9D%BF-CK3VpKi1.png",e={},o=t('<h1 id="第四章-c-模板" tabindex="-1"><a class="header-anchor" href="#第四章-c-模板"><span>第四章：C++模板</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：JimBo (1353429820@qq.com)</span>
<span class="token comment">//  Filename：main</span>
<span class="token comment">//  Date：2024/1/17</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>


<span class="token comment">//1.函数模板定义：template&lt;class&gt;、template&lt;typename&gt;</span>
<span class="token comment">//早期使用：template&lt;class&gt;，因为早期class是唯一的关键字</span>
<span class="token comment">//现在使用：template&lt;typename&gt;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//add函数时一个模板，使用typename T来表示参数类型的占位符</span>
<span class="token comment">//当调用add函数时，编译器会根据传入的实际类型自动生成相应的函数</span>
template<span class="token operator">&lt;</span>typename T<span class="token operator">&gt;</span>
T <span class="token function">add</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//使用函数模板</span>
    <span class="token keyword">int</span> result_int <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span>  result_double <span class="token operator">=</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> result_int <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> result_double <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：
         15
         6.2
*/</span>


<span class="token comment">//2.函数模板实例化：显式实例化、隐式实例化</span>
<span class="token comment">//显式实例化：在模板后用&lt;类型&gt;来指定类型</span>
<span class="token comment">//隐式实例化：根据传入的参数自动实例化</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

template<span class="token operator">&lt;</span>typename T<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;param：&quot;</span> <span class="token operator">&lt;&lt;</span> param <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//隐式实例化为：int、double</span>
    <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">20.20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//显式实例化为：char、string</span>
    function<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    function<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：
            param：10
            param：20.20
            param：a
            param：你好
*/</span>


<span class="token comment">//3.类模板的定义、实例化</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
template<span class="token operator">&lt;</span>typename T<span class="token operator">&gt;</span>
class mycontainer
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token comment">//构造函数</span>
    <span class="token function">mycontainer</span><span class="token punctuation">(</span>T arg<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">element</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">//获取元素</span>
    T <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">return</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

 private<span class="token operator">:</span>
    <span class="token comment">//模板推导成员变量类型</span>
    T element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 全局显式实例化为int类型的版本，也可以在声明类变量的时候实例化</span>
template class MyContainer<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//类模板显式实例化</span>
    mycontainer<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">intContainer</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value of intContainer：&quot;</span> <span class="token operator">&lt;&lt;</span> intContainer<span class="token punctuation">.</span><span class="token function">get_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">//类模板隐式实例化</span>
    mycontainer <span class="token function">doubleContainer</span><span class="token punctuation">(</span><span class="token number">42.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value of doubleContainer：&quot;</span> <span class="token operator">&lt;&lt;</span> doubleContainer<span class="token punctuation">.</span><span class="token function">get_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：
        Value of intContainer：42
        Value of doubleContainer：42.2
*/</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//通过非类型模板参数给array数组一个初始size，方便后续操作</span>
template<span class="token operator">&lt;</span><span class="token keyword">int</span> size<span class="token operator">&gt;</span>
class FixedArray
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">set_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>
       <span class="token punctuation">{</span>
          array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">else</span>
       <span class="token punctuation">{</span>
          std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;下标越界!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>
       <span class="token punctuation">{</span>
          <span class="token keyword">return</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">else</span>
       <span class="token punctuation">{</span>
          std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;下标越界!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 private<span class="token operator">:</span>
    <span class="token keyword">int</span> array<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FixedArray<span class="token operator">&lt;</span><span class="token number">5</span><span class="token operator">&gt;</span> myArray<span class="token punctuation">;</span>
    myArray<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value at index 2：&quot;</span> <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation">.</span><span class="token function">get_value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：
        Value at index 2：42
*/</span>


<span class="token comment">//5.模板特化</span>
<span class="token comment">//通过模板特化对一些特殊的类型进行特殊化实现</span>
<span class="token comment">//比如下面使用char类型时，就调用特化为char类型的模板</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//通用模板</span>
template<span class="token operator">&lt;</span>typename T<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print_value</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;通用模板：&quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//函数模板特化为char类型</span>
template<span class="token operator">&lt;</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> print_value<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;特化为char的模板：&quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：
         通用模板：42
         特化为char的模板：A
*/</span>


<span class="token comment">//6.全特化和偏特化</span>
<span class="token comment">//全特化：是指为模板提供特定类型或特定值的完整实现，相当于定死模板特化内容</span>
<span class="token comment">//偏特化：是指在模板中一部分参数被具体指定，而另一部分参数保留为泛型形式，相当于保留一部分给你修改</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//通用函数模板</span>
template<span class="token operator">&lt;</span>typename T<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token operator">&gt;</span>
class myContainer
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;通用类模板&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//类模板全特化为int类型和值为5</span>
template<span class="token operator">&lt;</span><span class="token operator">&gt;</span>
class myContainer<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;全特化为int和值为5&quot;</span> <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//类模板偏特化为int类型</span>
template<span class="token operator">&lt;</span><span class="token keyword">int</span> N<span class="token operator">&gt;</span>
class myContainer<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> N<span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;偏特化为int，值为：&quot;</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//调用通用模板</span>
    myContainer<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> genericContainer<span class="token punctuation">;</span>
    genericContainer<span class="token punctuation">.</span><span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//调用全特化模板</span>
    myContainer<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> specializeContainer<span class="token punctuation">;</span>
    specializeContainer<span class="token punctuation">.</span><span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//调用偏特化模板</span>
    myContainer<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token operator">&gt;</span> partialSpecializeContainer<span class="token punctuation">;</span>
    partialSpecializeContainer<span class="token punctuation">.</span><span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
  运行结果：
        通用类模板
        全特化为int和值为5
        偏特化为int，值为：7
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","4.C__模板.html.vue"]]),m=JSON.parse(`{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/4.C__%E6%A8%A1%E6%9D%BF.html","title":"第四章：C++模板","lang":"zh-CN","frontmatter":{"date":"2024-02-04T00:00:00.000Z","order":5,"description":"第四章：C++模板 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/4.C__%E6%A8%A1%E6%9D%BF.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第四章：C++模板"}],["meta",{"property":"og:description","content":"第四章：C++模板 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-04T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第四章：C++模板\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":3.19,"words":956},"filePathRelative":"编程学习/2.CPP/4.C++模板.md","localizedDate":"2024年2月4日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：JimBo (1353429820@qq.com)</span>\\n<span class=\\"token comment\\">//  Filename：main</span>\\n<span class=\\"token comment\\">//  Date：2024/1/17</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n\\n<span class=\\"token comment\\">//1.函数模板定义：template&lt;class&gt;、template&lt;typename&gt;</span>\\n<span class=\\"token comment\\">//早期使用：template&lt;class&gt;，因为早期class是唯一的关键字</span>\\n<span class=\\"token comment\\">//现在使用：template&lt;typename&gt;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//add函数时一个模板，使用typename T来表示参数类型的占位符</span>\\n<span class=\\"token comment\\">//当调用add函数时，编译器会根据传入的实际类型自动生成相应的函数</span>\\ntemplate<span class=\\"token operator\\">&lt;</span>typename T<span class=\\"token operator\\">&gt;</span>\\nT <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>T a<span class=\\"token punctuation\\">,</span> T b<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> a<span class=\\"token operator\\">+</span>b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//使用函数模板</span>\\n    <span class=\\"token keyword\\">int</span> result_int <span class=\\"token operator\\">=</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">double</span>  result_double <span class=\\"token operator\\">=</span> <span class=\\"token function\\">add</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3.5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2.7</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> result_int <span class=\\"token operator\\">&lt;&lt;</span>std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> result_double <span class=\\"token operator\\">&lt;&lt;</span>std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n         15\\n         6.2\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//2.函数模板实例化：显式实例化、隐式实例化</span>\\n<span class=\\"token comment\\">//显式实例化：在模板后用&lt;类型&gt;来指定类型</span>\\n<span class=\\"token comment\\">//隐式实例化：根据传入的参数自动实例化</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\ntemplate<span class=\\"token operator\\">&lt;</span>typename T<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span>T param<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"param：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> param <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//隐式实例化为：int、double</span>\\n    <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">20.20</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//显式实例化为：char、string</span>\\n    function<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">char</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">'a'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    function<span class=\\"token operator\\">&lt;</span>std<span class=\\"token operator\\">::</span>string<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"你好\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n            param：10\\n            param：20.20\\n            param：a\\n            param：你好\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//3.类模板的定义、实例化</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\ntemplate<span class=\\"token operator\\">&lt;</span>typename T<span class=\\"token operator\\">&gt;</span>\\nclass mycontainer\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token comment\\">//构造函数</span>\\n    <span class=\\"token function\\">mycontainer</span><span class=\\"token punctuation\\">(</span>T arg<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">element</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">//获取元素</span>\\n    T <span class=\\"token function\\">get_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">return</span> element<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n private<span class=\\"token operator\\">:</span>\\n    <span class=\\"token comment\\">//模板推导成员变量类型</span>\\n    T element<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 全局显式实例化为int类型的版本，也可以在声明类变量的时候实例化</span>\\ntemplate class MyContainer<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//类模板显式实例化</span>\\n    mycontainer<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">intContainer</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Value of intContainer：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> intContainer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//类模板隐式实例化</span>\\n    mycontainer <span class=\\"token function\\">doubleContainer</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42.2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Value of doubleContainer：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> doubleContainer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n        Value of intContainer：42\\n        Value of doubleContainer：42.2\\n*/</span>\\n\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//通过非类型模板参数给array数组一个初始size，方便后续操作</span>\\ntemplate<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span> size<span class=\\"token operator\\">&gt;</span>\\nclass FixedArray\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">set_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> value<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>index<span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> index <span class=\\"token operator\\">&lt;</span> size<span class=\\"token punctuation\\">)</span>\\n       <span class=\\"token punctuation\\">{</span>\\n          array<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token punctuation\\">}</span>\\n       <span class=\\"token keyword\\">else</span>\\n       <span class=\\"token punctuation\\">{</span>\\n          std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"下标越界!\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">get_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> index <span class=\\"token operator\\">&lt;</span> size<span class=\\"token punctuation\\">)</span>\\n       <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">return</span> array<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token punctuation\\">}</span>\\n       <span class=\\"token keyword\\">else</span>\\n       <span class=\\"token punctuation\\">{</span>\\n          std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"下标越界!\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n private<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> array<span class=\\"token punctuation\\">[</span>size<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    FixedArray<span class=\\"token operator\\">&lt;</span><span class=\\"token number\\">5</span><span class=\\"token operator\\">&gt;</span> myArray<span class=\\"token punctuation\\">;</span>\\n    myArray<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Value at index 2：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> myArray<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n        Value at index 2：42\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//5.模板特化</span>\\n<span class=\\"token comment\\">//通过模板特化对一些特殊的类型进行特殊化实现</span>\\n<span class=\\"token comment\\">//比如下面使用char类型时，就调用特化为char类型的模板</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//通用模板</span>\\ntemplate<span class=\\"token operator\\">&lt;</span>typename T<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span>T value<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"通用模板：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//函数模板特化为char类型</span>\\ntemplate<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">void</span> print_value<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">char</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> value<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"特化为char的模板：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span>std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">'A'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n         通用模板：42\\n         特化为char的模板：A\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//6.全特化和偏特化</span>\\n<span class=\\"token comment\\">//全特化：是指为模板提供特定类型或特定值的完整实现，相当于定死模板特化内容</span>\\n<span class=\\"token comment\\">//偏特化：是指在模板中一部分参数被具体指定，而另一部分参数保留为泛型形式，相当于保留一部分给你修改</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//通用函数模板</span>\\ntemplate<span class=\\"token operator\\">&lt;</span>typename T<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> N<span class=\\"token operator\\">&gt;</span>\\nclass myContainer\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"通用类模板\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//类模板全特化为int类型和值为5</span>\\ntemplate<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">&gt;</span>\\nclass myContainer<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"全特化为int和值为5\\"</span> <span class=\\"token operator\\">&lt;&lt;</span>std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//类模板偏特化为int类型</span>\\ntemplate<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span> N<span class=\\"token operator\\">&gt;</span>\\nclass myContainer<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> N<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"偏特化为int，值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> N <span class=\\"token operator\\">&lt;&lt;</span>std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//调用通用模板</span>\\n    myContainer<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">double</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token operator\\">&gt;</span> genericContainer<span class=\\"token punctuation\\">;</span>\\n    genericContainer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//调用全特化模板</span>\\n    myContainer<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token operator\\">&gt;</span> specializeContainer<span class=\\"token punctuation\\">;</span>\\n    specializeContainer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//调用偏特化模板</span>\\n    myContainer<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token operator\\">&gt;</span> partialSpecializeContainer<span class=\\"token punctuation\\">;</span>\\n    partialSpecializeContainer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n  运行结果：\\n        通用类模板\\n        全特化为int和值为5\\n        偏特化为int，值为：7\\n*/</span>\\n</code></pre></div>"}`);export{d as comp,m as data};
