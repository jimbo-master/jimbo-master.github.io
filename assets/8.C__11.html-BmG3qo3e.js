import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/8.C__11-D6kd0zyU.png",e={},o=t('<h1 id="第八章-c-11" tabindex="-1"><a class="header-anchor" href="#第八章-c-11"><span>第八章：C++11</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：jimbo（1353429820@qq.com）</span>
<span class="token comment">//  Filename：main</span>
<span class="token comment">//  Date：2024/1/21</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>


<span class="token comment">//1.列表统一初始化</span>
<span class="token comment">//c++11提供{}初始化的方法用来简单化列表初始化和其他初始化</span>
<span class="token comment">//实际使用中还是更多使用new，而不是直接用{}，因为这样让代码可读性变差了</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> array2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ptr2 <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> i <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//2.auto、decltype、typeid、nullptr关键字</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//auto：自动推导类型</span>
    <span class="token keyword">auto</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> y <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>

    <span class="token comment">//decltype：获取表达式的类型，而不是使用初始值的类型</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//获取a的类型，即b的类型为int，原式等于int b = 20；</span>

    <span class="token comment">//typeid：获取表达式的类型信息，常用typeid(类型).name()来获取类型类别</span>
    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    <span class="token function">typeid</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//float</span>

    <span class="token comment">//nullptr：表示空指针，取代以前的NULL和0表示空指针</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//3.范围for循环</span>
<span class="token comment">//形式：for(declaration : range)，declaration是变量声明随便定名字，range是遍历的范围</span>
<span class="token comment">//注意：范围for的遍历范围必须确定</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//数组</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">//STL容器</span>
    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> vec<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">//字符串</span>
    std<span class="token operator">::</span>string str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> str<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">//指针范围</span>
    <span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> value <span class="token operator">:</span> arr2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       value<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：
        1 2 3 4 5 
       10 20 30 40 50 
       h e l l o 
       2 4 6 8 10 
*/</span>


<span class="token comment">//4.explicit关键字：禁止单参数构造函数的隐式转换</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
class Myclass
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    explicit <span class="token function">Myclass</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">data</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">print_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Data：&quot;</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 private<span class="token operator">:</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//不使用explicit，会进行隐式类型转换</span>
    <span class="token comment">//Myclass obj = 42;//这行会报错，因为构造函数使用了explicit关键字，禁止了隐式类型转换</span>

    <span class="token comment">//使用explicit，需要显式的进行类型转换</span>
    Myclass <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确，显式的调用构造函数</span>
    obj<span class="token punctuation">.</span><span class="token function">print_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：Data：42</span>


<span class="token comment">//5.STL变化：新增array、forward_list、unordered_map、unordered_set</span>
<span class="token comment">//array：静态数组</span>
<span class="token comment">//forward_list：单链表</span>
<span class="token comment">//unordered_map、unordered_set：无序容器，底层是哈希表</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;forward_list&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_set&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//array使用</span>
    std<span class="token operator">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//forward_list使用</span>
    std<span class="token operator">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//unordered_map使用</span>
    std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> myMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//unordered_set使用</span>
    std<span class="token operator">::</span>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> mySet <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//6.STL字符串转换函数</span>

<span class="token comment">//内置类型转string：统一调用std::to_string</span>

<span class="token comment">//string转内置类型：</span>
<span class="token comment">//1.stoi：转整型</span>
<span class="token comment">//2.stol：转长整型</span>
<span class="token comment">//3.stoul:转无符号长整型</span>
<span class="token comment">//4.stoull：转无符号长长整型</span>
<span class="token comment">//5.stof：转单精度浮点型</span>
<span class="token comment">//6.stod：转双精度浮点型</span>
<span class="token comment">//7.stold：转长双精度浮点型</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">//std::to_string使用</span>
    std<span class="token operator">::</span>string str <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//stoi使用，其他类似，用的时候查文档</span>
    std<span class="token operator">::</span>string str2 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//7.容器新方法</span>
<span class="token comment">//提供initializer_list为参数的构造函数，用于支持列表初始化---也就是{}进行初始化</span>
<span class="token comment">//提供cbegin和cend方法，返回const迭代器</span>
<span class="token comment">//提供emplace系列方法，并在容器原有的插入方法基础上重载右值引用版本的插入函数，用于提高容器中插入的效率</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myVector <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//{}就是调用initializer_list为参数的构造函数</span>

    <span class="token comment">//使用cbegin和cend获取const迭代器</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> myVector<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> myVector<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：1 2 3 4 5</span>


<span class="token comment">//7.容器新方法</span>
<span class="token comment">//提供initializer_list为参数的构造函数，用于支持列表初始化---也就是{}进行初始化</span>
<span class="token comment">//提供cbegin和cend方法，返回const迭代器</span>
<span class="token comment">//提供emplace系列方法，并在容器原有的插入方法基础上重载右值引用版本的插入函数，用于提高容器中插入的效率</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//使用emplace在vector中就地构造元素</span>
    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">&gt;&gt;</span> myVector<span class="token punctuation">;</span>
    myVector<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myVector<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//使用emplace在map中就地构造元素</span>
    std<span class="token operator">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">&gt;</span> myMap<span class="token punctuation">;</span>
    myMap<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myMap<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//打印vector中元素</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> element <span class="token operator">:</span> myVector<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Vector Pair：&quot;</span> <span class="token operator">&lt;&lt;</span> element<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;，&quot;</span> <span class="token operator">&lt;&lt;</span> element<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//打印map中元素</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> pair <span class="token operator">:</span> myMap<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Map Pair：&quot;</span> <span class="token operator">&lt;&lt;</span> pair<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;，&quot;</span> <span class="token operator">&lt;&lt;</span> pair<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：  
        Vector Pair：1，one
       Vector Pair：2，two
       Map Pair：1，one
       Map Pair：2，two
*/</span>

<span class="token comment">//8.默认成员函数控制</span>
<span class="token comment">//在默认函数定义或者声明时加上=default，从而显式的指示编译器生成该函数的默认版本，用=default修饰的函数称为显式缺省函数</span>
<span class="token comment">//在默认函数定义或声明时加上=delete，从而显式的指示编译器不生产该函数的默认版本，用=delete修饰的函数称为删除函数</span>
<span class="token comment">//要避免=delete或=default与explicit一起使用</span>


<span class="token comment">//8.左值和右值</span>
<span class="token comment">//左值：可以标识并且在内存中有存储位置的表达式，通常是变量或对象的名称</span>
<span class="token comment">//右值：不具有内存位置的表达式，通常是临时量、字面常量或表达式计算结果</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//sum是左值，10+20是右值</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">;</span>   <span class="token comment">//ptr是左值</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//9.左值引用和右值引用</span>
<span class="token comment">//左值引用：就是使用&amp;来引用左值，也就是引用有具体内存位置的对象，如变量、常量、表达式等</span>
<span class="token comment">//右值引用：就是使用&amp;来引用右值，如临时对象、字面常量、表达式的计算结果等</span>
<span class="token comment">//右值引用可以使用std::move将左值转为右值引用</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">left_modifyValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> reference<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    reference <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//修改引用的对象值</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">right_modifyValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> reference<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    reference <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">&amp;</span> valueRef <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//左值引用，给左值取别名</span>
    <span class="token function">left_modifyValue</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传递引用给函数修改</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;modified value：&quot;</span> <span class="token operator">&lt;&lt;</span> valueRef <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token comment">//输出modified value：100</span>

    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> valueRef2 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token comment">//右值引用，给右值取别名</span>
    <span class="token function">right_modifyValue</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>valueRef2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用std::move将左值转换为右值引用</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;modified value：&quot;</span> <span class="token operator">&lt;&lt;</span> valueRef2 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token comment">//输出modified value：200</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//10.右值引用和移动语义</span>
<span class="token comment">//右值引用：引入目的，主要为了支持移动语义，在某些情况下将资源从一个对象移动到另一个对象，避免昂贵的拷贝操作</span>
<span class="token comment">//移动语义：允许将资源的所有权从一个对象移动到另一个对象，而不是进行深层次的拷贝</span>
<span class="token comment">//移动语义用途：通常与右值引用一起使用，用于某些情况下高效的移动资源，例如：容器插入、返回临时对象的函数、动态内存管理</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> source <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//使用移动语义将资源从source移动到destination</span>
    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> destination <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//11.完美转发</span>
<span class="token comment">//模板中的&amp;&amp;不代表右值引用，而是万能引用，其既能接收左值又能接收右值</span>

<span class="token comment">//作用：右值经过一次参数传递后，其属性可能会退化为左值，因为右值被引用后会导致右值被存储到特定位置</span>
<span class="token comment">//这时这个右值可以被取地址，并且可以被修改，因此在下一次传参时该右值会被识别成左值</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//模板函数，使用完美转发</span>
template<span class="token operator">&lt;</span>typename T<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">firestfunction</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//使用std::forward&lt;T&gt;将参数以原始的左值或右值引用进行转发</span>
    <span class="token function">secondfunction</span><span class="token punctuation">(</span>std<span class="token operator">::</span>forward<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会提示没声明，放后面或者上面声明下函数就行</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">secondfunction</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Reference：&quot;</span> <span class="token operator">&lt;&lt;</span> arg <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">secondfunction</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Revalue Reference：&quot;</span> <span class="token operator">&lt;&lt;</span> arg <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token comment">//调用firstfunction是，参数arg将被完美转发到secondfunction</span>
    <span class="token function">firestfunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转发为左值引用      结果：Reference：42</span>
    <span class="token function">firestfunction</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转发为右值引用   结果：Revalue Reference：123</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//12.lambda表达式</span>
<span class="token comment">//形式：[capture](parameters) -&gt; return_type{}</span>
<span class="token comment">//capture：允许你从周围作用域中捕捉变量</span>
<span class="token comment">//parameters：参数列表</span>
<span class="token comment">//return_type：lambda函数的返回值</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//定义lambda函数，接受两个参数并返回它们的值</span>
    <span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//使用lambda函数</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;结果为：&quot;</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> <span class="token comment">//结果为：7</span>

    <span class="token comment">//使用lambda表达式捕获外部变量</span>
    <span class="token keyword">int</span> factor <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> multiply <span class="token operator">=</span> <span class="token punctuation">[</span>factor<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">return</span> x <span class="token operator">*</span> factor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>  <span class="token comment">//输出：10</span>
<span class="token punctuation">}</span>


<span class="token comment">//13.包装器：std::function、std::bind</span>
<span class="token comment">//std::function：函数包装器，也叫适配器，明确可调用对象的返回值和形参类型，更加方便使用</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;functional&gt;</span>  <span class="token comment">//std::function、std::bind</span></span>

<span class="token comment">//普通函数</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//函数对象</span>
<span class="token keyword">struct</span> <span class="token class-name">multiply</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//使用std::function包装普通函数</span>
    std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> addFunction <span class="token operator">=</span> add<span class="token punctuation">;</span>

    <span class="token comment">//使用std::function包装函数对象</span>
    std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> multiplyFunction <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//使用lambda表达式</span>
    std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> lambdaFunction <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//调用并输出结果</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Add：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>           <span class="token comment">//Add：7</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Multiply：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">multiplyFunction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> <span class="token comment">//Multiply：12</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Lambda：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lambdaFunction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>     <span class="token comment">//Lambda：12</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//std::bind：将一个函数的某些参数绑定为固定的值，让我们在调用时可以不用传递某些参数</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;functional&gt;</span></span>

<span class="token comment">//目标函数</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//使用std::bind绑定函数和部分参数</span>
    <span class="token keyword">auto</span> partiallyBound <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> std<span class="token operator">::</span>placeholders<span class="token operator">::</span>_1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> std<span class="token operator">::</span>placeholders<span class="token operator">::</span>_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//说明：std::bind绑定add函数，将第一个参数和第三个参数分别绑定为std::placeholders::_1和std::placeholders::_2</span>
    <span class="token comment">//其中std::placeholders::_1和_2都是占位符，用于指定调用函数时，应该使用传入的参数的哪些位置</span>
    <span class="token comment">//这样调用partiallyBound(3,4)就相当于调用add(3,2,4)，输出结果为9</span>

    <span class="token comment">//调用并输出结果</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Partially Bound：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">partiallyBound</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>  <span class="token comment">//输出结果：Partially Bound：9</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//14.线程库</span>

<span class="token comment">//线程对象的构造方式：</span>
<span class="token comment">//1.调用无参的构造函数，比如：thread t</span>
<span class="token comment">//2.调用带参的构造函数，比如：thread t(func, arg)</span>
<span class="token comment">//3.调用移动构造函数， 比如：thread t = thread(func, arg)</span>

<span class="token comment">//调用无参构造函数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">threadFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is running&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//调用无参构造函数</span>
    std<span class="token operator">::</span>thread thread1<span class="token punctuation">;</span>

    <span class="token comment">//如果使用无参构造函数创建的线程，后续通过std::thread::operator=或std::thread::swap赋予一个线程函数</span>
    thread1 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">thread</span><span class="token punctuation">(</span>threadFunction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程时需要指定新线程要执行的函数，也可以是函数指针、可调用对象</span>

    <span class="token comment">//等待线程结束</span>
    thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread has finished&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Thread is running</span>
<span class="token comment">//Thread has finished</span>

<span class="token comment">//调用带参的构造函数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">threadFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is running with parameter：&quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token comment">//调用带参的构造函数</span>
    std<span class="token operator">::</span>thread <span class="token function">thread1</span><span class="token punctuation">(</span>threadFunction<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value作为参数传递给threadFunction，用于新线程的创建</span>

    <span class="token comment">//等待线程结束</span>
    thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread has finished&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Thread is running with parameter：42</span>
<span class="token comment">//Thread has finished</span>

<span class="token comment">//调用移动构造函数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">threadFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is running with parameter：&quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token comment">//创建并启动一个新线程</span>
    std<span class="token operator">::</span>thread <span class="token function">thread1</span><span class="token punctuation">(</span>threadFunction<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value作为参数传递给threadFunction，用于新线程的创建</span>

    <span class="token comment">//移动构造函数</span>
    std<span class="token operator">::</span>thread thread2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>thread1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//主线程继续执行其他任务</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Main thread is running&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">//等待新线程结束</span>
    thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread has finished&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Main thread is running</span>
<span class="token comment">//Thread is running with parameter：42</span>
<span class="token comment">//Thread has finished</span>
<span class="token comment">//说明：线程的执行是并发的，具体执行顺序可能受到多个因素的影响，包括系统调度策略和处理器的状态</span>
<span class="token comment">//因此，输出语句的顺序可能会有所不同，thread2 可能会在 thread1（新线程）之前输出信息，但这并</span>
<span class="token comment">//不表示 thread2 先于 thread1 运行，而是由于主线程和新线程的并发执行</span>


<span class="token comment">//thread提供的成员函数</span>
<span class="token comment">//join()：对该线程进行等待，在等待的线程返回前，调用join()的线程将会被阻塞</span>
<span class="token comment">//joinable()：判断该线程是否已经执行完毕，如果是就返回true，否则返回false</span>
<span class="token comment">//detach()：将该线程与创建线程进行分离，被分离后的线程不需要创建线程调用join()对其进行等待</span>
<span class="token comment">//get_id()：获得该线程的id</span>
<span class="token comment">//swap()：将两个线程对象关联线程的状态进行交换</span>

<span class="token comment">//join()、joinable()的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is running&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>thread <span class="token function">myThread</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//joinable检查线程执行完毕function没有</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>myThread<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is joinable&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
       <span class="token comment">//主线程执行一些任务</span>
       <span class="token comment">//join()的使用：等待新进程结束</span>
       myThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is not joinable&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Main thread has finished&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Thread is joinable</span>
<span class="token comment">//Thread is running</span>
<span class="token comment">//Main thread has finished</span>


<span class="token comment">//detach()的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is running&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>thread <span class="token function">myThread</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分离新线程，使其在后台运行</span>
    myThread<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Main thread has finished&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Main thread has finished</span>


<span class="token comment">//get_id()的使用</span>
<span class="token comment">//获取线程id的方式：1.调用get_id()访问、2.调用this_thread::get_id()获取</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread ID：&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>thread <span class="token function">myThread</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//主线程执行一些任务</span>
    <span class="token comment">//等待新进程结束</span>
    myThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Main thread has finished&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Thread ID：140148637431360</span>
<span class="token comment">//Main thread has finished</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is running&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>thread <span class="token function">myThread1</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>thread myThread2<span class="token punctuation">;</span>

    <span class="token comment">//交换两个线程对象</span>
    myThread1<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>myThread2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>myThread1<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       myThread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>myThread2<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       myThread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Main thread has finished&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Thread is running</span>
<span class="token comment">//Main thread has finished</span>


<span class="token comment">//线程函数参数问题</span>
<span class="token comment">//问题：线程函数的参数是以值拷贝的方式拷贝到线程空间中的，计算线程函数的参数为引用类型，在线程函数中修改后也不会</span>
<span class="token comment">//影响到外部实参，因为其实际引用的就是线程栈中的拷贝，而不是外部实参</span>

<span class="token comment">//解决办法：</span>
<span class="token comment">//1.借助std::ref()保持对实参的引用</span>
<span class="token comment">//2.将实参的地址传入线程函数，在线程函数中通过该地址修改变量</span>
<span class="token comment">//3.将lambda表达式作为线程函数，利用lambda函数的捕捉列表以引用的方式对外部实参进行捕捉</span>


<span class="token comment">//借助std::ref()保持对实参的引用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//在线程函数中修改实参的值</span>
    x <span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token comment">//使用std::ref()传递引用</span>
    std<span class="token operator">::</span>thread <span class="token function">myThread</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">ref</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//主线程等待新线程结束</span>
    myThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//输出修改后的值</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Modified value in main：&quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：Modified value in main：52</span>



<span class="token comment">//将实参的地址传入线程函数，在线程函数中通过该地址修改变量</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//在线程函数中修改实参的值</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token comment">//传递变量的地址给新线程</span>
    std<span class="token operator">::</span>thread <span class="token function">myThread</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//主线程等待新线程结束</span>
    myThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//输出修改后的值</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Modified value in main：&quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：Modified value in main：52</span>


<span class="token comment">//将lambda表达式作为线程函数，利用lambda函数的捕捉列表以引用的方式对外部实参进行捕捉</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token comment">//传递变量的地址给新线程</span>
    std<span class="token operator">::</span>thread <span class="token function">myThread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>value<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token comment">//在线程函数中通过引用修改外部变量的值</span>
       value <span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value inside thread：&quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//主线程等待新线程结束</span>
    myThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//输出修改后的值</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Modified value in main：&quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Value inside thread：52</span>
<span class="token comment">//Modified value in main：52</span>


<span class="token comment">//15.互斥量库</span>
<span class="token comment">//mutex的种类：</span>
<span class="token comment">//1.mutex：最基本的互斥量，不可拷贝，不可移动</span>
<span class="token comment">//2.recursive_mutex：递归互斥锁，专门用于递归函数中的加锁操作</span>
<span class="token comment">//3.timed_mutex：时间锁，能够在指定时间内进行加锁操作</span>
<span class="token comment">//4.recursive_timed_mutex：既支持递归函数中进行加锁，也支持在指定实际内加锁</span>

<span class="token comment">//lock_guard和unique_lock</span>
<span class="token comment">//lock_guard是一个轻量级的互斥锁封装类，使用RAII原则，即在构造函数中获取互斥锁，在析构函数中释放互斥锁</span>

<span class="token comment">//unique_lock是一个更加灵活的互斥锁封装类，与lock_guard不同，它需要手动锁定和释放互斥锁，提供额外成员函数</span>
<span class="token comment">//1.void lock()：手动锁定互斥量</span>
<span class="token comment">//2.void unlock()：手动解锁互斥量</span>
<span class="token comment">//3.bool try_lock()：尝试锁定互斥量，互斥量当前不可用，立刻返回false</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mutex&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>mutex myMutex<span class="token punctuation">;</span>

    <span class="token comment">//std::lock_guard的使用</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//互斥锁在这个作用域内被持有</span>
       <span class="token comment">//这里进行一些线程安全的操作</span>
    <span class="token punctuation">}</span>   <span class="token comment">//lock_guard在这里离开作用域，互斥锁被自动释放</span>

    <span class="token comment">//std::unique_lock的使用</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock2</span><span class="token punctuation">(</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//互斥锁在这个作用域内被持有</span>
       <span class="token comment">//这里进行一些线程安全的操作</span>

       <span class="token comment">//手动释放互斥锁：unlock()</span>
       lock2<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//这里可以执行一些不需要互斥锁的操作</span>

       <span class="token comment">//重新锁定互斥锁：lock()</span>
       lock2<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//这里再次持有互斥锁，进行一些线程安全的操作</span>
    <span class="token punctuation">}</span>   <span class="token comment">//unique_lock在这里离开作用域，互斥锁被自动释放</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token comment">//16.原子性操作库</span>
<span class="token comment">//解决线程安全问题：多线程最主要的问题就是共享数据带来的线程安全问题，共享数据支持多个线程同时对其进行读操作，但不支持多个线程同时对其进程写操作</span>
<span class="token comment">//因此C++11中引入了原子操作。所谓原子操作：即不可被中断的一个或一系列操作，C++11引入的原子操作类型，使得线程间数据的同步变得非常高效</span>

<span class="token comment">//原子类：不需要对原子类型进行加锁解锁操作，线程能够对原子类型变量互斥访问</span>
<span class="token comment">//原子类型变量定义方式：</span>
<span class="token comment">//1.通过原子类型名称定义，例如：atomic_bool n = {true}、atomic_int n = {0}、atomic_char n = {&#39;a&#39;}</span>

<span class="token comment">//2.通过atomic类模板定义，例如：atomic&lt;bool&gt; n = true、atomic&lt;int&gt; n = 0、atomic&lt;char&gt; n = &#39;a&#39;</span>
<span class="token comment">//atomic类模板是C++标准库提供的，已经实现了原子操作的一系列方法，具体用的时候查</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;atomic&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//通过原子类型名称定义</span>
    std<span class="token operator">::</span>atomic_int <span class="token function">atomicInteger</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>atomic_bool <span class="token function">atomicFlag</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//通过atomic类模板定义</span>
    std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">atomicInteger2</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span>bool<span class="token operator">&gt;</span> <span class="token function">atomicFlag2</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//进行原子操作</span>
    atomicInteger<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 原子加法 fetch_add</span>
    atomicFlag<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 原子存储 store将值设置给原子变量</span>
    atomicInteger2<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 原子加法</span>
    atomicFlag2<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 原子存储</span>

    <span class="token comment">// 输出修改后的值</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Modified atomicInteger: &quot;</span> <span class="token operator">&lt;&lt;</span> atomicInteger<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token comment">//load()加载当前值</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Modified atomicInteger2: &quot;</span> <span class="token operator">&lt;&lt;</span> atomicInteger2<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Modified atomicFlag: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>boolalpha <span class="token operator">&lt;&lt;</span> atomicFlag<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Modified atomicFlag2: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>boolalpha <span class="token operator">&lt;&lt;</span> atomicFlag2<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Modified atomicInteger: 47</span>
<span class="token comment">//Modified atomicInteger2: 47</span>
<span class="token comment">//Modified atomicFlag: false</span>
<span class="token comment">//Modified atomicFlag2: false</span>


<span class="token comment">//17.条件变量库</span>
<span class="token comment">//C++11引入条件变量来协调多个线程的执行，条件变量允许一个线程等待另一个线程满足某个条件后再继续执行</span>

<span class="token comment">//wait系列成员函数：用于让调用线程进行等待，包括：wait、wait_for、wait_until</span>
<span class="token comment">//notify系列成员函数：用于唤醒等待的线程，包括：notify_one、notify_all</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mutex&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;condition_variable&gt;</span> <span class="token comment">//条件变量库头文件</span></span>

std<span class="token operator">::</span>mutex mutex<span class="token punctuation">;</span>
std<span class="token operator">::</span>condition_variable cv<span class="token punctuation">;</span>
bool dataReady <span class="token operator">=</span> false<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token comment">//模拟一些工作</span>
        std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//数据准备完毕</span>
        <span class="token punctuation">{</span>
                std<span class="token operator">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                dataReady <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//通知等待的线程</span>
        cv<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//notify_one()用于唤醒等待队列中首个线程，notify_all()用于唤醒等待队列中所有线程</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token comment">//等待数据准备完毕的通知</span>
        <span class="token punctuation">{</span>
                std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cv<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">return</span> dataReady<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//进行操作，此时数据已经准备好了</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Consumer：Data is ready&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token comment">//启动生产者和消费者线程</span>
        std<span class="token operator">::</span>thread <span class="token function">producerThread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token operator">::</span>thread <span class="token function">consumerThread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//等待线程结束</span>
        producerThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumerThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：Consumer：Data is ready</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","8.C__11.html.vue"]]),m=JSON.parse(`{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/8.C__11.html","title":"第八章：C++11","lang":"zh-CN","frontmatter":{"date":"2024-02-08T00:00:00.000Z","order":9,"description":"第八章：C++11 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/8.C__11.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第八章：C++11"}],["meta",{"property":"og:description","content":"第八章：C++11 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第八章：C++11\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":17.23,"words":5170},"filePathRelative":"编程学习/2.CPP/8.C++11.md","localizedDate":"2024年2月8日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：jimbo（1353429820@qq.com）</span>\\n<span class=\\"token comment\\">//  Filename：main</span>\\n<span class=\\"token comment\\">//  Date：2024/1/21</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n\\n<span class=\\"token comment\\">//1.列表统一初始化</span>\\n<span class=\\"token comment\\">//c++11提供{}初始化的方法用来简单化列表初始化和其他初始化</span>\\n<span class=\\"token comment\\">//实际使用中还是更多使用new，而不是直接用{}，因为这样让代码可读性变差了</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;vector&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;list&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> array<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> array2<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr <span class=\\"token operator\\">=</span> new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr2 <span class=\\"token operator\\">=</span> new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    std<span class=\\"token operator\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> v <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>list<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> i <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//2.auto、decltype、typeid、nullptr关键字</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//auto：自动推导类型</span>\\n    <span class=\\"token keyword\\">auto</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">auto</span> y <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.14</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//decltype：获取表达式的类型，而不是使用初始值的类型</span>\\n    <span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">decltype</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//获取a的类型，即b的类型为int，原式等于int b = 20；</span>\\n\\n    <span class=\\"token comment\\">//typeid：获取表达式的类型信息，常用typeid(类型).name()来获取类型类别</span>\\n    <span class=\\"token keyword\\">float</span> f <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.14</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">typeid</span><span class=\\"token punctuation\\">(</span>f<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//float</span>\\n\\n    <span class=\\"token comment\\">//nullptr：表示空指针，取代以前的NULL和0表示空指针</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr <span class=\\"token operator\\">=</span> nullptr<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//3.范围for循环</span>\\n<span class=\\"token comment\\">//形式：for(declaration : range)，declaration是变量声明随便定名字，range是遍历的范围</span>\\n<span class=\\"token comment\\">//注意：范围for的遍历范围必须确定</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;vector&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//数组</span>\\n    <span class=\\"token keyword\\">int</span> arr<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> value <span class=\\"token operator\\">:</span> arr<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//STL容器</span>\\n    std<span class=\\"token operator\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> vec <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">40</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> value <span class=\\"token operator\\">:</span> vec<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout<span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//字符串</span>\\n    std<span class=\\"token operator\\">::</span>string str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"hello\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> ch <span class=\\"token operator\\">:</span> str<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> ch <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//指针范围</span>\\n    <span class=\\"token keyword\\">int</span> arr2<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> value <span class=\\"token operator\\">:</span> arr2<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       value<span class=\\"token operator\\">*=</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n        1 2 3 4 5 \\n       10 20 30 40 50 \\n       h e l l o \\n       2 4 6 8 10 \\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//4.explicit关键字：禁止单参数构造函数的隐式转换</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nclass Myclass\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    explicit <span class=\\"token function\\">Myclass</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">data</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print_data</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Data：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> data <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n private<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> data<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//不使用explicit，会进行隐式类型转换</span>\\n    <span class=\\"token comment\\">//Myclass obj = 42;//这行会报错，因为构造函数使用了explicit关键字，禁止了隐式类型转换</span>\\n\\n    <span class=\\"token comment\\">//使用explicit，需要显式的进行类型转换</span>\\n    Myclass <span class=\\"token function\\">obj</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//正确，显式的调用构造函数</span>\\n    obj<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print_data</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：Data：42</span>\\n\\n\\n<span class=\\"token comment\\">//5.STL变化：新增array、forward_list、unordered_map、unordered_set</span>\\n<span class=\\"token comment\\">//array：静态数组</span>\\n<span class=\\"token comment\\">//forward_list：单链表</span>\\n<span class=\\"token comment\\">//unordered_map、unordered_set：无序容器，底层是哈希表</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;array&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;forward_list&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;unordered_map&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;unordered_set&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//array使用</span>\\n    std<span class=\\"token operator\\">::</span>array<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token operator\\">&gt;</span> arr <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//forward_list使用</span>\\n    std<span class=\\"token operator\\">::</span>forward_list<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> myList <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//unordered_map使用</span>\\n    std<span class=\\"token operator\\">::</span>unordered_map<span class=\\"token operator\\">&lt;</span>std<span class=\\"token operator\\">::</span>string<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> myMap <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//unordered_set使用</span>\\n    std<span class=\\"token operator\\">::</span>unordered_set<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> mySet <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//6.STL字符串转换函数</span>\\n\\n<span class=\\"token comment\\">//内置类型转string：统一调用std::to_string</span>\\n\\n<span class=\\"token comment\\">//string转内置类型：</span>\\n<span class=\\"token comment\\">//1.stoi：转整型</span>\\n<span class=\\"token comment\\">//2.stol：转长整型</span>\\n<span class=\\"token comment\\">//3.stoul:转无符号长整型</span>\\n<span class=\\"token comment\\">//4.stoull：转无符号长长整型</span>\\n<span class=\\"token comment\\">//5.stof：转单精度浮点型</span>\\n<span class=\\"token comment\\">//6.stod：转双精度浮点型</span>\\n<span class=\\"token comment\\">//7.stold：转长双精度浮点型</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> num <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//std::to_string使用</span>\\n    std<span class=\\"token operator\\">::</span>string str <span class=\\"token operator\\">=</span> std<span class=\\"token operator\\">::</span><span class=\\"token function\\">to_string</span><span class=\\"token punctuation\\">(</span>num<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//stoi使用，其他类似，用的时候查文档</span>\\n    std<span class=\\"token operator\\">::</span>string str2 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> num2 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">stoi</span><span class=\\"token punctuation\\">(</span>str2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//7.容器新方法</span>\\n<span class=\\"token comment\\">//提供initializer_list为参数的构造函数，用于支持列表初始化---也就是{}进行初始化</span>\\n<span class=\\"token comment\\">//提供cbegin和cend方法，返回const迭代器</span>\\n<span class=\\"token comment\\">//提供emplace系列方法，并在容器原有的插入方法基础上重载右值引用版本的插入函数，用于提高容器中插入的效率</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;vector&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> myVector <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//{}就是调用initializer_list为参数的构造函数</span>\\n\\n    <span class=\\"token comment\\">//使用cbegin和cend获取const迭代器</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span> it <span class=\\"token operator\\">=</span> myVector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">cbegin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> it <span class=\\"token operator\\">!=</span> myVector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">cend</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>it<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>it <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：1 2 3 4 5</span>\\n\\n\\n<span class=\\"token comment\\">//7.容器新方法</span>\\n<span class=\\"token comment\\">//提供initializer_list为参数的构造函数，用于支持列表初始化---也就是{}进行初始化</span>\\n<span class=\\"token comment\\">//提供cbegin和cend方法，返回const迭代器</span>\\n<span class=\\"token comment\\">//提供emplace系列方法，并在容器原有的插入方法基础上重载右值引用版本的插入函数，用于提高容器中插入的效率</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;vector&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;map&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//使用emplace在vector中就地构造元素</span>\\n    std<span class=\\"token operator\\">::</span>vector<span class=\\"token operator\\">&lt;</span>std<span class=\\"token operator\\">::</span>pair<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> std<span class=\\"token operator\\">::</span>string<span class=\\"token operator\\">&gt;&gt;</span> myVector<span class=\\"token punctuation\\">;</span>\\n    myVector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">emplace_back</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    myVector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">emplace_back</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//使用emplace在map中就地构造元素</span>\\n    std<span class=\\"token operator\\">::</span>map<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> std<span class=\\"token operator\\">::</span>string<span class=\\"token operator\\">&gt;</span> myMap<span class=\\"token punctuation\\">;</span>\\n    myMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">emplace</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    myMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">emplace</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//打印vector中元素</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">auto</span><span class=\\"token operator\\">&amp;</span> element <span class=\\"token operator\\">:</span> myVector<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Vector Pair：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> element<span class=\\"token punctuation\\">.</span>first <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"，\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> element<span class=\\"token punctuation\\">.</span>second <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">//打印map中元素</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">auto</span><span class=\\"token operator\\">&amp;</span> pair <span class=\\"token operator\\">:</span> myMap<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Map Pair：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> pair<span class=\\"token punctuation\\">.</span>first <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"，\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> pair<span class=\\"token punctuation\\">.</span>second <span class=\\"token operator\\">&lt;&lt;</span>std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：  \\n        Vector Pair：1，one\\n       Vector Pair：2，two\\n       Map Pair：1，one\\n       Map Pair：2，two\\n*/</span>\\n\\n<span class=\\"token comment\\">//8.默认成员函数控制</span>\\n<span class=\\"token comment\\">//在默认函数定义或者声明时加上=default，从而显式的指示编译器生成该函数的默认版本，用=default修饰的函数称为显式缺省函数</span>\\n<span class=\\"token comment\\">//在默认函数定义或声明时加上=delete，从而显式的指示编译器不生产该函数的默认版本，用=delete修饰的函数称为删除函数</span>\\n<span class=\\"token comment\\">//要避免=delete或=default与explicit一起使用</span>\\n\\n\\n<span class=\\"token comment\\">//8.左值和右值</span>\\n<span class=\\"token comment\\">//左值：可以标识并且在内存中有存储位置的表达式，通常是变量或对象的名称</span>\\n<span class=\\"token comment\\">//右值：不具有内存位置的表达式，通常是临时量、字面常量或表达式计算结果</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> sum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//sum是左值，10+20是右值</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>sum<span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//ptr是左值</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//9.左值引用和右值引用</span>\\n<span class=\\"token comment\\">//左值引用：就是使用&amp;来引用左值，也就是引用有具体内存位置的对象，如变量、常量、表达式等</span>\\n<span class=\\"token comment\\">//右值引用：就是使用&amp;来引用右值，如临时对象、字面常量、表达式的计算结果等</span>\\n<span class=\\"token comment\\">//右值引用可以使用std::move将左值转为右值引用</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">left_modifyValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> reference<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    reference <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//修改引用的对象值</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">right_modifyValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;&amp;</span> reference<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    reference <span class=\\"token operator\\">=</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> valueRef <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//左值引用，给左值取别名</span>\\n    <span class=\\"token function\\">left_modifyValue</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//传递引用给函数修改</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"modified value：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> valueRef <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//输出modified value：100</span>\\n\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;&amp;</span> valueRef2 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//右值引用，给右值取别名</span>\\n    <span class=\\"token function\\">right_modifyValue</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token operator\\">::</span><span class=\\"token function\\">move</span><span class=\\"token punctuation\\">(</span>valueRef2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//使用std::move将左值转换为右值引用</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"modified value：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> valueRef2 <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//输出modified value：200</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//10.右值引用和移动语义</span>\\n<span class=\\"token comment\\">//右值引用：引入目的，主要为了支持移动语义，在某些情况下将资源从一个对象移动到另一个对象，避免昂贵的拷贝操作</span>\\n<span class=\\"token comment\\">//移动语义：允许将资源的所有权从一个对象移动到另一个对象，而不是进行深层次的拷贝</span>\\n<span class=\\"token comment\\">//移动语义用途：通常与右值引用一起使用，用于某些情况下高效的移动资源，例如：容器插入、返回临时对象的函数、动态内存管理</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;vector&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;utility&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> source <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//使用移动语义将资源从source移动到destination</span>\\n    std<span class=\\"token operator\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> destination <span class=\\"token operator\\">=</span> std<span class=\\"token operator\\">::</span><span class=\\"token function\\">move</span><span class=\\"token punctuation\\">(</span>source<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//11.完美转发</span>\\n<span class=\\"token comment\\">//模板中的&amp;&amp;不代表右值引用，而是万能引用，其既能接收左值又能接收右值</span>\\n\\n<span class=\\"token comment\\">//作用：右值经过一次参数传递后，其属性可能会退化为左值，因为右值被引用后会导致右值被存储到特定位置</span>\\n<span class=\\"token comment\\">//这时这个右值可以被取地址，并且可以被修改，因此在下一次传参时该右值会被识别成左值</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//模板函数，使用完美转发</span>\\ntemplate<span class=\\"token operator\\">&lt;</span>typename T<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">firestfunction</span><span class=\\"token punctuation\\">(</span>T<span class=\\"token operator\\">&amp;&amp;</span> arg<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//使用std::forward&lt;T&gt;将参数以原始的左值或右值引用进行转发</span>\\n    <span class=\\"token function\\">secondfunction</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token operator\\">::</span>forward<span class=\\"token operator\\">&lt;</span>T<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//会提示没声明，放后面或者上面声明下函数就行</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">secondfunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> arg<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Reference：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> arg <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">secondfunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;&amp;</span> arg<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Revalue Reference：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> arg <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//调用firstfunction是，参数arg将被完美转发到secondfunction</span>\\n    <span class=\\"token function\\">firestfunction</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//转发为左值引用      结果：Reference：42</span>\\n    <span class=\\"token function\\">firestfunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//转发为右值引用   结果：Revalue Reference：123</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//12.lambda表达式</span>\\n<span class=\\"token comment\\">//形式：[capture](parameters) -&gt; return_type{}</span>\\n<span class=\\"token comment\\">//capture：允许你从周围作用域中捕捉变量</span>\\n<span class=\\"token comment\\">//parameters：参数列表</span>\\n<span class=\\"token comment\\">//return_type：lambda函数的返回值</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//定义lambda函数，接受两个参数并返回它们的值</span>\\n    <span class=\\"token keyword\\">auto</span> add <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token keyword\\">int</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//使用lambda函数</span>\\n    <span class=\\"token keyword\\">int</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"结果为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> result <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//结果为：7</span>\\n\\n    <span class=\\"token comment\\">//使用lambda表达式捕获外部变量</span>\\n    <span class=\\"token keyword\\">int</span> factor <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">auto</span> multiply <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>factor<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token keyword\\">int</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">*</span> factor<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">multiply</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">//输出：10</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//13.包装器：std::function、std::bind</span>\\n<span class=\\"token comment\\">//std::function：函数包装器，也叫适配器，明确可调用对象的返回值和形参类型，更加方便使用</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;functional&gt;</span>  <span class=\\"token comment\\">//std::function、std::bind</span></span>\\n\\n<span class=\\"token comment\\">//普通函数</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> a<span class=\\"token operator\\">+</span>b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//函数对象</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">multiply</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">operator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">return</span> a<span class=\\"token operator\\">*</span>b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//使用std::function包装普通函数</span>\\n    std<span class=\\"token operator\\">::</span>function<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&gt;</span> addFunction <span class=\\"token operator\\">=</span> add<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//使用std::function包装函数对象</span>\\n    std<span class=\\"token operator\\">::</span>function<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&gt;</span> multiplyFunction <span class=\\"token operator\\">=</span> <span class=\\"token function\\">multiply</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//使用lambda表达式</span>\\n    std<span class=\\"token operator\\">::</span>function<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&gt;</span> lambdaFunction <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">return</span> a<span class=\\"token operator\\">*</span>b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//调用并输出结果</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Add：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">addFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>           <span class=\\"token comment\\">//Add：7</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Multiply：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">multiplyFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//Multiply：12</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Lambda：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">lambdaFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>     <span class=\\"token comment\\">//Lambda：12</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//std::bind：将一个函数的某些参数绑定为固定的值，让我们在调用时可以不用传递某些参数</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;functional&gt;</span></span>\\n\\n<span class=\\"token comment\\">//目标函数</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> a<span class=\\"token operator\\">+</span>b<span class=\\"token operator\\">+</span>c<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//使用std::bind绑定函数和部分参数</span>\\n    <span class=\\"token keyword\\">auto</span> partiallyBound <span class=\\"token operator\\">=</span> std<span class=\\"token operator\\">::</span><span class=\\"token function\\">bind</span><span class=\\"token punctuation\\">(</span>add<span class=\\"token punctuation\\">,</span> std<span class=\\"token operator\\">::</span>placeholders<span class=\\"token operator\\">::</span>_1<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> std<span class=\\"token operator\\">::</span>placeholders<span class=\\"token operator\\">::</span>_2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//说明：std::bind绑定add函数，将第一个参数和第三个参数分别绑定为std::placeholders::_1和std::placeholders::_2</span>\\n    <span class=\\"token comment\\">//其中std::placeholders::_1和_2都是占位符，用于指定调用函数时，应该使用传入的参数的哪些位置</span>\\n    <span class=\\"token comment\\">//这样调用partiallyBound(3,4)就相当于调用add(3,2,4)，输出结果为9</span>\\n\\n    <span class=\\"token comment\\">//调用并输出结果</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Partially Bound：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">partiallyBound</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span>std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">//输出结果：Partially Bound：9</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//14.线程库</span>\\n\\n<span class=\\"token comment\\">//线程对象的构造方式：</span>\\n<span class=\\"token comment\\">//1.调用无参的构造函数，比如：thread t</span>\\n<span class=\\"token comment\\">//2.调用带参的构造函数，比如：thread t(func, arg)</span>\\n<span class=\\"token comment\\">//3.调用移动构造函数， 比如：thread t = thread(func, arg)</span>\\n\\n<span class=\\"token comment\\">//调用无参构造函数</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">threadFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread is running\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//调用无参构造函数</span>\\n    std<span class=\\"token operator\\">::</span>thread thread1<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//如果使用无参构造函数创建的线程，后续通过std::thread::operator=或std::thread::swap赋予一个线程函数</span>\\n    thread1 <span class=\\"token operator\\">=</span> std<span class=\\"token operator\\">::</span><span class=\\"token function\\">thread</span><span class=\\"token punctuation\\">(</span>threadFunction<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//创建线程时需要指定新线程要执行的函数，也可以是函数指针、可调用对象</span>\\n\\n    <span class=\\"token comment\\">//等待线程结束</span>\\n    thread1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread has finished\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Thread is running</span>\\n<span class=\\"token comment\\">//Thread has finished</span>\\n\\n<span class=\\"token comment\\">//调用带参的构造函数</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">threadFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread is running with parameter：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> x <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> value <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//调用带参的构造函数</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">thread1</span><span class=\\"token punctuation\\">(</span>threadFunction<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//value作为参数传递给threadFunction，用于新线程的创建</span>\\n\\n    <span class=\\"token comment\\">//等待线程结束</span>\\n    thread1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread has finished\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Thread is running with parameter：42</span>\\n<span class=\\"token comment\\">//Thread has finished</span>\\n\\n<span class=\\"token comment\\">//调用移动构造函数</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">threadFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread is running with parameter：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> x <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> value <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//创建并启动一个新线程</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">thread1</span><span class=\\"token punctuation\\">(</span>threadFunction<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//value作为参数传递给threadFunction，用于新线程的创建</span>\\n\\n    <span class=\\"token comment\\">//移动构造函数</span>\\n    std<span class=\\"token operator\\">::</span>thread thread2 <span class=\\"token operator\\">=</span> std<span class=\\"token operator\\">::</span><span class=\\"token function\\">move</span><span class=\\"token punctuation\\">(</span>thread1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//主线程继续执行其他任务</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Main thread is running\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//等待新线程结束</span>\\n    thread2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread has finished\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Main thread is running</span>\\n<span class=\\"token comment\\">//Thread is running with parameter：42</span>\\n<span class=\\"token comment\\">//Thread has finished</span>\\n<span class=\\"token comment\\">//说明：线程的执行是并发的，具体执行顺序可能受到多个因素的影响，包括系统调度策略和处理器的状态</span>\\n<span class=\\"token comment\\">//因此，输出语句的顺序可能会有所不同，thread2 可能会在 thread1（新线程）之前输出信息，但这并</span>\\n<span class=\\"token comment\\">//不表示 thread2 先于 thread1 运行，而是由于主线程和新线程的并发执行</span>\\n\\n\\n<span class=\\"token comment\\">//thread提供的成员函数</span>\\n<span class=\\"token comment\\">//join()：对该线程进行等待，在等待的线程返回前，调用join()的线程将会被阻塞</span>\\n<span class=\\"token comment\\">//joinable()：判断该线程是否已经执行完毕，如果是就返回true，否则返回false</span>\\n<span class=\\"token comment\\">//detach()：将该线程与创建线程进行分离，被分离后的线程不需要创建线程调用join()对其进行等待</span>\\n<span class=\\"token comment\\">//get_id()：获得该线程的id</span>\\n<span class=\\"token comment\\">//swap()：将两个线程对象关联线程的状态进行交换</span>\\n\\n<span class=\\"token comment\\">//join()、joinable()的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread is running\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">myThread</span><span class=\\"token punctuation\\">(</span>function<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//joinable检查线程执行完毕function没有</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>myThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">joinable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread is joinable\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token comment\\">//主线程执行一些任务</span>\\n       <span class=\\"token comment\\">//join()的使用：等待新进程结束</span>\\n       myThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">else</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread is not joinable\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Main thread has finished\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Thread is joinable</span>\\n<span class=\\"token comment\\">//Thread is running</span>\\n<span class=\\"token comment\\">//Main thread has finished</span>\\n\\n\\n<span class=\\"token comment\\">//detach()的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread is running\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">myThread</span><span class=\\"token punctuation\\">(</span>function<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//分离新线程，使其在后台运行</span>\\n    myThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">detach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Main thread has finished\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Main thread has finished</span>\\n\\n\\n<span class=\\"token comment\\">//get_id()的使用</span>\\n<span class=\\"token comment\\">//获取线程id的方式：1.调用get_id()访问、2.调用this_thread::get_id()获取</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread ID：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>this_thread<span class=\\"token operator\\">::</span><span class=\\"token function\\">get_id</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">myThread</span><span class=\\"token punctuation\\">(</span>function<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//主线程执行一些任务</span>\\n    <span class=\\"token comment\\">//等待新进程结束</span>\\n    myThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Main thread has finished\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Thread ID：140148637431360</span>\\n<span class=\\"token comment\\">//Main thread has finished</span>\\n\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Thread is running\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">myThread1</span><span class=\\"token punctuation\\">(</span>function<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>thread myThread2<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//交换两个线程对象</span>\\n    myThread1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>myThread2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>myThread1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">joinable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       myThread1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>myThread2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">joinable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       myThread2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Main thread has finished\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Thread is running</span>\\n<span class=\\"token comment\\">//Main thread has finished</span>\\n\\n\\n<span class=\\"token comment\\">//线程函数参数问题</span>\\n<span class=\\"token comment\\">//问题：线程函数的参数是以值拷贝的方式拷贝到线程空间中的，计算线程函数的参数为引用类型，在线程函数中修改后也不会</span>\\n<span class=\\"token comment\\">//影响到外部实参，因为其实际引用的就是线程栈中的拷贝，而不是外部实参</span>\\n\\n<span class=\\"token comment\\">//解决办法：</span>\\n<span class=\\"token comment\\">//1.借助std::ref()保持对实参的引用</span>\\n<span class=\\"token comment\\">//2.将实参的地址传入线程函数，在线程函数中通过该地址修改变量</span>\\n<span class=\\"token comment\\">//3.将lambda表达式作为线程函数，利用lambda函数的捕捉列表以引用的方式对外部实参进行捕捉</span>\\n\\n\\n<span class=\\"token comment\\">//借助std::ref()保持对实参的引用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> x<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//在线程函数中修改实参的值</span>\\n    x <span class=\\"token operator\\">+=</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> value <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//使用std::ref()传递引用</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">myThread</span><span class=\\"token punctuation\\">(</span>function<span class=\\"token punctuation\\">,</span> std<span class=\\"token operator\\">::</span><span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//主线程等待新线程结束</span>\\n    myThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//输出修改后的值</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Modified value in main：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：Modified value in main：52</span>\\n\\n\\n\\n<span class=\\"token comment\\">//将实参的地址传入线程函数，在线程函数中通过该地址修改变量</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> x<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//在线程函数中修改实参的值</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+=</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> value <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//传递变量的地址给新线程</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">myThread</span><span class=\\"token punctuation\\">(</span>function<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//主线程等待新线程结束</span>\\n    myThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//输出修改后的值</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Modified value in main：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：Modified value in main：52</span>\\n\\n\\n<span class=\\"token comment\\">//将lambda表达式作为线程函数，利用lambda函数的捕捉列表以引用的方式对外部实参进行捕捉</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> value <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//传递变量的地址给新线程</span>\\n    std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">myThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">&amp;</span>value<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token comment\\">//在线程函数中通过引用修改外部变量的值</span>\\n       value <span class=\\"token operator\\">+=</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Value inside thread：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//主线程等待新线程结束</span>\\n    myThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//输出修改后的值</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Modified value in main：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Value inside thread：52</span>\\n<span class=\\"token comment\\">//Modified value in main：52</span>\\n\\n\\n<span class=\\"token comment\\">//15.互斥量库</span>\\n<span class=\\"token comment\\">//mutex的种类：</span>\\n<span class=\\"token comment\\">//1.mutex：最基本的互斥量，不可拷贝，不可移动</span>\\n<span class=\\"token comment\\">//2.recursive_mutex：递归互斥锁，专门用于递归函数中的加锁操作</span>\\n<span class=\\"token comment\\">//3.timed_mutex：时间锁，能够在指定时间内进行加锁操作</span>\\n<span class=\\"token comment\\">//4.recursive_timed_mutex：既支持递归函数中进行加锁，也支持在指定实际内加锁</span>\\n\\n<span class=\\"token comment\\">//lock_guard和unique_lock</span>\\n<span class=\\"token comment\\">//lock_guard是一个轻量级的互斥锁封装类，使用RAII原则，即在构造函数中获取互斥锁，在析构函数中释放互斥锁</span>\\n\\n<span class=\\"token comment\\">//unique_lock是一个更加灵活的互斥锁封装类，与lock_guard不同，它需要手动锁定和释放互斥锁，提供额外成员函数</span>\\n<span class=\\"token comment\\">//1.void lock()：手动锁定互斥量</span>\\n<span class=\\"token comment\\">//2.void unlock()：手动解锁互斥量</span>\\n<span class=\\"token comment\\">//3.bool try_lock()：尝试锁定互斥量，互斥量当前不可用，立刻返回false</span>\\n\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;mutex&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>mutex myMutex<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//std::lock_guard的使用</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>lock_guard<span class=\\"token operator\\">&lt;</span>std<span class=\\"token operator\\">::</span>mutex<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span>myMutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token comment\\">//互斥锁在这个作用域内被持有</span>\\n       <span class=\\"token comment\\">//这里进行一些线程安全的操作</span>\\n    <span class=\\"token punctuation\\">}</span>   <span class=\\"token comment\\">//lock_guard在这里离开作用域，互斥锁被自动释放</span>\\n\\n    <span class=\\"token comment\\">//std::unique_lock的使用</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>unique_lock<span class=\\"token operator\\">&lt;</span>std<span class=\\"token operator\\">::</span>mutex<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">lock2</span><span class=\\"token punctuation\\">(</span>myMutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token comment\\">//互斥锁在这个作用域内被持有</span>\\n       <span class=\\"token comment\\">//这里进行一些线程安全的操作</span>\\n\\n       <span class=\\"token comment\\">//手动释放互斥锁：unlock()</span>\\n       lock2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token comment\\">//这里可以执行一些不需要互斥锁的操作</span>\\n\\n       <span class=\\"token comment\\">//重新锁定互斥锁：lock()</span>\\n       lock2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token comment\\">//这里再次持有互斥锁，进行一些线程安全的操作</span>\\n    <span class=\\"token punctuation\\">}</span>   <span class=\\"token comment\\">//unique_lock在这里离开作用域，互斥锁被自动释放</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n<span class=\\"token comment\\">//16.原子性操作库</span>\\n<span class=\\"token comment\\">//解决线程安全问题：多线程最主要的问题就是共享数据带来的线程安全问题，共享数据支持多个线程同时对其进行读操作，但不支持多个线程同时对其进程写操作</span>\\n<span class=\\"token comment\\">//因此C++11中引入了原子操作。所谓原子操作：即不可被中断的一个或一系列操作，C++11引入的原子操作类型，使得线程间数据的同步变得非常高效</span>\\n\\n<span class=\\"token comment\\">//原子类：不需要对原子类型进行加锁解锁操作，线程能够对原子类型变量互斥访问</span>\\n<span class=\\"token comment\\">//原子类型变量定义方式：</span>\\n<span class=\\"token comment\\">//1.通过原子类型名称定义，例如：atomic_bool n = {true}、atomic_int n = {0}、atomic_char n = {'a'}</span>\\n\\n<span class=\\"token comment\\">//2.通过atomic类模板定义，例如：atomic&lt;bool&gt; n = true、atomic&lt;int&gt; n = 0、atomic&lt;char&gt; n = 'a'</span>\\n<span class=\\"token comment\\">//atomic类模板是C++标准库提供的，已经实现了原子操作的一系列方法，具体用的时候查</span>\\n\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;atomic&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//通过原子类型名称定义</span>\\n    std<span class=\\"token operator\\">::</span>atomic_int <span class=\\"token function\\">atomicInteger</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>atomic_bool <span class=\\"token function\\">atomicFlag</span><span class=\\"token punctuation\\">(</span>true<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//通过atomic类模板定义</span>\\n    std<span class=\\"token operator\\">::</span>atomic<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">atomicInteger2</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>atomic<span class=\\"token operator\\">&lt;</span>bool<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">atomicFlag2</span><span class=\\"token punctuation\\">(</span>true<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//进行原子操作</span>\\n    atomicInteger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fetch_add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 原子加法 fetch_add</span>\\n    atomicFlag<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">store</span><span class=\\"token punctuation\\">(</span>false<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>     <span class=\\"token comment\\">// 原子存储 store将值设置给原子变量</span>\\n    atomicInteger2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fetch_add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 原子加法</span>\\n    atomicFlag2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">store</span><span class=\\"token punctuation\\">(</span>false<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>     <span class=\\"token comment\\">// 原子存储</span>\\n\\n    <span class=\\"token comment\\">// 输出修改后的值</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Modified atomicInteger: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> atomicInteger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//load()加载当前值</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Modified atomicInteger2: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> atomicInteger2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Modified atomicFlag: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>boolalpha <span class=\\"token operator\\">&lt;&lt;</span> atomicFlag<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Modified atomicFlag2: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>boolalpha <span class=\\"token operator\\">&lt;&lt;</span> atomicFlag2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Modified atomicInteger: 47</span>\\n<span class=\\"token comment\\">//Modified atomicInteger2: 47</span>\\n<span class=\\"token comment\\">//Modified atomicFlag: false</span>\\n<span class=\\"token comment\\">//Modified atomicFlag2: false</span>\\n\\n\\n<span class=\\"token comment\\">//17.条件变量库</span>\\n<span class=\\"token comment\\">//C++11引入条件变量来协调多个线程的执行，条件变量允许一个线程等待另一个线程满足某个条件后再继续执行</span>\\n\\n<span class=\\"token comment\\">//wait系列成员函数：用于让调用线程进行等待，包括：wait、wait_for、wait_until</span>\\n<span class=\\"token comment\\">//notify系列成员函数：用于唤醒等待的线程，包括：notify_one、notify_all</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;thread&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;mutex&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;condition_variable&gt;</span> <span class=\\"token comment\\">//条件变量库头文件</span></span>\\n\\nstd<span class=\\"token operator\\">::</span>mutex mutex<span class=\\"token punctuation\\">;</span>\\nstd<span class=\\"token operator\\">::</span>condition_variable cv<span class=\\"token punctuation\\">;</span>\\nbool dataReady <span class=\\"token operator\\">=</span> false<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">producer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//模拟一些工作</span>\\n        std<span class=\\"token operator\\">::</span>this_thread<span class=\\"token operator\\">::</span><span class=\\"token function\\">sleep_for</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token operator\\">::</span>chrono<span class=\\"token operator\\">::</span><span class=\\"token function\\">seconds</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">//数据准备完毕</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                std<span class=\\"token operator\\">::</span>lock_guard<span class=\\"token operator\\">&lt;</span>std<span class=\\"token operator\\">::</span>mutex<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dataReady <span class=\\"token operator\\">=</span> true<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">//通知等待的线程</span>\\n        cv<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">notify_one</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//notify_one()用于唤醒等待队列中首个线程，notify_all()用于唤醒等待队列中所有线程</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">consumer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//等待数据准备完毕的通知</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                std<span class=\\"token operator\\">::</span>unique_lock<span class=\\"token operator\\">&lt;</span>std<span class=\\"token operator\\">::</span>mutex<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                cv<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">wait</span><span class=\\"token punctuation\\">(</span>lock<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">return</span> dataReady<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">//进行操作，此时数据已经准备好了</span>\\n        std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Consumer：Data is ready\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//启动生产者和消费者线程</span>\\n        std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">producerThread</span><span class=\\"token punctuation\\">(</span>producer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        std<span class=\\"token operator\\">::</span>thread <span class=\\"token function\\">consumerThread</span><span class=\\"token punctuation\\">(</span>consumer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//等待线程结束</span>\\n        producerThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        consumerThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：Consumer：Data is ready</span>\\n</code></pre></div>"}`);export{d as comp,m as data};
