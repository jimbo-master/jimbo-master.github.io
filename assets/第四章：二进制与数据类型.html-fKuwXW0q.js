import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as l,c as i,a as n,e as s,d as t,w as e,b as p}from"./app-Dezzdk4T.js";const u="/assets/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6-C17wIkZe.png",r="/assets/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6-BC5f6NJP.png",d="/assets/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6-oHqgRAVi.png",k="/assets/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6-cY9iho8C.png",v="/assets/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6-CEvjXjhh.png",m="/assets/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6-BoMfPa87.png",b="/assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E8%A1%A5%E7%A0%81-Bo4xaD3c.png",g="/assets/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-DvT7Xg2i.png",h="/assets/%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F-CwwGxjV3.png",f="/assets/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E8%BF%87%E7%A8%8B-DFanjR7g.png",_="/assets/ASCII%E5%AD%97%E7%AC%A6%E8%A1%A8-oak4LVyV.png",y="/assets/%E8%BD%AC%E6%8D%A2%E6%96%B9%E5%90%91-CLcs8-TL.png",q={},E=p(`<h1 id="第四章-二进制与数据类型" tabindex="-1"><a class="header-anchor" href="#第四章-二进制与数据类型"><span>第四章：二进制与数据类型</span></a></h1><h2 id="_1-二进制" tabindex="-1"><a class="header-anchor" href="#_1-二进制"><span>1.二进制</span></a></h2><h3 id="_1-1-进制" tabindex="-1"><a class="header-anchor" href="#_1-1-进制"><span>1.1 进制</span></a></h3><p><strong>计算机世界中只有二进制，所以计算机中存储和运算的所有数据都要转为二进制。包括数字、字符、图片、声音、视频等</strong></p><p><strong>（1）常见进制介绍</strong></p><blockquote><p><strong>（1）二进制：0、1，满2进1<br> （2）十进制：0 - 9，满10进1<br> （3）十六进制：0 - 9及A-F，满16进1。十六进制中，除了 0 到 9 十个数字外，还引入了字母，以便表示超过9的值。字母A对应十进制的10，字母B对应十进制的11，字母 C、D、E、F 分别对应十进制的 12、13、14、15</strong></p></blockquote><p><strong>（2）C语言中使用不同进制表示整数</strong></p><blockquote><p><strong>（1）二进制：以0b或0B开头表示<br> （2）十进制：正常数字表示<br> （3）十六进制：以0x或0X开头表示，此处的A-F不区分大小写</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span>b10<span class="token punctuation">;</span> <span class="token comment">// 二进制</span>
    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">210</span><span class="token punctuation">;</span>  <span class="token comment">// 十进制</span>
    <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制</span>

    <span class="token comment">//都打印为10进制整数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1=%d \\n&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1=%d \\n&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1=%d \\n&quot;</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//num1=2</span>
    <span class="token comment">//num1=210</span>
    <span class="token comment">//num1=31</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）C语言的输出格式</strong></p><blockquote><p><strong>%d ：十进制整数<br> %x ：十六进制整数<br> %#x ：显示前缀 0x(小写) 的十六进制整数<br> %#X ：显示前缀 0X(大写) 的十六进制整数</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;十进制：%d \\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;十六进制：%x \\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;十六进制（0x开头）：%#x \\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;十六进制（0X开头）：%#X \\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
        十进制：100 
        十六进制：64 
        十六进制（0x开头）：0x64 
        十六进制（0X开头）：0X64
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-2-进制的转换" tabindex="-1"><a class="header-anchor" href="#_1-2-进制的转换"><span>1.2 进制的转换</span></a></h3><p><strong>（1）二进制与十进制的转换</strong></p><blockquote><p><strong>二进制转换成十进制：从最低位开始，将每个位上的数提取出来，乘以2的（位数-1）次方，然后求和</strong></p></blockquote><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>十进制转换成二进制：将该数不断除以2，直到商为0为止，然后将每步得到的余数倒过来，就是对应的二进制</strong></p></blockquote><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（2）十六进制与十进制的转换</strong></p><blockquote><p><strong>十六进制转成十进制：从最低位开始，将每个位上的数提取出来，乘以16的（位数-1）次方，然后求和</strong></p></blockquote><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>十进制转成十六进制：将该数不断除以16，直到商为0为止，然后将每步得到的余数倒过来，就是对应的十六进制</strong></p></blockquote><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（3）二进制与十六进制的转换</strong></p><blockquote><p><strong>二进制转成十六进制：低位开始，将二进制数每四位一组，转成对应的十六进制数即可</strong></p></blockquote><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>十六进制转成二进制：将十六进制数每1位，转成对应的4位的一个二进制数即可</strong></p></blockquote><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_1-3-原码、补码、反码" tabindex="-1"><a class="header-anchor" href="#_1-3-原码、补码、反码"><span>1.3 原码、补码、反码</span></a></h3><p><strong>计算机底层存储数据时使用的是二进制数字，但是计算机在存储一个数字时并不是直接存储该数字对应的二进制数字，而是存储该数字对应二进制数字的<mark>补码</mark></strong></p><p><strong>（1）机器数和真值</strong></p><blockquote><p><strong>机器数：一个数在计算机的存储形式是二进制数，我们称这些二进制数为机器数。机器数可以是有符号的，用机器数的最高位存放符号位，0表示正数，1表示负数</strong><br><br><strong>真值：因为机器数带有符号位，所以机器数的形式值不等于其真实表示的值（真值），以机器数10000001为例，其真正表示的值（首位为符号位）为-1，而形式值（首位就是代表1）为129；因此将带符号的机器数的真正表示的值称为机器数的真值</strong></p></blockquote><p><strong>（2）原码、补码、反码的概念</strong><br><strong>总结：</strong></p><ul><li><strong>正数的原码、反码、补码都一样，三码合一</strong></li><li><strong>负数的反码：它的原码符号位不变，其它位取反；</strong></li><li><strong>负数的补码：它的反码+1</strong></li><li><strong>0的反码，补码都是0</strong></li></ul>',36),w=n("p",null,[n("strong",null,"原码：原码的表示与机器数真值表示的一样，即用第一位表示符号，其余位表示数值")],-1),B=n("li",null,[n("strong",null,"正数的原码：就是它对应的二进制数")],-1),A=n("li",null,[n("strong",null,"负数的原码：它的绝对值对应的二进制数，且最左边位变为1")],-1),x=n("strong",null,"0的原码：仍然是0",-1),C=n("br",null,null,-1),z=n("br",null,null,-1),D=n("strong",null,"十进制的正负1，用8位二进制的原码表示如下：",-1),F=n("br",null,null,-1),L=n("strong",null,"+1 原码：[ 0000 0001 ]",-1),I=n("br",null,null,-1),X=n("br",null,null,-1),N=n("hr",null,null,-1),S=n("p",null,[n("strong",null,"反码：")],-1),T=n("ul",null,[n("li",null,[n("strong",null,"正数的反码：和原码相同")]),n("li",null,[n("strong",null,"负数的反码：在其原码的基础上，符号位不变，其余各位取反")]),n("li",null,[n("strong",null,"0的反码：仍然是0")])],-1),V=n("strong",null,"十进制的正负1，用8位二进制的反码表示如下：",-1),j=n("br",null,null,-1),P=n("strong",null,"+1 原码：[ 0000 0001 ] 反码：[ 0000 0001 ]",-1),U=n("br",null,null,-1),J=n("br",null,null,-1),R=n("br",null,null,-1),Z=n("strong",null,"注意：反码通常是用来由原码求补码或者由补码求原码的过渡码",-1),O=p("<hr><p><strong>补码：</strong></p><ul><li><strong>正数的补码：和原码、反码相同</strong></li><li><strong>负数的补码：反码的基础上加1</strong></li><li><strong>0的补码：仍然是0</strong></li></ul><p><strong>十进制的正负1，用8位二进制的补码表示如下：</strong><br><strong>+1 原码：[ 0000 0001 ] 反码：[ 0000 0001 ] 补码：[ 0000 0001 ]</strong><br><strong>-1 原码：[ 1000 0001 ] 反码：[ 1111 1110 ] 补码：[ 1111 1111 ]</strong></p>",4),M=p('<hr><h3 id="_1-4-计算机为什么要用补码" tabindex="-1"><a class="header-anchor" href="#_1-4-计算机为什么要用补码"><span>1.4 计算机为什么要用补码</span></a></h3><p><strong>简言之：简化硬件设计和提高计算效率</strong><br><img src="'+b+'" alt="" loading="lazy"></p><hr><h2 id="_2-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-数据类型"><span>2.数据类型</span></a></h2><p><strong>C语言根据数据的特性和用途进行了类型划分，不同类型的数据在内存中占据不同大小的空间</strong><br><img src="'+g+'" alt="" loading="lazy"></p><h3 id="_2-1-整形类型" tabindex="-1"><a class="header-anchor" href="#_2-1-整形类型"><span>2.1 整形类型</span></a></h3><p><strong>（1）关于存储大小单位：</strong></p><blockquote><p><strong>bit（位）：计算机中的最小存储单位，表示一个二进制位<br> byte（字节）：计算机中基本存储单元，1byte = 8bit</strong><br></p><ul><li><strong>各类型存储大小受到操作系统、编译器、硬件平台的影响</strong></li><li><strong>整型分为有符号signed和无符号unsigned两种，默认是signed</strong></li><li><strong>开发中使用整型一般用int型，如果不足以表示大数，可以使用long long</strong></li></ul></blockquote><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>short、signed short</td><td>2字节</td><td>-32,768 (- 2^15)到 32,767 (2^15 -1)</td></tr><tr><td>unsigned short</td><td>2字节</td><td>0 到 65,535 (2^16 - 1)</td></tr><tr><td>int、signed int</td><td>16位：2 字节、32位：4 字节</td><td>16位：-32,768 (- 2^15 ) 到 32,767 (2^15-1)、32位：-2,147,483,648 (- 2^31) 到 2,147,483,647 (2^31 -1)</td></tr><tr><td>unsigned int</td><td>16位：2 字节、32位：4 字节</td><td>16位：0 到 65,535 (2^16-1) 、32位：0 到 4,294,967,295 (2^32 -1)</td></tr><tr><td>long 、signed long</td><td>32位：4 字节、64位：8 字节</td><td>32位：-2,147,483,648 (- 2^31) 到 2,147,483,647 (2^31 - 1)、64位：9223372036854775808(-2^63) 到9223372036854775807 (2^63-1)</td></tr><tr><td>unsigned long</td><td>4 或 8 字节</td><td>32位：0 到 4,294,967,295 (2^32 - 1)、64位：0 ~ 18446744073709551615 (2^64 - 1)</td></tr><tr><td>long long、signed long long</td><td>8字节</td><td>9223372036854775808(-2^63) 到9223372036854775807 (2^63-1)</td></tr><tr><td>unsigned long long</td><td>8 字节</td><td>0 ~ 18446744073709551615 (2^64 - 1)</td></tr></tbody></table><p><strong>（2）字面常量后缀</strong><br><strong>字面量是源代码中一个固定值的表示法，用于直接表示数据，如图所示：</strong><br><img src="'+h+`" alt="" loading="lazy"></p><blockquote><p><strong>（1）一个整数字面量默认是int类型<br> （2）如果需要表示 long 类型字面量，需要添加后缀 l 或 L<br> （3）如果需要表示 long long 类型字面量，需要添加后缀 ll 或 LL<br> （4）如果需要表示无符号整数字面量，需要添加后缀 u 或 U， 注意， u 和 l 可以结合使用，不分先后，如 ul（无符号long类型）、ULL（无符号 long long类型），lu（无符号 long 类型）等</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// short 类型</span>
    <span class="token keyword">short</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 signed short a1 = 10;</span>
    <span class="token keyword">short</span> a2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 signed short a1 = -10;</span>
    <span class="token comment">// unsigned short a3 = -20;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> a3 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a1=%d; a2=%d; a3=%d \\n&quot;</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a1=10; a2=-10; a3=20</span>

    <span class="token comment">// int 类型</span>
    <span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 signed int a1 = 100;</span>
    <span class="token keyword">int</span> b2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 signed int a1 = -100;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b3 <span class="token operator">=</span> <span class="token number">200u</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> b4 <span class="token operator">=</span> <span class="token number">300U</span><span class="token punctuation">;</span>                                      <span class="token comment">// 等同于  unsigned int b4 = 300U;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b1=%d; b2=%d; b3=%d; b4=%d \\n&quot;</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> b4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b1=100; b2=-100; b3=200; b4=300</span>

    <span class="token comment">// long 类型</span>
    <span class="token keyword">long</span> c1 <span class="token operator">=</span> <span class="token number">1000l</span><span class="token punctuation">;</span>   <span class="token comment">// 等同于 signed long c1 = 1000l;</span>
    <span class="token keyword">long</span> c2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1000L</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 signed long c2 = -1000L;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> c3 <span class="token operator">=</span> <span class="token number">2000ul</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c1=%ld; c2=%ld; c3=%ld \\n&quot;</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c1=100; c2=-1000; c3=2000</span>

    <span class="token comment">// long long 类型</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> d1 <span class="token operator">=</span> <span class="token number">10000ll</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 signed long long d1 = 10000ll;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> d2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000LL</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 signed long long d2 = -10000LL;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> d3 <span class="token operator">=</span> <span class="token number">20000ULL</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;d1=%lld; d2=%lld; d3=%lld \\n&quot;</span><span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// d1=10000; d2=-10000; d3=20000</span>

    <span class="token comment">/*
        a1=10; a2=-10; a3=20
        b1=100; b2=-100; b3=200; b4=300
        c1=100; c2=-1000; c3=2000
        d1=10000; d2=-10000; d3=20000
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）精确宽度类型</strong><br><strong>C 语言的整数类型（short、int、long）在不同计算机上，占用的字节宽度可能是不一样的。程序员有时需要精准的字节宽度，以提高代码的可移植性，尤其是嵌入式开发中，使用精确宽度类型可以确保代码在各种平台上的一致性</strong></p><p><strong>标准库的头文件 &lt;stdint.h&gt; 中定义了一些新的类型别名，如下：</strong></p><table><thead><tr><th>类型名称</th><th>含义</th></tr></thead><tbody><tr><td>int8_t</td><td>8 位有符号整数</td></tr><tr><td>int16_t</td><td>16 位有符号整数</td></tr><tr><td>int32_t</td><td>32 位有符号整数</td></tr><tr><td>int64_t</td><td>64 位有符号整数</td></tr><tr><td>uint8_t</td><td>8 位无符号整数</td></tr><tr><td>uint16_t</td><td>16 位无符号整数</td></tr><tr><td>uint32_t</td><td>32 位无符号整数</td></tr><tr><td>uint64_t</td><td>64 位无符号整数</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 变量 x32 声明为 int32_t 类型，可以保证是32位(4个字节)的宽度。</span>
    <span class="token class-name">int32_t</span> x32 <span class="token operator">=</span> <span class="token number">45933945</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x32=%d\\n&quot;</span><span class="token punctuation">,</span> x32<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//x32=45933945</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-2-浮点类型" tabindex="-1"><a class="header-anchor" href="#_2-2-浮点类型"><span>2.2 浮点类型</span></a></h3><p><strong>浮点类型可以表示一个小数，比如：123.4，7.8，0.12等</strong></p><p><strong>（1）浮点型的类型</strong></p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>有效小数位数</th></tr></thead><tbody><tr><td>float 单精度</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 ~ 9</td></tr><tr><td>double 双精度</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 ~18</td></tr><tr><td>long double 长双精度</td><td>32位：10字节、64位：16字节</td><td>32位：与 double 相同或更大、64位：3.4E-4932到1.2E+4932</td><td>18或更多</td></tr></tbody></table><p><strong>（2）浮点型数据表示形式</strong></p><blockquote><p><strong>十进制数形式：如：5.12、512.0f、.512（0.512 可以省略 0）<br> 科学计数法形式：如：5.12e2、5.12E-2<br> 开发中用到浮点型数字，建议使用double型，如精度要求更高可以使用long double 型</strong></p></blockquote><p><strong>（3）字面量后缀</strong></p><blockquote><p><strong>浮点数字面量默认是double型<br> 如果需要表示float类型字面量，须加后缀 f 或 F<br> 如果需要表示long double类型字面量，需加后缀 l 或 L</strong></p></blockquote><p><strong>（4）格式占位符</strong></p><blockquote><p><strong>%f：是浮点类型的格式占位符，在printf中对应float类型（float类型会转换成double来处理）；默认会保留6位小数，可以指定小数位数，如：%.2f 表示保留2位小数</strong><br><br><strong>%lf：在printf中和 %f意思相同（C99标准加入），对应double类型，默认保留6位小数，可以指定小数位数，如：%.2lf 表示保留2位小数。但需要注意的是，在scanf中 %lf和 %f含义不同：输入一个float类型数据时使用 %f；而输入double类型时必须使用 %lf</strong><br><br><strong>%Lf：对应的是long double 类型，默认保留6位小数，可以指定小数位数，如： %.2Lf 表示保留2位小数。需要注意的是，输入输出 long double 类型都必须使用 %Lf 占位符</strong><br><br><strong>%e：对应科学计数法表示的浮点数，可以指定尾数部分所保留的小数位数，如 %.2e 表示尾数部分保留两位小数</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// double 类型</span>
    <span class="token keyword">double</span> a1 <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> a2 <span class="token operator">=</span> <span class="token number">.12345678</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> a3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2e12</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> a4 <span class="token operator">=</span> <span class="token number">1.9823e2</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a1=%f, a2=%.10f, a3=%.2lf, a4=%lf \\n&quot;</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a1=%e, a2=%.2e, a3=%e, a4=%e \\n&quot;</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// float 类型</span>
    <span class="token keyword">float</span> b1 <span class="token operator">=</span> <span class="token number">3.1415f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> b2 <span class="token operator">=</span> <span class="token number">.123456f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> b3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2e12f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> b4 <span class="token operator">=</span> <span class="token number">1.9823e2f</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b1=%f, b2=%f, b3=%.0f, b4=%f \\n&quot;</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> b4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b1=%e, b2=%.2e, b3=%e, b4=%e \\n\\n&quot;</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> b4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
        a1=3.141500, a2=0.1234567800, a3=-2000000000000.00, a4=198.230000 
        a1=3.141500e+00, a2=1.23e-01, a3=-2.000000e+12, a4=1.982300e+02 

        b1=3.141500, b2=0.123456, b3=-1999999991808, b4=198.229996
        b1=3.141500e+00, b2=1.23e-01, b3=-2.000000e+12, b4=1.982300e+02
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-3-字符类型" tabindex="-1"><a class="header-anchor" href="#_2-3-字符类型"><span>2.3 字符类型</span></a></h3><p><strong>字符类型 char 可以表示单个字符，如一个数字、一个字母、一个符号</strong></p><blockquote><p><strong>char类型的字面量是用单引号括起来的单个字符</strong><br><strong>可以使用转义字符 \\ 表示特殊含义的字符</strong><br><strong>多个字符称为字符串，在C语言中使用char数组表示，数组不是基本数据类型，而是构造类型</strong><br><strong>使用%c表示char类型</strong></p></blockquote><table><thead><tr><th>转义字符</th><th>说明</th></tr></thead><tbody><tr><td>\\b</td><td>退格</td></tr><tr><td>\\n</td><td>换行符</td></tr><tr><td>\\r</td><td>回车符</td></tr><tr><td>\\t</td><td>制表符</td></tr><tr><td>\\”</td><td>双引号</td></tr><tr><td>\\&#39;</td><td>单引号</td></tr><tr><td>\\\\</td><td>反斜杠</td></tr></tbody></table><p><strong>（1）字符类型本质</strong></p><blockquote><p><strong>C语言中，char类型本质是一个整数，是ASCII码中对应的数字，存储长度是 1 个字节，char类型可以进行数学运算</strong><br><br><strong>字符型同样分为signed char（无符号）和unsigned char（有符号），其中signed char取值范围-128 ~ 127，unsigned char取值范围0 ~ 255。默认是否带符号取决于当前运行环境</strong></p></blockquote><p><strong>（2）字符型数据在计算中存储和读取的过程</strong><br><img src="`+f+'" alt="" loading="lazy"></p><p><strong>（3）ASCII码介绍</strong></p><blockquote><p><strong>ASCII码是一种用于表示文本字符的字符编码标准，一共规定了128个字符的编码，比如空格“SPACE” 是32（二进制00100000），大写的字母A是65（二进制01000001）</strong><br><br><strong>主要记住：A是65，a是97，相差32</strong></p></blockquote><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// char 类型字面量需要使用单引号包裹</span>
    <span class="token keyword">char</span> a1 <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> a2 <span class="token operator">=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> a3 <span class="token operator">=</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c1=%c, c3=%c, c2=%c \\n&quot;</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// char 类型本质上整数可以进行运算</span>
    <span class="token keyword">char</span> b1 <span class="token operator">=</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> b2 <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c-&gt;%d \\n&quot;</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c-&gt;%d \\n&quot;</span><span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c+%c=%d \\n&quot;</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// char 类型取值范围</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">// 无符号char取值范围 0 ~255</span>
    <span class="token keyword">signed</span> <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>   <span class="token comment">// 有符号char取值范围 -128~127，c2会超出范围</span>
    <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>          <span class="token comment">// 当前系统，char 默认是 signed char</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c1=%d, c2=%d, c3=%d&quot;</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
        c1=A, c3=       , c2=9
        b -&gt; 98
        e -&gt; 101
        b + e = 199
        c1=200, c2=-56, c3=-56
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-4-布尔类型" tabindex="-1"><a class="header-anchor" href="#_2-4-布尔类型"><span>2.4 布尔类型</span></a></h3><p><strong>布尔值用于表示真、假两种状态，通常用于逻辑运算和条件判断</strong></p><p><strong>（1）声明布尔类型的三种方法：主要用第三种</strong></p><blockquote><p><strong>①宏定义：</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BOOL</span> <span class="token expression"><span class="token keyword">int</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TURE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>②C99标准提供了_Bool 型，_Bool仍是整数类型，但与一般整型不同的是，_Bool变量只能赋值为0或1，非0的值都会被存储为1</strong></p></blockquote><blockquote><p><strong>③C99标准还提供了一个头文件 &lt;stdbool.h&gt; 定义了bool代表_Bool，true代表1，false代表0</strong></p></blockquote><hr><h3 id="_2-5-存储类别说明符" tabindex="-1"><a class="header-anchor" href="#_2-5-存储类别说明符"><span>2.5 存储类别说明符</span></a></h3><p><strong>存储类别说明符分为：auto、static、register、extern</strong></p><blockquote><p><strong>auto：默认存储类型说明符</strong></p></blockquote><blockquote><p><strong>static：用于声明静态变量和函数，静态变量在程序的整个生命周期内存在，不会在函数调用结束就销毁，static声明的变量只会初始化一次</strong></p></blockquote><blockquote><p><strong>register：用于建议编译器将变量存储在寄存器中，以便提高访问速度，在现代编译器中不需要使用，编译器足够智能</strong></p></blockquote><blockquote><p><strong>extern：用于声明一个变量或函数，告知它的定义可能在其他文件中，通常在头文件中声明全局变量，在源文件中定义</strong></p></blockquote><hr><h2 id="_3-获取数据的存储大小" tabindex="-1"><a class="header-anchor" href="#_3-获取数据的存储大小"><span>3.获取数据的存储大小</span></a></h2><p><strong>使用sizeof 可以获取数据类型或变量、字面量的存储大小，单位是字节。sizeof返回一个size_t类型的无符号整数值，格式占位符是 %zu，通常用%d打印</strong></p><blockquote><p><strong>size_t 通常是 unsigned int 或 unsigned long 的别名，具体是哪个类型的别名，由系统和编译器决定</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 计算数据类型的大小, 必须使用括号将数据类型关键字包裹起来</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;char：%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// char：1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;short：%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// short：2</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;int：%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long：%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// long：4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long long：%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// long long：8</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;float：%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// float：4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;double：%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// double：8</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long double：%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// long double：16</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算字面量数据的大小，字面量可以省略括号</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token number">431</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token number">4.31</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算变量的大小，变量可以省略括号</span>
    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10.8</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a: %zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a: 1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b: %zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// b: 4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c: %zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c: 8</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;d: %zu \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// d: 8</span>

    <span class="token comment">/*
        char：1 
        short：2 
        int：4
        long：4
        long long：8
        float：4
        double：8
        long double：16

        4
        4
        8

        a: 1
        b: 4
        c: 8
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_4-数据类型转换"><span>4.数据类型转换</span></a></h2><p><strong>数据类型转换分为：自动类型转换(隐式类型转换)、强制类型转换(显式类型转换)</strong></p><h3 id="_4-1-隐式类型转换" tabindex="-1"><a class="header-anchor" href="#_4-1-隐式类型转换"><span>4.1 隐式类型转换</span></a></h3><p><strong>不同类型的数据进行混合运算，会发生数据类型转换，窄类型会自动转为宽类型，这样不会造成精度损失</strong></p><p><strong>（1）运算过程中的隐式转换</strong></p><blockquote><p><strong>不同类型整数进行运算，窄类型整数自动转换为宽类型整数<br> 不同类型浮点数进行运算，精度小的类型自动转换为精度大的类型<br> 整数与浮点数进行运算，整数自动转换为浮点数</strong></p></blockquote><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 整型提升</span>
    <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">40000</span><span class="token punctuation">;</span>
    <span class="token comment">// 运算过程中，变量 s1 是 short 类型，会自动转为 int 类型</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> s1 <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 有符号整数自动转为无符号整数</span>
    <span class="token comment">// int n2 = 100;</span>
    <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">// 负数转为无符号整数，两者绝对值的和是无符号整数的最大值再加 1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u \\n&quot;</span><span class="token punctuation">,</span> n2 <span class="token operator">+</span> n3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 不同类型的浮点数运算，精度低的转诶精度高的</span>
    <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">1.25f</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">4.58667435</span><span class="token punctuation">;</span>
    <span class="token comment">// printf(&quot;%f \\t&quot;, f1);</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.10f\\n&quot;</span><span class="token punctuation">,</span> f1 <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 整型与浮点型运算，整型转为浮点型</span>
    <span class="token keyword">int</span> n4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d3 <span class="token operator">=</span> <span class="token number">1.67</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> n4 <span class="token operator">+</span> d3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
        40010
        4294967216
        5.8366743500
        11.670000
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）赋值时的隐式转换</strong></p><blockquote><p><strong>在赋值运算中，赋值号 两边量的数据类型不同时，等号右边的类型将转换为左边的类型。 如果窄类型赋值给宽类型，不会造成精度损失；如果宽类型赋值给窄类型，会造成精度损失</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 赋值 窄类型赋值给宽类型</span>
    <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f \\n&quot;</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 赋值 宽类型赋值给窄类型</span>
    <span class="token keyword">double</span> b1 <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b2 <span class="token operator">=</span> b1<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
        10.000000
        1
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-2-显示类型转换" tabindex="-1"><a class="header-anchor" href="#_4-2-显示类型转换"><span>4.2 显示类型转换</span></a></h3><p><strong>隐式类型转换中的宽类型赋值给窄类型，编译器是会产生警告的，提示程序存在潜在的隐患，如果非常明确地希望转换数据类型，就需要用到强制（或显式）类型转换</strong></p><blockquote><p><strong>转换格式：（类型名）变量、常量、表达式</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">1.934</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">4.2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d2<span class="token punctuation">;</span>         <span class="token comment">// d1转为1，d2转为4，结果是5</span>
    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>d1 <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// d1+d2=6.134，6.134转为6</span>
    <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.5</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 35.0 + 9.0 = 44.0 -&gt; int = 44</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1=%d \\n&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num2=%d \\n&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num3=%d \\n&quot;</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
        num1=5 
        num2=6 
        num3=44
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-大小端存储" tabindex="-1"><a class="header-anchor" href="#_5-大小端存储"><span>5.大小端存储</span></a></h2>`,80);function G(H,Y){const a=c("font");return l(),i("div",null,[E,n("blockquote",null,[w,n("ul",null,[B,A,n("li",null,[x,C,z,D,F,L,I,n("strong",null,[s("-1 原码：[ "),t(a,{color:"red"},{default:e(()=>[s("1")]),_:1}),s("000 0001 ]")]),X])]),N,S,T,n("p",null,[V,j,P,U,n("strong",null,[s("-1 原码：[ 1000 0001 ] 反码：[ 1"),t(a,{color:"red"},{default:e(()=>[s("111 1110")]),_:1}),s(" ]")]),J,R,Z]),O]),M,n("p",null,[n("strong",null,[t(a,{color:"red"},{default:e(()=>[s("大端：低字节存在高地址，高字节存在低地址。例如：0x11223344，假设内存地址为：低->高，则存储为：11 22 33 44")]),_:1})])]),n("p",null,[n("strong",null,[t(a,{color:"red"},{default:e(()=>[s("小端：低字节存储在低地址，高字节存储在高地址。例如：0x11223344，假设内存地址为：低->高，则存储为：44 33 22 11")]),_:1})])]),n("p",null,[n("strong",null,[t(a,{color:"red"},{default:e(()=>[s("说明：低字节就是这里的0x44，高字节就是这里的0x11")]),_:1})])]),n("p",null,[n("strong",null,[t(a,{color:"red"},{default:e(()=>[s("16进制内存下，0x11就是一个字节，这里的0x11223344就是4字节，分别存储16进制的11 22 33 44")]),_:1})])]),n("p",null,[n("strong",null,[t(a,{color:"red"},{default:e(()=>[s("为什么存在大小端存储：为了解决长度大于一个字节的数据类型内容在存储地址上以不同顺序分布的问题")]),_:1})])])])}const W=o(q,[["render",G],["__file","第四章：二进制与数据类型.html.vue"]]),$=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/1.C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"第四章：二进制与数据类型","lang":"zh-CN","frontmatter":{"date":"2024-01-04T00:00:00.000Z","order":5,"description":"第四章：二进制与数据类型 1.二进制 1.1 进制 计算机世界中只有二进制，所以计算机中存储和运算的所有数据都要转为二进制。包括数字、字符、图片、声音、视频等 （1）常见进制介绍 （1）二进制：0、1，满2进1 （2）十进制：0 - 9，满10进1 （3）十六进制：0 - 9及A-F，满16进1。十六进制中，除了 0 到 9 十个数字外，还引入了字母，...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/1.C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第四章：二进制与数据类型"}],["meta",{"property":"og:description","content":"第四章：二进制与数据类型 1.二进制 1.1 进制 计算机世界中只有二进制，所以计算机中存储和运算的所有数据都要转为二进制。包括数字、字符、图片、声音、视频等 （1）常见进制介绍 （1）二进制：0、1，满2进1 （2）十进制：0 - 9，满10进1 （3）十六进制：0 - 9及A-F，满16进1。十六进制中，除了 0 到 9 十个数字外，还引入了字母，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-01-04T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第四章：二进制与数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.二进制","slug":"_1-二进制","link":"#_1-二进制","children":[{"level":3,"title":"1.1 进制","slug":"_1-1-进制","link":"#_1-1-进制","children":[]},{"level":3,"title":"1.2 进制的转换","slug":"_1-2-进制的转换","link":"#_1-2-进制的转换","children":[]},{"level":3,"title":"1.3 原码、补码、反码","slug":"_1-3-原码、补码、反码","link":"#_1-3-原码、补码、反码","children":[]},{"level":3,"title":"1.4 计算机为什么要用补码","slug":"_1-4-计算机为什么要用补码","link":"#_1-4-计算机为什么要用补码","children":[]}]},{"level":2,"title":"2.数据类型","slug":"_2-数据类型","link":"#_2-数据类型","children":[{"level":3,"title":"2.1 整形类型","slug":"_2-1-整形类型","link":"#_2-1-整形类型","children":[]},{"level":3,"title":"2.2 浮点类型","slug":"_2-2-浮点类型","link":"#_2-2-浮点类型","children":[]},{"level":3,"title":"2.3 字符类型","slug":"_2-3-字符类型","link":"#_2-3-字符类型","children":[]},{"level":3,"title":"2.4 布尔类型","slug":"_2-4-布尔类型","link":"#_2-4-布尔类型","children":[]},{"level":3,"title":"2.5 存储类别说明符","slug":"_2-5-存储类别说明符","link":"#_2-5-存储类别说明符","children":[]}]},{"level":2,"title":"3.获取数据的存储大小","slug":"_3-获取数据的存储大小","link":"#_3-获取数据的存储大小","children":[]},{"level":2,"title":"4.数据类型转换","slug":"_4-数据类型转换","link":"#_4-数据类型转换","children":[{"level":3,"title":"4.1 隐式类型转换","slug":"_4-1-隐式类型转换","link":"#_4-1-隐式类型转换","children":[]},{"level":3,"title":"4.2 显示类型转换","slug":"_4-2-显示类型转换","link":"#_4-2-显示类型转换","children":[]}]},{"level":2,"title":"5.大小端存储","slug":"_5-大小端存储","link":"#_5-大小端存储","children":[]}],"git":{},"readingTime":{"minutes":17.56,"words":5267},"filePathRelative":"编程学习/1.C语言/第四章：二进制与数据类型.md","localizedDate":"2024年1月4日","autoDesc":true,"excerpt":"\\n<h2>1.二进制</h2>\\n<h3>1.1 进制</h3>\\n<p><strong>计算机世界中只有二进制，所以计算机中存储和运算的所有数据都要转为二进制。包括数字、字符、图片、声音、视频等</strong></p>\\n<p><strong>（1）常见进制介绍</strong></p>\\n<blockquote>\\n<p><strong>（1）二进制：0、1，满2进1<br>\\n（2）十进制：0 - 9，满10进1<br>\\n（3）十六进制：0 - 9及A-F，满16进1。十六进制中，除了 0 到 9 十个数字外，还引入了字母，以便表示超过9的值。字母A对应十进制的10，字母B对应十进制的11，字母 C、D、E、F 分别对应十进制的 12、13、14、15</strong></p>\\n</blockquote>"}');export{W as comp,$ as data};
