import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as p}from"./app-Dezzdk4T.js";const t="/assets/1.C__%E5%9F%BA%E7%A1%80-BZQYAtCr.png",e={},o=p('<h1 id="第一章-c-基础" tabindex="-1"><a class="header-anchor" href="#第一章-c-基础"><span>第一章：C++基础</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：JimBo (1353429820@qq.com)</span>
<span class="token comment">//  Filename：main</span>
<span class="token comment">//  Date：2024/1/14</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>

<span class="token comment">//1.命名空间的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//单独命名空间</span>
namespace A
<span class="token punctuation">{</span>
        <span class="token comment">//命名空间可以定义变量、函数、类型</span>
        <span class="token keyword">int</span> num<span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//嵌套命名空间、同名命名空间会合并</span>
namespace A
<span class="token punctuation">{</span>
        namespace B<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>



<span class="token comment">//1.命名空间的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
namespace A
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

namespace B
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
using B<span class="token operator">::</span>num2<span class="token punctuation">;</span>

namespace C
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
using namespace C<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;普通调用A空间成员，num1值为：&quot;</span><span class="token operator">&lt;&lt;</span> A<span class="token operator">::</span>num1 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token comment">//普通调用成员</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;部分释放B空间成员，num2值为：&quot;</span><span class="token operator">&lt;&lt;</span> num2 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>   <span class="token comment">//部分释放成员</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;全部释放C空间成员，num3值为：&quot;</span><span class="token operator">&lt;&lt;</span> num3 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>   <span class="token comment">//全部释放成员</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
        运行结果：
                普通调用A空间成员，num1值为：1
                部分释放B空间成员，num2值为：2
                全部释放C空间成员，num3值为：1
*/</span>


<span class="token comment">//3.C++输入与输出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span><span class="token comment">//释放c++标准库std</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a的值为：&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;f的值为：&quot;</span> <span class="token operator">&lt;&lt;</span> f <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
        运行结果：
               a的值为：3
               f的值为：3.14159  编译器默认float类型显示6位有效数字，double为11位有效数字
*/</span>


<span class="token comment">//4.C++缺省参数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;全缺省参数时&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x的值为：&quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;y的值为：&quot;</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;z的值为：&quot;</span> <span class="token operator">&lt;&lt;</span> z <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;半缺省参数时&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x的值为：&quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;y的值为：&quot;</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;z的值为：&quot;</span> <span class="token operator">&lt;&lt;</span> z <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">func2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
        运行结果：
                 全缺省参数时
                 x的值为：0
                 y的值为：1
                 z的值为：2
                 半缺省参数时
                 x的值为：5
                 y的值为：4
                 z的值为：2
*/</span>


<span class="token comment">//5.C++函数重载</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token comment">//注意：重载函数，同一作用域下，函数名相同，参数不同(类型、顺序、个数)，与返回值类型无关</span>
<span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment">//原函数Add</span>
<span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token comment">//Add重载函数</span>
<span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
        运行结果：
                3
                3.3
*/</span>

<span class="token comment">//6.C++引用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token operator">&amp;</span> num1 <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token operator">&amp;</span> num2 <span class="token operator">=</span> x<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x：&quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;num1：&quot;</span> <span class="token operator">&lt;&lt;</span> num1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;num2：&quot;</span> <span class="token operator">&lt;&lt;</span> num2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
        运行结果：
                x：0
                num1：0
                num2：0
*/</span>





<span class="token comment">//6.C++常引用权限问题</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token comment">//常引用权限问题：</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token comment">//取别名原则：对原引用变量，权限只能缩小，不能放大</span>
        <span class="token comment">//注意：临时变量具有常性，要用const+引用</span>

        <span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//常引用时，赋值是0先拷贝给临时变量，临时变量在赋值给x。因为常变量只能读，不能写</span>
        <span class="token comment">//int&amp; tmp=x;该语句编译错误，因为x为常量,权限放大了</span>

        <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> tmp <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//同一权限级</span>
        <span class="token comment">//int&amp; num=0;该语句编译错误，因为0为常量  权限放大了</span>
        <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token number">1.234</span><span class="token punctuation">;</span>
        <span class="token comment">//int&amp; num2=y;该语句编译错误，因为类型不同，引用要求类型相同，常值具有常性const</span>

        <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> num2 <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token comment">//正确，因为底层实现是y先赋值给一个临时变量，再让临时变量赋值给num2，临时变量有常性，所以引用</span>
        <span class="token comment">//必须加const---临时变量问题也解释了为什么nums2的地址和y的地址不一样，nums2存的应该是临时</span>
        <span class="token comment">//变量的地址</span>

        <span class="token keyword">int</span> f <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token comment">//正确，因为f和y没有使用指针和引用，不会改变原值，所以不加const也可以</span>
<span class="token punctuation">}</span>


<span class="token comment">//6.C++常引用使用场景</span>
<span class="token comment">//1.做参数---代替指针使用---输出型参数、减少拷贝、提高效率</span>
<span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token punctuation">;</span>
        x <span class="token operator">=</span> y<span class="token punctuation">;</span>
        y <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//2.做返回值---变量出了函数还在用，则使用引用做返回值---其实就是&amp;必须有目标变量在才能用，否则目标变量没了，还用它的地址，不就是野指针了吗</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//static只会初始化一次</span>
        n<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">//int&amp;相当于返回的n的别名，而不是开一个临时变量进行值拷贝</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//9.C++关键字auto</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//错误使用：</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//编译错误，auto不能声明数组</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> xx <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">auto</span> xxx <span class="token operator">=</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> xxxx <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//auto xxxxx;编译错误，使用auto必须初始化</span>
        <span class="token comment">//typeid(x).name  输出x的类型名字</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">typeid</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//int</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">typeid</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//char</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">typeid</span><span class="token punctuation">(</span>xxxx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//int</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
        运行结果：
                int
                char
                int
*/</span>


<span class="token comment">//10.C++范围for循环</span>
<span class="token comment">//普通for遍历</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
                
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> j <span class="token operator">=</span> a<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>      
<span class="token punctuation">}</span>

<span class="token comment">//范围for遍历：自动获取array中的数据，赋值给e，自动判断结束</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> aa<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">//auto&amp;与auto的在for遍历中的区别</span>

        <span class="token comment">//auto---相当于操作的是临时变量(拷贝的)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> e <span class="token operator">:</span> a<span class="token punctuation">)</span>
                e <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> e <span class="token operator">:</span> a<span class="token punctuation">)</span>
                cout <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span><span class="token comment">//还是打印的1 2 3 4 5 6 7---原因：把a的元素赋值给e相当于形参的改变不影响实参</span>

        <span class="token comment">//auto&amp;---相当于操作的变量别名</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> ee <span class="token operator">:</span> aa<span class="token punctuation">)</span>
                ee <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> ee <span class="token operator">:</span> aa<span class="token punctuation">)</span>
                cout <span class="token operator">&lt;&lt;</span> ee <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span><span class="token comment">//打印1 2 3 4 5 6</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//11.C++指针空值nullptr</span>
<span class="token comment">//NULL底层是一个宏，值为0，头文件为：#include&lt;stddef.h&gt;</span>

    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression"><span class="token constant">NULL</span></span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span>        <span class="token expression"><span class="token number">0</span></span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">//NULL可能被定义为字面常量0，或者无类型指针(void*)的常量</span>
<span class="token comment">//NULL和0的值一样就会引发问题--所以C++使用了nullptr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","1.C__基础.html.vue"]]),m=JSON.parse(`{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/1.C__%E5%9F%BA%E7%A1%80.html","title":"第一章：C++基础","lang":"zh-CN","frontmatter":{"date":"2024-02-01T00:00:00.000Z","order":2,"description":"第一章：C++基础 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/1.C__%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第一章：C++基础"}],["meta",{"property":"og:description","content":"第一章：C++基础 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章：C++基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":5.14,"words":1543},"filePathRelative":"编程学习/2.CPP/1.C++基础.md","localizedDate":"2024年2月1日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：JimBo (1353429820@qq.com)</span>\\n<span class=\\"token comment\\">//  Filename：main</span>\\n<span class=\\"token comment\\">//  Date：2024/1/14</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n<span class=\\"token comment\\">//1.命名空间的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//单独命名空间</span>\\nnamespace A\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//命名空间可以定义变量、函数、类型</span>\\n        <span class=\\"token keyword\\">int</span> num<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> num1<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> num2<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> num1 <span class=\\"token operator\\">+</span> num2<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//嵌套命名空间、同名命名空间会合并</span>\\nnamespace A\\n<span class=\\"token punctuation\\">{</span>\\n        namespace B<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n<span class=\\"token comment\\">//1.命名空间的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nnamespace A\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> num1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> num2 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> num1<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> num2<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> num1 <span class=\\"token operator\\">+</span> num2<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nnamespace B\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> num1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> num2 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> num1<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> num2<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> num1 <span class=\\"token operator\\">+</span> num2<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\nusing B<span class=\\"token operator\\">::</span>num2<span class=\\"token punctuation\\">;</span>\\n\\nnamespace C\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> num3 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> num4 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> num1<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> num2<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> num1 <span class=\\"token operator\\">+</span> num2<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\nusing namespace C<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token string\\">\\"普通调用A空间成员，num1值为：\\"</span><span class=\\"token operator\\">&lt;&lt;</span> A<span class=\\"token operator\\">::</span>num1 <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//普通调用成员</span>\\n        std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token string\\">\\"部分释放B空间成员，num2值为：\\"</span><span class=\\"token operator\\">&lt;&lt;</span> num2 <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//部分释放成员</span>\\n        std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token string\\">\\"全部释放C空间成员，num3值为：\\"</span><span class=\\"token operator\\">&lt;&lt;</span> num3 <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//全部释放成员</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n        运行结果：\\n                普通调用A空间成员，num1值为：1\\n                部分释放B空间成员，num2值为：2\\n                全部释放C空间成员，num3值为：1\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//3.C++输入与输出</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//释放c++标准库std</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">float</span> f <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.1415926</span><span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"a的值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> a <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"f的值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> f <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n        运行结果：\\n               a的值为：3\\n               f的值为：3.14159  编译器默认float类型显示6位有效数字，double为11位有效数字\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//4.C++缺省参数</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func1</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> y <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> z <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"全缺省参数时\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"x的值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> x <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"y的值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> y <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"z的值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> z <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func2</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> y <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> z <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"半缺省参数时\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"x的值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> x <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"y的值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> y <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"z的值为：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> z <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">func1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">func2</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n        运行结果：\\n                 全缺省参数时\\n                 x的值为：0\\n                 y的值为：1\\n                 z的值为：2\\n                 半缺省参数时\\n                 x的值为：5\\n                 y的值为：4\\n                 z的值为：2\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//5.C++函数重载</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//注意：重载函数，同一作用域下，函数名相同，参数不同(类型、顺序、个数)，与返回值类型无关</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//原函数Add</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">double</span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//Add重载函数</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1.1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2.2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n        运行结果：\\n                3\\n                3.3\\n*/</span>\\n\\n<span class=\\"token comment\\">//6.C++引用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> num1 <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> num2 <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"x：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> x <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"num1：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> num1 <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"num2：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> num2 <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n        运行结果：\\n                x：0\\n                num1：0\\n                num2：0\\n*/</span>\\n\\n\\n\\n\\n\\n<span class=\\"token comment\\">//6.C++常引用权限问题</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//常引用权限问题：</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//取别名原则：对原引用变量，权限只能缩小，不能放大</span>\\n        <span class=\\"token comment\\">//注意：临时变量具有常性，要用const+引用</span>\\n\\n        <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//常引用时，赋值是0先拷贝给临时变量，临时变量在赋值给x。因为常变量只能读，不能写</span>\\n        <span class=\\"token comment\\">//int&amp; tmp=x;该语句编译错误，因为x为常量,权限放大了</span>\\n\\n        <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> tmp <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//同一权限级</span>\\n        <span class=\\"token comment\\">//int&amp; num=0;该语句编译错误，因为0为常量  权限放大了</span>\\n        <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> num <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">double</span> y <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1.234</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//int&amp; num2=y;该语句编译错误，因为类型不同，引用要求类型相同，常值具有常性const</span>\\n\\n        <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> num2 <span class=\\"token operator\\">=</span> y<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//正确，因为底层实现是y先赋值给一个临时变量，再让临时变量赋值给num2，临时变量有常性，所以引用</span>\\n        <span class=\\"token comment\\">//必须加const---临时变量问题也解释了为什么nums2的地址和y的地址不一样，nums2存的应该是临时</span>\\n        <span class=\\"token comment\\">//变量的地址</span>\\n\\n        <span class=\\"token keyword\\">int</span> f <span class=\\"token operator\\">=</span> y<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//正确，因为f和y没有使用指针和引用，不会改变原值，所以不加const也可以</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//6.C++常引用使用场景</span>\\n<span class=\\"token comment\\">//1.做参数---代替指针使用---输出型参数、减少拷贝、提高效率</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> y<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> temp <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">;</span>\\n        x <span class=\\"token operator\\">=</span> y<span class=\\"token punctuation\\">;</span>\\n        y <span class=\\"token operator\\">=</span> temp<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//2.做返回值---变量出了函数还在用，则使用引用做返回值---其实就是&amp;必须有目标变量在才能用，否则目标变量没了，还用它的地址，不就是野指针了吗</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> <span class=\\"token function\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> n <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//static只会初始化一次</span>\\n        n<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//int&amp;相当于返回的n的别名，而不是开一个临时变量进行值拷贝</span>\\n        <span class=\\"token keyword\\">return</span> n<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//9.C++关键字auto</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//错误使用：</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">auto</span> b<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//编译错误，auto不能声明数组</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">auto</span> xx <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">auto</span> xxx <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'x'</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">auto</span> xxxx <span class=\\"token operator\\">=</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//auto xxxxx;编译错误，使用auto必须初始化</span>\\n        <span class=\\"token comment\\">//typeid(x).name  输出x的类型名字</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">typeid</span><span class=\\"token punctuation\\">(</span>xx<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//int</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">typeid</span><span class=\\"token punctuation\\">(</span>xxx<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//char</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">typeid</span><span class=\\"token punctuation\\">(</span>xxxx<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//int</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n        运行结果：\\n                int\\n                char\\n                int\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//10.C++范围for循环</span>\\n<span class=\\"token comment\\">//普通for遍历</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">7</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            a<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n                \\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> j <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> a <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">++</span>j<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>j <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>      \\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//范围for遍历：自动获取array中的数据，赋值给e，自动判断结束</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">7</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> aa<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">12</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">//auto&amp;与auto的在for遍历中的区别</span>\\n\\n        <span class=\\"token comment\\">//auto---相当于操作的是临时变量(拷贝的)</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span> e <span class=\\"token operator\\">:</span> a<span class=\\"token punctuation\\">)</span>\\n                e <span class=\\"token operator\\">/=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span> e <span class=\\"token operator\\">:</span> a<span class=\\"token punctuation\\">)</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> e <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//还是打印的1 2 3 4 5 6 7---原因：把a的元素赋值给e相当于形参的改变不影响实参</span>\\n\\n        <span class=\\"token comment\\">//auto&amp;---相当于操作的变量别名</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span><span class=\\"token operator\\">&amp;</span> ee <span class=\\"token operator\\">:</span> aa<span class=\\"token punctuation\\">)</span>\\n                ee <span class=\\"token operator\\">/=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span><span class=\\"token operator\\">&amp;</span> ee <span class=\\"token operator\\">:</span> aa<span class=\\"token punctuation\\">)</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> ee <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//打印1 2 3 4 5 6</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//11.C++指针空值nullptr</span>\\n<span class=\\"token comment\\">//NULL底层是一个宏，值为0，头文件为：#include&lt;stddef.h&gt;</span>\\n\\n    <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\"><span class=\\"token constant\\">NULL</span></span></span>\\n    <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifdef</span> <span class=\\"token expression\\">__cplusplus</span></span>\\n    <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">NULL</span>        <span class=\\"token expression\\"><span class=\\"token number\\">0</span></span></span>\\n    <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">else</span></span>\\n    <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">NULL</span>        <span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span></span></span>\\n    <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n    <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n\\n<span class=\\"token comment\\">//NULL可能被定义为字面常量0，或者无类型指针(void*)的常量</span>\\n<span class=\\"token comment\\">//NULL和0的值一样就会引发问题--所以C++使用了nullptr</span>\\n</code></pre></div>"}`);export{d as comp,m as data};
