import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as p}from"./app-Dezzdk4T.js";const t="/assets/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E8%A1%A8%E7%A4%BA-D847JcJ-.png",o="/assets/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-DE3ZBhiK.png",e="/assets/%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E7%A4%BA%E4%BE%8B-Dx2PwR-g.png",c="/assets/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9-CRjN1nWc.png",l="/assets/%E9%93%BE%E5%BC%8F%E5%9C%B0%E5%9D%80%E5%93%88%E5%B8%8C%E8%A1%A8-BtwOJir_.png",i="/assets/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B-Bd8YuQvh.png",u="/assets/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0-C9liIfbR.png",r="/assets/%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E6%83%85%E5%86%B5-ByfB8fDz.png",k="/assets/%E5%B8%B8%E8%A7%81%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95-CeaOmrev.png",d={},v=p('<h1 id="第六章-哈希表" tabindex="-1"><a class="header-anchor" href="#第六章-哈希表"><span>第六章：哈希表</span></a></h1><h2 id="_1-哈希表" tabindex="-1"><a class="header-anchor" href="#_1-哈希表"><span>1.哈希表</span></a></h2><p><strong>哈希表（hash table），又称散列表，它通过建立键 key 与值 value 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键 key ，则可以在 O（1）时间内获取对应的值value</strong></p><p><strong>在哈希表中进行增删查改的时间复杂度都是 O（1），非常高效</strong></p><p><strong>比如，给定n个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能，则可以采用下图所示的哈希表来实现</strong></p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_1-1-哈希表的简单实现" tabindex="-1"><a class="header-anchor" href="#_1-1-哈希表的简单实现"><span>1.1 哈希表的简单实现</span></a></h3><p><strong>我们先考虑最简单的情况，仅用一个数组来实现哈希表。在哈希表中，我们将数组中的每个空位称为桶（bucket），每个桶可存储一个键值对。因此，查询操作就是找到 key 对应的桶，并在桶中获取 value</strong></p><p><strong>那么，如何基于 key 定位对应的桶呢？这是通过哈希函数（hash function）实现的。哈希函数的作用是将一个较大的输入空间映射到一个较小的输出空间。在哈希表中，输入空间是所有 key ，输出空间是所有桶（数组索引）。换句话说，输入一个 key ，我们可以通过哈希函数得到该 key 对应的键值对在数组中的存储位置</strong></p><p><strong>输入一个 key ，哈希函数的计算过程分为以下两步：</strong></p><ul><li><strong>通过某种哈希算法 hash() 计算得到哈希值</strong></li><li><strong>将哈希值对桶数量（数组长度）capacity 取模，从而获取该 key 对应的数组索引 index</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">%</span> capacity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>随后，我们就可以利用 index 在哈希表中访问对应的桶，从而获取 value</strong></p><p><strong>设数组长度 capacity = 100、哈希算法 hash(key) = key ，易得哈希函数为 key % 100 。如下图以 key 学号和 value 姓名为例，展示了哈希函数的工作原理</strong></p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>以下代码实现了一个简单哈希表。其中，我们将 key 和 value 封装成一个类 Pair ，以表示键值对</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 键值对 int-&gt;string */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Pair<span class="token punctuation">;</span>

<span class="token comment">/* 基于数组实现的哈希表 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    Pair <span class="token operator">*</span>buckets<span class="token punctuation">[</span>HASHTABLE_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> ArrayHashMap<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
ArrayHashMap <span class="token operator">*</span><span class="token function">newArrayHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    ArrayHashMap <span class="token operator">*</span>hmap <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArrayHashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hmap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 析构函数 */</span>
<span class="token keyword">void</span> <span class="token function">delArrayHashMap</span><span class="token punctuation">(</span>ArrayHashMap <span class="token operator">*</span>hmap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASHTABLE_CAPACITY<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">free</span><span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 添加操作 */</span>
<span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>ArrayHashMap <span class="token operator">*</span>hmap<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    Pair <span class="token operator">*</span>Pair <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Pair<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Pair<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    Pair<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Pair<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> Pair<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除操作 */</span>
<span class="token keyword">void</span> <span class="token function">removeItem</span><span class="token punctuation">(</span>ArrayHashMap <span class="token operator">*</span>hmap<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 获取所有键值对 */</span>
<span class="token keyword">void</span> <span class="token function">pairSet</span><span class="token punctuation">(</span>ArrayHashMap <span class="token operator">*</span>hmap<span class="token punctuation">,</span> MapSet <span class="token operator">*</span>set<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    Pair <span class="token operator">*</span>entries<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* 统计有效键值对数量 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASHTABLE_CAPACITY<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            total<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    entries <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Pair<span class="token punctuation">)</span> <span class="token operator">*</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASHTABLE_CAPACITY<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            entries<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
            entries<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>entries<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    set<span class="token operator">-&gt;</span>set <span class="token operator">=</span> entries<span class="token punctuation">;</span>
    set<span class="token operator">-&gt;</span>len <span class="token operator">=</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 获取所有键 */</span>
<span class="token keyword">void</span> <span class="token function">keySet</span><span class="token punctuation">(</span>ArrayHashMap <span class="token operator">*</span>hmap<span class="token punctuation">,</span> MapSet <span class="token operator">*</span>set<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>keys<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* 统计有效键值对数量 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASHTABLE_CAPACITY<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            total<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    keys <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASHTABLE_CAPACITY<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
            index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    set<span class="token operator">-&gt;</span>set <span class="token operator">=</span> keys<span class="token punctuation">;</span>
    set<span class="token operator">-&gt;</span>len <span class="token operator">=</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 获取所有值 */</span>
<span class="token keyword">void</span> <span class="token function">valueSet</span><span class="token punctuation">(</span>ArrayHashMap <span class="token operator">*</span>hmap<span class="token punctuation">,</span> MapSet <span class="token operator">*</span>set<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>vals<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* 统计有效键值对数量 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASHTABLE_CAPACITY<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            total<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    vals <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASHTABLE_CAPACITY<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            vals<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hmap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    set<span class="token operator">-&gt;</span>set <span class="token operator">=</span> vals<span class="token punctuation">;</span>
    set<span class="token operator">-&gt;</span>len <span class="token operator">=</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 打印哈希表 */</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>ArrayHashMap <span class="token operator">*</span>hmap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    MapSet set<span class="token punctuation">;</span>
    <span class="token function">pairSet</span><span class="token punctuation">(</span>hmap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Pair <span class="token operator">*</span>entries <span class="token operator">=</span> <span class="token punctuation">(</span>Pair <span class="token operator">*</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span>set<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d -&gt; %s\\n&quot;</span><span class="token punctuation">,</span> entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-2-哈希冲突与扩容" tabindex="-1"><a class="header-anchor" href="#_1-2-哈希冲突与扩容"><span>1.2 哈希冲突与扩容</span></a></h3><p><strong>从本质上看，哈希函数的作用是将所有 key 构成的输入空间映射到数组所有索引构成的输出空间，而输入空间往往远大于输出空间。因此，理论上一定存在“多个输入对应相同输出”的情况</strong></p><p><strong>对于上述示例中的哈希函数，当输入的 key 后两位相同时，哈希函数的输出结果也相同。例如，查询学号为 12836 和 20336 的两个学生时，我们得到：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">12836</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">=</span> <span class="token number">36</span>
<span class="token number">20336</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">=</span> <span class="token number">36</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>比如，两个学号指向了同一个姓名，这显然是不对的。我们将这种多个输入对应同一输出的情况称为哈希冲突（hash collision）</strong></p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>容易想到，哈希表容量n越大，多个 key 被分配到同一个桶中的概率就越低，冲突就越少。因此，我们可以通过扩容哈希表来减少哈希冲突</strong></p><p><strong>比如，扩容前键值对 (136, A) 和 (236, D) 发生冲突，扩容后冲突消失</strong></p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>类似于数组扩容，哈希表扩容需将所有键值对从原哈希表迁移至新哈希表，非常耗时；并且由于哈希表容量 capacity 改变，我们需要通过哈希函数来重新计算所有键值对的存储位置，这进一步增加了扩容过程的计算开销。为此，编程语言通常会预留足够大的哈希表容量，防止频繁扩容</strong></p><p><strong>负载因子（load factor）是哈希表的一个重要概念，其定义为哈希表的元素数量除以桶数量，用于衡量哈希冲突的严重程度，也常作为哈希表扩容的触发条件，例如当负载因子超过0.75时，系统会将哈希表扩容至原先的2倍</strong></p><hr><h2 id="_2-哈希冲突" tabindex="-1"><a class="header-anchor" href="#_2-哈希冲突"><span>2.哈希冲突</span></a></h2><p><strong>通常情况下哈希函数的输入空间远大于输出空间，因此理论上哈希冲突是不可避免的。比如，输入空间为全体整数，输出空间为数组容量大小，则必然有多个整数映射至同一桶索引</strong></p><p><strong>哈希冲突会导致查询结果错误，严重影响哈希表的可用性。为了解决该问题，每当遇到哈希冲突时，我们就进行哈希表扩容，直至冲突消失为止。此方法简单粗暴且有效，但效率太低，因为哈希表扩容需要进行大量的数据搬运与哈希值计算。为了提升效率，我们可以采用以下策略</strong></p><ul><li><strong>改良哈希表数据结构，使得哈希表可以在出现哈希冲突时正常工作</strong></li><li><strong>仅在必要时，即当哈希冲突比较严重时，才执行扩容操作</strong></li></ul><p><strong>哈希表的结构改良方法主要包括“链式地址”和“开放寻址”</strong></p><hr><h3 id="_2-1-链式地址" tabindex="-1"><a class="header-anchor" href="#_2-1-链式地址"><span>2.1 链式地址</span></a></h3><p><strong>在原始哈希表中，每个桶仅能存储一个键值对。链式地址（separate chaining）将单个元素转换为链表，将键值对作为链表节点，将所有发生冲突的键值对都存储在同一链表中。图下图展示了一个链式地址哈希表的例子</strong></p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>基于链式地址实现的哈希表的操作方法发生了以下变化：</strong></p><ul><li><strong>查询元素：输入 key ，经过哈希函数得到桶索引，即可访问链表头节点，然后遍历链表并对比 key 以查找目标键值对</strong></li><li><strong>添加元素：首先通过哈希函数访问链表头节点，然后将节点（键值对）添加到链表中</strong></li><li><strong>删除元素：根据哈希函数的结果访问链表头部，接着遍历链表以查找目标节点并将其删除</strong></li></ul><p><strong>链式地址存在以下局限性：</strong></p><ul><li><strong>占用空间增大：链表包含节点指针，它相比数组更加耗费内存空间</strong></li><li><strong>查询效率降低：因为需要线性遍历链表来查找对应元素</strong></li></ul><p><strong>以下代码给出了链式地址哈希表的简单实现，需要注意两点：</strong></p><ul><li><strong>使用列表（动态数组）代替链表，从而简化代码。在这种设定下，哈希表（数组）包含多个桶，每个桶都是一个列表</strong></li><li><strong>以下实现包含哈希表扩容方法。当负载因子超过0.75时，我们将哈希表扩容至原先的2倍</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 链表节点 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> 
<span class="token punctuation">{</span>
    Pair <span class="token operator">*</span>pair<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">;</span>

<span class="token comment">/* 链式地址哈希表 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>         <span class="token comment">// 键值对数量</span>
    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>     <span class="token comment">// 哈希表容量</span>
    <span class="token keyword">double</span> loadThres<span class="token punctuation">;</span> <span class="token comment">// 触发扩容的负载因子阈值</span>
    <span class="token keyword">int</span> extendRatio<span class="token punctuation">;</span>  <span class="token comment">// 扩容倍数</span>
    Node <span class="token operator">*</span><span class="token operator">*</span>buckets<span class="token punctuation">;</span>   <span class="token comment">// 桶数组</span>
<span class="token punctuation">}</span> HashMapChaining<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
HashMapChaining <span class="token operator">*</span><span class="token function">newHashMapChaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    HashMapChaining <span class="token operator">*</span>hashMap <span class="token operator">=</span> <span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashMapChaining<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>capacity <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>loadThres <span class="token operator">=</span> <span class="token number">0.75</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>extendRatio <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>buckets <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>capacity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> hashMap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 析构函数 */</span>
<span class="token keyword">void</span> <span class="token function">delHashMapChaining</span><span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span>hashMap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Node <span class="token operator">*</span>cur <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            Node <span class="token operator">*</span>tmp <span class="token operator">=</span> cur<span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 哈希函数 */</span>
<span class="token keyword">int</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> key <span class="token operator">%</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 负载因子 */</span>
<span class="token keyword">double</span> <span class="token function">loadFactor</span><span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span>hashMap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>hashMap<span class="token operator">-&gt;</span>size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 查询操作 */</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get</span><span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历桶，若找到 key ，则返回对应 val</span>
    Node <span class="token operator">*</span>cur <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 若未找到 key ，则返回空字符串</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 添加操作 */</span>
<span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 当负载因子超过阈值时，执行扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">loadFactor</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> hashMap<span class="token operator">-&gt;</span>loadThres<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">extend</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历桶，若遇到指定 key ，则更新对应 val 并返回</span>
    Node <span class="token operator">*</span>cur <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 若遇到指定 key ，则更新对应 val 并返回</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 若无该 key ，则将键值对添加至链表头部</span>
    Pair <span class="token operator">*</span>newPair <span class="token operator">=</span> <span class="token punctuation">(</span>Pair <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Pair<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newPair<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>newPair<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newNode<span class="token operator">-&gt;</span>pair <span class="token operator">=</span> newPair<span class="token punctuation">;</span>
    newNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 扩容哈希表 */</span>
<span class="token keyword">void</span> <span class="token function">extend</span><span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span>hashMap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 暂存原哈希表</span>
    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>
    Node <span class="token operator">*</span><span class="token operator">*</span>oldBuckets <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">;</span>
    <span class="token comment">// 初始化扩容后的新哈希表</span>
    hashMap<span class="token operator">-&gt;</span>capacity <span class="token operator">*=</span> hashMap<span class="token operator">-&gt;</span>extendRatio<span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>buckets <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>capacity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    hashMap<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 将键值对从原哈希表搬运至新哈希表</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldCapacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Node <span class="token operator">*</span>cur <span class="token operator">=</span> oldBuckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">put</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>key<span class="token punctuation">,</span> cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Node <span class="token operator">*</span>temp <span class="token operator">=</span> cur<span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token comment">// 释放内存</span>
            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">free</span><span class="token punctuation">(</span>oldBuckets<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除操作 */</span>
<span class="token keyword">void</span> <span class="token function">removeItem</span><span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>cur <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 从中删除键值对</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
            <span class="token keyword">else</span> 
            <span class="token punctuation">{</span>
                hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 释放内存</span>
            <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            hashMap<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 打印哈希表 */</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>HashMapChaining <span class="token operator">*</span>hashMap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Node <span class="token operator">*</span>cur <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d -&gt; %s, &quot;</span><span class="token punctuation">,</span> cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>key<span class="token punctuation">,</span> cur<span class="token operator">-&gt;</span>pair<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;]\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>值得注意的是，当链表很长时，查询效率O（n）很差，此时可以将链表转换为AVL树或红黑树，从而将查询操作的时间复杂度优化至O(logn)</strong></p></blockquote><hr><h3 id="_2-2-开放寻址" tabindex="-1"><a class="header-anchor" href="#_2-2-开放寻址"><span>2.2 开放寻址</span></a></h3><p><strong>开放寻址（open addressing）不引入额外的数据结构，而是通过“多次探测”来处理哈希冲突，探测方式主要包括线性探测、平方探测和多次哈希等</strong></p><h4 id="_2-2-1-线性探测" tabindex="-1"><a class="header-anchor" href="#_2-2-1-线性探测"><span>2.2.1 线性探测</span></a></h4><p><strong>线性探测采用固定步长的线性搜索来进行探测，其操作方法与普通哈希表有所不同</strong></p><ul><li><strong>插入元素：通过哈希函数计算桶索引，若发现桶内已有元素，则从冲突位置向后线性遍历（步长通常为1 ），直至找到空桶，将元素插入其中</strong></li><li><strong>查找元素：若发现哈希冲突，则使用相同步长向后进行线性遍历，直到找到对应元素，返回 value 即可；如果遇到空桶，说明目标元素不在哈希表中，返回 None</strong></li></ul><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>上图展示了开放寻址（线性探测）哈希表的键值对分布。根据此哈希函数，最后两位相同的 key 都会被映射到相同的桶。而通过线性探测，它们被依次存储在该桶以及之下的桶中</strong></p><p><strong>然而，线性探测容易产生“聚集现象”。具体来说，数组中连续被占用的位置越长，这些连续位置发生哈希冲突的可能性越大，从而进一步促使该位置的聚堆生长，形成恶性循环，最终导致增删查改操作效率劣化</strong></p><p><strong>值得注意的是，我们不能在开放寻址哈希表中直接删除元素。这是因为删除元素会在数组内产生一个空桶 None ，而当查询元素时，线性探测到该空桶就会返回，因此在该空桶之下的元素都无法再被访问到，程序可能误判这些元素不存在，如下图所示：</strong></p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>为了解决该问题，我们可以采用懒删除（lazy deletion）机制：它不直接从哈希表中移除元素，而是利用一个常量 TOMBSTONE 来标记这个桶。在该机制下，None 和 TOMBSTONE 都代表空桶，都可以放置键值对。但不同的是，线性探测到 TOMBSTONE 时应该继续遍历，因为其之下可能还存在键值对</strong></p></blockquote><p><strong>然而，懒删除可能会加速哈希表的性能退化。这是因为每次删除操作都会产生一个删除标记，随着 TOMBSTONE 的增加，搜索时间也会增加，因为线性探测可能需要跳过多个 TOMBSTONE 才能找到目标元素</strong></p><p><strong>为此，考虑在线性探测中记录遇到的首个 TOMBSTONE 的索引，并将搜索到的目标元素与该 TOMBSTONE 交换位置。这样做的好处是当每次查询或添加元素时，元素会被移动至距离理想位置（探测起始点）更近的桶，从而优化查询效率</strong></p><p><strong>以下代码实现了一个包含懒删除的开放寻址（线性探测）哈希表。为了更加充分地使用哈希表的空间，我们将哈希表看作一个“环形数组”，当越过数组尾部时，回到头部继续遍历</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 开放寻址哈希表 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>         <span class="token comment">// 键值对数量</span>
    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>     <span class="token comment">// 哈希表容量</span>
    <span class="token keyword">double</span> loadThres<span class="token punctuation">;</span> <span class="token comment">// 触发扩容的负载因子阈值</span>
    <span class="token keyword">int</span> extendRatio<span class="token punctuation">;</span>  <span class="token comment">// 扩容倍数</span>
    Pair <span class="token operator">*</span><span class="token operator">*</span>buckets<span class="token punctuation">;</span>   <span class="token comment">// 桶数组</span>
    Pair <span class="token operator">*</span>TOMBSTONE<span class="token punctuation">;</span>  <span class="token comment">// 删除标记</span>
<span class="token punctuation">}</span> HashMapOpenAddressing<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
HashMapOpenAddressing <span class="token operator">*</span><span class="token function">newHashMapOpenAddressing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    HashMapOpenAddressing <span class="token operator">*</span>hashMap <span class="token operator">=</span> <span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashMapOpenAddressing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>capacity <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>loadThres <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>extendRatio <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>buckets <span class="token operator">=</span> <span class="token punctuation">(</span>Pair <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Pair <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>TOMBSTONE <span class="token operator">=</span> <span class="token punctuation">(</span>Pair <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Pair<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token string">&quot;-1&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> hashMap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 析构函数 */</span>
<span class="token keyword">void</span> <span class="token function">delHashMapOpenAddressing</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Pair <span class="token operator">*</span>pair <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pair <span class="token operator">!=</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pair<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 哈希函数 */</span>
<span class="token keyword">int</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> key <span class="token operator">%</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 负载因子 */</span>
<span class="token keyword">double</span> <span class="token function">loadFactor</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>hashMap<span class="token operator">-&gt;</span>size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 搜索 key 对应的桶索引 */</span>
<span class="token keyword">int</span> <span class="token function">findBucket</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> firstTombstone <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 线性探测，当遇到空桶时跳出</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 若遇到 key ，返回对应的桶索引</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 若之前遇到了删除标记，则将键值对移动至该索引处</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstTombstone <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>firstTombstone<span class="token punctuation">]</span> <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
                hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">;</span>
                <span class="token keyword">return</span> firstTombstone<span class="token punctuation">;</span> <span class="token comment">// 返回移动后的桶索引</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> index<span class="token punctuation">;</span> <span class="token comment">// 返回桶索引</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 记录遇到的首个删除标记</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstTombstone <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            firstTombstone <span class="token operator">=</span> index<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 计算桶索引，越过尾部则返回头部</span>
        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 若 key 不存在，则返回添加点的索引</span>
    <span class="token keyword">return</span> firstTombstone <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> index <span class="token operator">:</span> firstTombstone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 查询操作 */</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 搜索 key 对应的桶索引</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findBucket</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 若找到键值对，则返回对应 val</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 若键值对不存在，则返回空字符串</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 添加操作 */</span>
<span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 当负载因子超过阈值时，执行扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">loadFactor</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> hashMap<span class="token operator">-&gt;</span>loadThres<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">extend</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 搜索 key 对应的桶索引</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findBucket</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 若找到键值对，则覆盖 val 并返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 若键值对不存在，则添加该键值对</span>
    Pair <span class="token operator">*</span>pair <span class="token operator">=</span> <span class="token punctuation">(</span>Pair <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Pair<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    pair<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>pair<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除操作 */</span>
<span class="token keyword">void</span> <span class="token function">removeItem</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 搜索 key 对应的桶索引</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findBucket</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 若找到键值对，则用删除标记覆盖它</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Pair <span class="token operator">*</span>pair <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>pair<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">;</span>
        hashMap<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 扩容哈希表 */</span>
<span class="token keyword">void</span> <span class="token function">extend</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 暂存原哈希表</span>
    Pair <span class="token operator">*</span><span class="token operator">*</span>bucketsTmp <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">;</span>
    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>
    <span class="token comment">// 初始化扩容后的新哈希表</span>
    hashMap<span class="token operator">-&gt;</span>capacity <span class="token operator">*=</span> hashMap<span class="token operator">-&gt;</span>extendRatio<span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>buckets <span class="token operator">=</span> <span class="token punctuation">(</span>Pair <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Pair <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hashMap<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 将键值对从原哈希表搬运至新哈希表</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldCapacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Pair <span class="token operator">*</span>pair <span class="token operator">=</span> bucketsTmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pair <span class="token operator">!=</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">put</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> pair<span class="token operator">-&gt;</span>key<span class="token punctuation">,</span> pair<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pair<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>bucketsTmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 打印哈希表 */</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>HashMapOpenAddressing <span class="token operator">*</span>hashMap<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashMap<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Pair <span class="token operator">*</span>pair <span class="token operator">=</span> hashMap<span class="token operator">-&gt;</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">==</span> hashMap<span class="token operator">-&gt;</span>TOMBSTONE<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;TOMBSTONE\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d -&gt; %s\\n&quot;</span><span class="token punctuation">,</span> pair<span class="token operator">-&gt;</span>key<span class="token punctuation">,</span> pair<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_2-2-2-平方探测" tabindex="-1"><a class="header-anchor" href="#_2-2-2-平方探测"><span>2.2.2 平方探测</span></a></h4><p><strong>平方探测与线性探测类似，都是开放寻址的常见策略之一。当发生冲突时，平方探测不是简单地跳过一个固定的步数，而是跳过“探测次数的平方”的步数，即1，4，9，...步</strong></p><p><strong>平方探测主要具有以下优势：</strong></p><ul><li><strong>平方探测通过跳过探测次数平方的距离，试图缓解线性探测的聚集效应</strong></li><li><strong>平方探测会跳过更大的距离来寻找空位置，有助于数据分布得更加均匀</strong></li></ul><blockquote><p><strong>然而，平方探测并不是完美的</strong><br><br><strong>仍然存在聚集现象，即某些位置比其他位置更容易被占用</strong><br><br><strong>由于平方的增长，平方探测可能不会探测整个哈希表，这意味着即使哈希表中有空桶，平方探测也可能无法访问到它</strong></p></blockquote><hr><h4 id="_2-2-3-多次哈希" tabindex="-1"><a class="header-anchor" href="#_2-2-3-多次哈希"><span>2.2.3 多次哈希</span></a></h4><p><strong>顾名思义，多次哈希方法使用多个哈希函数f1(x)、f2(x)、f3(x)...进行探测</strong></p><ul><li><strong>插入元素：若哈希函数f1(x)出现冲突，则尝试f2(x)，以此类推，直到找到空位后插入元素</strong></li><li><strong>查找元素：在相同的哈希函数顺序下进行查找，直到找到目标元素时返回；若遇到空位或已尝试所有哈希函数，说明哈希表中不存在该元素，则返回 None</strong></li></ul><p><strong>与线性探测相比，多次哈希方法不易产生聚集，但多个哈希函数会带来额外的计算量</strong></p><hr><h2 id="_3-哈希算法" tabindex="-1"><a class="header-anchor" href="#_3-哈希算法"><span>3.哈希算法</span></a></h2><p><strong>前面介绍了哈希表的工作原理和哈希冲突的处理方法。然而无论是开放寻址还是链式地址，它们只能保证哈希表可以在发生冲突时正常工作，而无法减少哈希冲突的发生</strong></p><p><strong>如果哈希冲突过于频繁，哈希表的性能则会急剧劣化。如图下图所示，对于链式地址哈希表，理想情况下键值对均匀分布在各个桶中，达到最佳查询效率；最差情况下所有键值对都存储到同一个桶中，时间复杂度退化至O(n)</strong></p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>键值对的分布情况由哈希函数决定。回忆哈希函数的计算步骤，先计算哈希值，再对数组长度取模：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">%</span> capacity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>观察以上公式，当哈希表容量 capacity 固定时，哈希算法 hash() 决定了输出值，进而决定了键值对在哈希表中的分布情况</strong></p><p><strong>这意味着，为了降低哈希冲突的发生概率，我们应当将注意力集中在哈希算法 hash() 的设计上</strong></p><hr><h3 id="_3-1-哈希算法的目标" tabindex="-1"><a class="header-anchor" href="#_3-1-哈希算法的目标"><span>3.1 哈希算法的目标</span></a></h3><p><strong>为了实现“既快又稳”的哈希表数据结构，哈希算法应具备以下特点：</strong></p><ul><li><strong>确定性：对于相同的输入，哈希算法应始终产生相同的输出。这样才能确保哈希表是可靠的</strong></li><li><strong>效率高：计算哈希值的过程应该足够快。计算开销越小，哈希表的实用性越高</strong></li><li><strong>均匀分布：哈希算法应使得键值对均匀分布在哈希表中。分布越均匀，哈希冲突的概率就越低</strong></li></ul><p><strong>实际上，哈希算法除了可以用于实现哈希表，还广泛应用于其他领域中</strong></p><ul><li><strong>密码存储：为了保护用户密码的安全，系统通常不会直接存储用户的明文密码，而是存储密码的哈希值。当用户输入密码时，系统会对输入的密码计算哈希值，然后与存储的哈希值进行比较。如果两者匹配，那么密码就被视为正确</strong></li><li><strong>数据完整性检查：数据发送方可以计算数据的哈希值并将其一同发送；接收方可以重新计算接收到的数据的哈希值，并与接收到的哈希值进行比较。如果两者匹配，那么数据就被视为完整</strong></li></ul><p><strong>对于密码学的相关应用，为了防止从哈希值推导出原始密码等逆向工程，哈希算法需要具备更高等级的安全特性</strong></p><ul><li><strong>单向性：无法通过哈希值反推出关于输入数据的任何信息</strong></li><li><strong>抗碰撞性：应当极难找到两个不同的输入，使得它们的哈希值相同</strong></li><li><strong>雪崩效应：输入的微小变化应当导致输出的显著且不可预测的变化</strong></li></ul><blockquote><p><strong>请注意，“均匀分布”与“抗碰撞性”是两个独立的概念，满足均匀分布不一定满足抗碰撞性。例如，在随机输入 key 下，哈希函数 key % 100 可以产生均匀分布的输出。然而该哈希算法过于简单，所有后两位相等的 key 的输出都相同，因此我们可以很容易地从哈希值反推出可用的 key ，从而破解密码</strong></p></blockquote><hr><h3 id="_3-2-哈希算法的设计" tabindex="-1"><a class="header-anchor" href="#_3-2-哈希算法的设计"><span>3.2 哈希算法的设计</span></a></h3><p><strong>哈希算法的设计是一个需要考虑许多因素的复杂问题。然而对于某些要求不高的场景，我们也能设计一些简单的哈希算法</strong></p><ul><li><strong>加法哈希：对输入的每个字符的 ASCII 码进行相加，将得到的总和作为哈希值</strong></li><li><strong>乘法哈希：利用乘法的不相关性，每轮乘以一个常数，将各个字符的 ASCII 码累积到哈希值中</strong></li><li><strong>异或哈希：将输入数据的每个元素通过异或操作累积到一个哈希值中</strong></li><li><strong>旋转哈希：将每个字符的 ASCII 码累积到一个哈希值中，每次累积之前都会对哈希值进行旋转操作</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 加法哈希 */</span>
<span class="token keyword">int</span> <span class="token function">addHash</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> MODULUS <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MODULUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 乘法哈希 */</span>
<span class="token keyword">int</span> <span class="token function">mulHash</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> MODULUS <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        hash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MODULUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 异或哈希 */</span>
<span class="token keyword">int</span> <span class="token function">xorHash</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> MODULUS <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        hash <span class="token operator">^=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> hash <span class="token operator">&amp;</span> MODULUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 旋转哈希 */</span>
<span class="token keyword">int</span> <span class="token function">rotHash</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> MODULUS <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        hash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hash <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>hash <span class="token operator">&gt;&gt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MODULUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>观察发现，每种哈希算法的最后一步都是对大质数1000000007取模，以确保哈希值在合适的范围内。值得思考的是，为什么要强调对质数取模，或者说对合数取模的弊端是什么？这是一个有趣的问题</strong><br><br><strong>先抛出结论：使用大质数作为模数，可以最大化地保证哈希值的均匀分布。因为质数不与其他数字存在公约数，可以减少因取模操作而产生的周期性模式，从而避免哈希冲突</strong><br><br><strong>总而言之，我们通常选取质数作为模数，并且这个质数最好足够大，以尽可能消除周期性模式，提升哈希算法的稳健性</strong></p></blockquote><hr><h3 id="_3-3-常见哈希算法" tabindex="-1"><a class="header-anchor" href="#_3-3-常见哈希算法"><span>3.3 常见哈希算法</span></a></h3><p><strong>不难发现，以上介绍的简单哈希算法都比较“脆弱”，远远没有达到哈希算法的设计目标。例如，由于加法和异或满足交换律，因此加法哈希和异或哈希无法区分内容相同但顺序不同的字符串，这可能会加剧哈希冲突，并引起一些安全问题</strong></p><p><strong>在实际中，我们通常会用一些标准哈希算法，例如 MD5、SHA-1、SHA-2 和 SHA-3 等。它们可以将任意长度的输入数据映射到恒定长度的哈希值</strong></p><p><strong>近一个世纪以来，哈希算法处在不断升级与优化的过程中。一部分研究人员努力提升哈希算法的性能，另一部分研究人员和黑客则致力于寻找哈希算法的安全性问题。下图展示了在实际应用中常见的哈希算法</strong></p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',105),m=[v];function b(h,g){return s(),a("div",null,m)}const w=n(d,[["render",b],["__file","6.哈希表.html.vue"]]),M=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/6.%E5%93%88%E5%B8%8C%E8%A1%A8.html","title":"第六章：哈希表","lang":"zh-CN","frontmatter":{"date":"2024-03-06T00:00:00.000Z","order":6,"description":"第六章：哈希表 1.哈希表 哈希表（hash table），又称散列表，它通过建立键 key 与值 value 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键 key ，则可以在 O（1）时间内获取对应的值value 在哈希表中进行增删查改的时间复杂度都是 O（1），非常高效 比如，给定n个学生，每个学生都有“姓名”和“学号”两项数...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/6.%E5%93%88%E5%B8%8C%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第六章：哈希表"}],["meta",{"property":"og:description","content":"第六章：哈希表 1.哈希表 哈希表（hash table），又称散列表，它通过建立键 key 与值 value 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键 key ，则可以在 O（1）时间内获取对应的值value 在哈希表中进行增删查改的时间复杂度都是 O（1），非常高效 比如，给定n个学生，每个学生都有“姓名”和“学号”两项数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-03-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第六章：哈希表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.哈希表","slug":"_1-哈希表","link":"#_1-哈希表","children":[{"level":3,"title":"1.1 哈希表的简单实现","slug":"_1-1-哈希表的简单实现","link":"#_1-1-哈希表的简单实现","children":[]},{"level":3,"title":"1.2 哈希冲突与扩容","slug":"_1-2-哈希冲突与扩容","link":"#_1-2-哈希冲突与扩容","children":[]}]},{"level":2,"title":"2.哈希冲突","slug":"_2-哈希冲突","link":"#_2-哈希冲突","children":[{"level":3,"title":"2.1 链式地址","slug":"_2-1-链式地址","link":"#_2-1-链式地址","children":[]},{"level":3,"title":"2.2 开放寻址","slug":"_2-2-开放寻址","link":"#_2-2-开放寻址","children":[]}]},{"level":2,"title":"3.哈希算法","slug":"_3-哈希算法","link":"#_3-哈希算法","children":[{"level":3,"title":"3.1 哈希算法的目标","slug":"_3-1-哈希算法的目标","link":"#_3-1-哈希算法的目标","children":[]},{"level":3,"title":"3.2 哈希算法的设计","slug":"_3-2-哈希算法的设计","link":"#_3-2-哈希算法的设计","children":[]},{"level":3,"title":"3.3 常见哈希算法","slug":"_3-3-常见哈希算法","link":"#_3-3-常见哈希算法","children":[]}]}],"git":{},"readingTime":{"minutes":21.98,"words":6594},"filePathRelative":"算法学习/1.算法知识/6.哈希表.md","localizedDate":"2024年3月6日","autoDesc":true,"excerpt":"\\n<h2>1.哈希表</h2>\\n<p><strong>哈希表（hash table），又称散列表，它通过建立键 key 与值 value 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键 key ，则可以在 O（1）时间内获取对应的值value</strong></p>\\n<p><strong>在哈希表中进行增删查改的时间复杂度都是 O（1），非常高效</strong></p>\\n<p><strong>比如，给定n个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能，则可以采用下图所示的哈希表来实现</strong></p>\\n"}');export{w as comp,M as data};
