import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/%E5%9B%BE%E7%9A%84%E6%8A%BD%E8%B1%A1%E8%A1%A8%E7%A4%BA-BPAu1ciQ.png",e="/assets/%E9%93%BE%E8%A1%A8%E6%A0%91%E5%9B%BE%E7%9A%84%E5%85%B3%E7%B3%BB-Usk14KbF.png",o="/assets/%E6%97%A0%E5%90%91%E5%9B%BE%E5%92%8C%E6%9C%89%E5%90%91%E5%9B%BE-1FWwBcuB.png",c="/assets/%E8%BF%9E%E9%80%9A%E5%9B%BE%E5%92%8C%E9%9D%9E%E8%BF%9E%E9%80%9A%E5%9B%BE-B1d8j1uw.png",i="/assets/%E6%97%A0%E6%9D%83%E5%9B%BE%E5%92%8C%E6%9C%89%E6%9D%83%E5%9B%BE-BhRrCkOE.png",l="/assets/%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E8%A1%A8%E7%A4%BA-Dj5Eu05x.png",u="/assets/%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E8%A1%A8%E7%A4%BA-C-rWnF07.png",r="/assets/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5-CoBTFq4a.png",k="/assets/%E6%B7%BB%E5%8A%A0%E8%BE%B9-BiM2CKVH.png",d="/assets/%E5%88%A0%E9%99%A4%E8%BE%B9-BEAsIre1.png",v="/assets/%E6%B7%BB%E5%8A%A0%E9%A1%B6%E7%82%B9-Czst-YIM.png",m="/assets/%E5%88%A0%E9%99%A4%E9%A1%B6%E7%82%B9-BgxRXFay.png",g="/assets/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%82%BB%E6%8E%A5%E8%A1%A8-CKKH2TE6.png",b="/assets/%E6%B7%BB%E5%8A%A0%E8%BE%B92-CeOXmiuX.png",h="/assets/%E5%88%A0%E9%99%A4%E8%BE%B92-BI8fZQk-.png",f="/assets/%E6%B7%BB%E5%8A%A0%E9%A1%B6%E7%82%B92-BZSPL04V.png",E="/assets/%E5%88%A0%E9%99%A4%E9%A1%B6%E7%82%B92-BXYczBX3.png",A="/assets/%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94-DA_CX_Lj.png",y="/assets/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86-Cmzz7rbB.png",w="/assets/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E6%AD%A5%E9%AA%A4-DdUYVZQk.png",B="/assets/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E6%AD%A5%E9%AA%A42-BTte8vEM.png",x="/assets/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86-CIK5Nu4i.png",_="/assets/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E6%AD%A5%E9%AA%A4-CmxsTAWh.png",j="/assets/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E6%AD%A5%E9%AA%A42-wx6BQWUZ.png",z={},L=t('<h1 id="第九章-图" tabindex="-1"><a class="header-anchor" href="#第九章-图"><span>第九章：图</span></a></h1><p><strong>图（graph）是一种非线性数据结构，由顶点（vertex）和边（edge）组成。我们可以将图G抽象地表示为一组顶点V和一组边E的集合。以下示例展示了一个包含 5 个顶点和 7 条边的图：</strong></p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>如果将顶点看作节点，将边看作连接各个节点的引用（指针），我们就可以将图看作一种从链表拓展而来的数据结构。如图 下图所示，相较于线性关系（链表）和分治关系（树），网络关系（图）的自由度更高，因而更为复杂</strong></p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_1-图的常见类型与术语" tabindex="-1"><a class="header-anchor" href="#_1-图的常见类型与术语"><span>1.图的常见类型与术语</span></a></h2><p><strong>根据边是否具有方向，可分为无向图（undirected graph）和有向图（directed graph），如下图所示</strong></p><ul><li><strong>在无向图中，边表示两顶点之间的“双向”连接关系，例如微信或 QQ 中的“好友关系”</strong></li><li><strong>在有向图中，边具有方向性，即A-&gt;B 和 B-&gt;A两个方向的边是相互独立的，例如微博或抖音上的“关注”与“被关注”关系</strong></li></ul><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>根据所有顶点是否连通，可分为连通图（connected graph）和非连通图（disconnected graph），如下图所示</strong></p><ul><li><strong>对于连通图，从某个顶点出发，可以到达其余任意顶点</strong></li><li><strong>对于非连通图，从某个顶点出发，至少有一个顶点无法到达</strong></li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>我们还可以为边添加“权重”变量，从而得到如下图所示的有权图（weighted graph）。例如在《王者荣耀》等手游中，系统会根据共同游戏时间来计算玩家之间的“亲密度”，这种亲密度网络就可以用有权图来表示</strong></p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>图数据结构包含以下常用术语：</strong></p><ul><li><strong>邻接（adjacency）：当两顶点之间存在边相连时，称这两顶点“邻接”。在上图中，顶点 1 的邻接顶点为顶点 2、3、5</strong></li><li><strong>路径（path）：从顶点 A 到顶点 B 经过的边构成的序列被称为从 A 到 B 的“路径”。在上图中，边序列 1-5-2-4 是顶点 1 到顶点 4 的一条路径</strong></li><li><strong>度（degree）：一个顶点拥有的边数。对于有向图，入度（in-degree）表示有多少条边指向该顶点，出度（out-degree）表示有多少条边从该顶点指出</strong></li></ul><hr><h2 id="_2-图的表示" tabindex="-1"><a class="header-anchor" href="#_2-图的表示"><span>2.图的表示</span></a></h2><p><strong>图的常用表示方式包括“邻接矩阵”和“邻接表”。以下使用无向图进行举例</strong></p><hr><h3 id="_2-1-邻接矩阵" tabindex="-1"><a class="header-anchor" href="#_2-1-邻接矩阵"><span>2.1 邻接矩阵</span></a></h3><p><strong>设图的顶点数量为n，邻接矩阵（adjacency matrix）使用一个nxn大小的矩阵来表示图，每一行（列）代表一个顶点，矩阵元素代表边，用1或0表示两个顶点之间是否存在边</strong></p><p><strong>如下图所示，设邻接矩阵为M、顶点列表为V，那么矩阵元素M[i,j]=1表示顶点V[i]到顶点V[j]之间存在边，反之M[i,j]=0表示两顶点之间无边</strong></p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>邻接矩阵具有以下特性:</strong></p><ul><li><strong>顶点不能与自身相连，因此邻接矩阵主对角线元素没有意义</strong></li><li><strong>对于无向图，两个方向的边等价，此时邻接矩阵关于主对角线对称</strong></li><li><strong>将邻接矩阵的元素从1和0替换为权重，则可表示有权图</strong></li></ul><p><strong>使用邻接矩阵表示图时，我们可以直接访问矩阵元素以获取边，因此增删查改操作的效率很高，时间复杂度均为O(1)，然而矩阵的空间复杂度为O(n^2)，内存占用较多</strong></p><hr><h3 id="_2-2-邻接表" tabindex="-1"><a class="header-anchor" href="#_2-2-邻接表"><span>2.2 邻接表</span></a></h3><p><strong>邻接表（adjacency list）使用n个链表来表示图，链表节点表示顶点。第i个链表对应顶点i，其中存储了该顶点的所有邻接顶点（与该顶点相连的顶点）。下图展示了一个使用邻接表存储的图的示例</strong></p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>邻接表仅存储实际存在的边，而边的总数通常远小于n^2，因此它更加节省空间。然而，在邻接表中需要通过遍历链表来查找边，因此其时间效率不如邻接矩阵</strong></p><p><strong>邻接表结构与哈希表中的“链式地址”非常相似，因此我们也可以采用类似的方法来优化效率。比如当链表较长时，可以将链表转化为 AVL 树或红黑树，从而将时间效率从O(n)优化至O(logn)；还可以把链表转换为哈希表，从而将时间复杂度降至O(1)</strong></p><hr><h2 id="_3-图基于邻接矩阵的实现" tabindex="-1"><a class="header-anchor" href="#_3-图基于邻接矩阵的实现"><span>3.图基于邻接矩阵的实现</span></a></h2><p><strong>给定一个顶点数量为n的无向图，则各种操作的实现方式如下图所示：</strong></p><ul><li><strong>添加或删除边：直接在邻接矩阵中修改指定的边即可，使用O(1)时间。而由于是无向图，因此需要同时更新两个方向的边</strong></li><li><strong>添加顶点：在邻接矩阵的尾部添加一行一列，并全部填0即可，使用O(n)时间</strong></li><li><strong>删除顶点：在邻接矩阵中删除一行一列。当删除首行首列时达到最差情况，需要将(n-1)^2 个元素“向左上移动”，从而使用O(n^2)时间</strong></li><li><strong>初始化：传入n个顶点，初始化长度为n的顶点列表 vertices ，使用O(n)时间；初始化 nxn大小的邻接矩阵 adjMat ，使用O(n^2)时间</strong></li></ul><p><strong>（1）初始化邻接矩阵</strong></p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（2）添加边</strong></p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（3）删除边</strong></p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（4）添加顶点</strong></p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（5）删除顶点</strong></p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>以下是基于邻接矩阵表示图的实现代码：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 基于邻接矩阵实现的无向图结构体 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> vertices<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> adjMat<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> GraphAdjMat<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
GraphAdjMat <span class="token operator">*</span><span class="token function">newGraphAdjMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    GraphAdjMat <span class="token operator">*</span>graph <span class="token operator">=</span> <span class="token punctuation">(</span>GraphAdjMat <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>GraphAdjMat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    graph<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> MAX_SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> graph<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 析构函数 */</span>
<span class="token keyword">void</span> <span class="token function">delGraphAdjMat</span><span class="token punctuation">(</span>GraphAdjMat <span class="token operator">*</span>graph<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 添加顶点 */</span>
<span class="token keyword">void</span> <span class="token function">addVertex</span><span class="token punctuation">(</span>GraphAdjMat <span class="token operator">*</span>graph<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>size <span class="token operator">==</span> MAX_SIZE<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;图的顶点数量已达最大值\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 添加第 n 个顶点，并将第 n 行和列置零</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
    graph<span class="token operator">-&gt;</span>vertices<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    graph<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除顶点 */</span>
<span class="token keyword">void</span> <span class="token function">removeVertex</span><span class="token punctuation">(</span>GraphAdjMat <span class="token operator">*</span>graph<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;顶点索引越界\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 在顶点列表中移除索引 index 的顶点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        graph<span class="token operator">-&gt;</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>vertices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 在邻接矩阵中删除索引 index 的行</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 在邻接矩阵中删除索引 index 的列</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> index<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    graph<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 添加边 */</span>
<span class="token comment">// 参数 i, j 对应 vertices 元素索引</span>
<span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span>GraphAdjMat <span class="token operator">*</span>graph<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">||</span> j <span class="token operator">&gt;=</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">||</span> i <span class="token operator">==</span> j<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;边索引越界或相等\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除边 */</span>
<span class="token comment">// 参数 i, j 对应 vertices 元素索引</span>
<span class="token keyword">void</span> <span class="token function">removeEdge</span><span class="token punctuation">(</span>GraphAdjMat <span class="token operator">*</span>graph<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">||</span> j <span class="token operator">&gt;=</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">||</span> i <span class="token operator">==</span> j<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;边索引越界或相等\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 打印邻接矩阵 */</span>
<span class="token keyword">void</span> <span class="token function">printGraphAdjMat</span><span class="token punctuation">(</span>GraphAdjMat <span class="token operator">*</span>graph<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;顶点列表 = &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printArray</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>vertices<span class="token punctuation">,</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;邻接矩阵 =\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>adjMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-图基于邻接表的实现" tabindex="-1"><a class="header-anchor" href="#_4-图基于邻接表的实现"><span>4.图基于邻接表的实现</span></a></h2><p><strong>设无向图的顶点总数为n、边总数为m，则可根据下图所示的方法实现各种操作：</strong></p><ul><li><strong>添加边：在顶点对应链表的末尾添加边即可，使用O(1)时间。因为是无向图，所以需要同时添加两个方向的边</strong></li><li><strong>删除边：在顶点对应链表中查找并删除指定边，使用O(m)时间。在无向图中，需要同时删除两个方向的边</strong></li><li><strong>添加顶点：在邻接表中添加一个链表，并将新增顶点作为链表头节点，使用O(1)时间</strong></li><li><strong>删除顶点：需遍历整个邻接表，删除包含指定顶点的所有边，使用O(n+m)</strong></li><li><strong>初始化：在邻接表中创建n个顶点和2m条边，使用O(n+m)时间</strong></li></ul><p><strong>（1）初始化邻接表</strong></p><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（2）添加边</strong></p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（3）删除边</strong></p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（4）添加顶点</strong></p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（5）删除顶点</strong></p><figure><img src="'+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>以下是邻接表的代码实现。对上图 ，实际代码有以下不同：</strong></p><ul><li><strong>为了方便添加与删除顶点，以及简化代码，我们使用列表（动态数组）来代替链表</strong></li><li><strong>使用哈希表来存储邻接表，key 为顶点实例，value 为该顶点的邻接顶点列表（链表）</strong></li></ul><blockquote><p><strong>另外，我们在邻接表中使用 Vertex 类来表示顶点，这样做的原因是：如果与邻接矩阵一样，用列表索引来区分不同顶点，那么假设要删除索引为i的顶点，则需遍历整个邻接表，将所有大于i的索引全部减1，效率很低。而如果每个顶点都是唯一的 Vertex 实例，删除某一顶点之后就无须改动其他顶点了</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 节点结构体 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">AdjListNode</span> 
<span class="token punctuation">{</span>
    Vertex <span class="token operator">*</span>vertex<span class="token punctuation">;</span>           <span class="token comment">// 顶点</span>
    <span class="token keyword">struct</span> <span class="token class-name">AdjListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">// 后继节点</span>
<span class="token punctuation">}</span> AdjListNode<span class="token punctuation">;</span>

<span class="token comment">/* 查找顶点对应的节点 */</span>
AdjListNode <span class="token operator">*</span><span class="token function">findNode</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>vertex <span class="token operator">==</span> vet<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 添加边辅助函数 */</span>
<span class="token keyword">void</span> <span class="token function">addEdgeHelper</span><span class="token punctuation">(</span>AdjListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    AdjListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span>AdjListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>AdjListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>vertex <span class="token operator">=</span> vet<span class="token punctuation">;</span>
    <span class="token comment">// 头插法</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除边辅助函数 */</span>
<span class="token keyword">void</span> <span class="token function">removeEdgeHelper</span><span class="token punctuation">(</span>AdjListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    AdjListNode <span class="token operator">*</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
    AdjListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token comment">// 在链表中搜索 vet 对应节点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-&gt;</span>vertex <span class="token operator">!=</span> vet<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 将 vet 对应节点从链表中删除</span>
    pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token comment">// 释放内存</span>
    <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 基于邻接表实现的无向图类 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    AdjListNode <span class="token operator">*</span>heads<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 节点数组</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>                     <span class="token comment">// 节点数量</span>
<span class="token punctuation">}</span> GraphAdjList<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
GraphAdjList <span class="token operator">*</span><span class="token function">newGraphAdjList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    GraphAdjList <span class="token operator">*</span>graph <span class="token operator">=</span> <span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>GraphAdjList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    graph<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> graph<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 析构函数 */</span>
<span class="token keyword">void</span> <span class="token function">delGraphAdjList</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        AdjListNode <span class="token operator">*</span>cur <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            AdjListNode <span class="token operator">*</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">free</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 查找顶点对应的节点 */</span>
AdjListNode <span class="token operator">*</span><span class="token function">findNode</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>vertex <span class="token operator">==</span> vet<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 添加边 */</span>
<span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet1<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet2<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    AdjListNode <span class="token operator">*</span>head1 <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vet1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    AdjListNode <span class="token operator">*</span>head2 <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vet2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>head1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> head2 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> head1 <span class="token operator">!=</span> head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加边 vet1 - vet2</span>
    <span class="token function">addEdgeHelper</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> vet2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addEdgeHelper</span><span class="token punctuation">(</span>head2<span class="token punctuation">,</span> vet1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除边 */</span>
<span class="token keyword">void</span> <span class="token function">removeEdge</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet1<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet2<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    AdjListNode <span class="token operator">*</span>head1 <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vet1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    AdjListNode <span class="token operator">*</span>head2 <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vet2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>head1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> head2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 删除边 vet1 - vet2</span>
    <span class="token function">removeEdgeHelper</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token operator">-&gt;</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">removeEdgeHelper</span><span class="token punctuation">(</span>head2<span class="token punctuation">,</span> head1<span class="token operator">-&gt;</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 添加顶点 */</span>
<span class="token keyword">void</span> <span class="token function">addVertex</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>graph <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    AdjListNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>AdjListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>AdjListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>vertex <span class="token operator">=</span> vet<span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 在邻接表中添加一个新链表</span>
    graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>graph<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除顶点 */</span>
<span class="token keyword">void</span> <span class="token function">removeVertex</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    AdjListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在邻接表中删除顶点 vet 对应的链表</span>
    AdjListNode <span class="token operator">*</span>cur <span class="token operator">=</span> node<span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 遍历其他顶点的链表，删除所有包含 vet 的边</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        cur <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-&gt;</span>vertex <span class="token operator">==</span> vet<span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将该顶点之后的顶点向前移动，以填补空缺</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> node<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>heads<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    graph<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>vet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-邻接矩阵与邻接表的效率对比" tabindex="-1"><a class="header-anchor" href="#_5-邻接矩阵与邻接表的效率对比"><span>5.邻接矩阵与邻接表的效率对比</span></a></h2><figure><img src="`+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_6-图的遍历" tabindex="-1"><a class="header-anchor" href="#_6-图的遍历"><span>6.图的遍历</span></a></h2><p><strong>树代表的是“一对多”的关系，而图则具有更高的自由度，可以表示任意的“多对多”关系。因此，我们可以把树看作图的一种特例。显然，树的遍历操作也是图的遍历操作的一种特例</strong></p><p><strong>图和树都需要应用搜索算法来实现遍历操作。图的遍历方式也可分为两种：广度优先遍历和深度优先遍历</strong></p><hr><h3 id="_6-1-广度优先遍历-bfs" tabindex="-1"><a class="header-anchor" href="#_6-1-广度优先遍历-bfs"><span>6.1 广度优先遍历(BFS)</span></a></h3><p><strong>广度优先遍历是一种由近及远的遍历方式，从某个节点出发，始终优先访问距离最近的顶点，并一层层向外扩张</strong></p><p><strong>如下图所示，从左上角顶点出发，首先遍历该顶点的所有邻接顶点，然后遍历下一个顶点的所有邻接顶点，以此类推，直至所有顶点访问完毕</strong></p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_6-2-bfs的算法实现" tabindex="-1"><a class="header-anchor" href="#_6-2-bfs的算法实现"><span>6.2 BFS的算法实现</span></a></h3><p><strong>BFS 通常借助队列来实现，代码如下所示。队列具有“先入先出”的性质，这与 BFS 的“由近及远”的思想异曲同工</strong></p><ul><li><strong>将遍历起始顶点 startVet 加入队列，并开启循环</strong></li><li><strong>在循环的每轮迭代中，弹出队首顶点并记录访问，然后将该顶点的所有邻接顶点加入到队列尾部</strong></li><li><strong>循环步骤2 ，直到所有顶点被访问完毕后结束</strong></li></ul><blockquote><p><strong>时间复杂度：所有顶点都会入队并出队一次，使用O(|V|)时间；在遍历邻接顶点的过程中，由于是无向图，因此所有边都会被访问2次，使用O(2|E|)时间；总体使用O(|V|+|E|)时间</strong><br><br><strong>空间复杂度：列表 res ，哈希表 visited ，队列 que 中的顶点数量最多为|V|，使用O(|V|)空间</strong></p></blockquote><p><strong>代码相对抽象，建议对照下图来加深理解：</strong></p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>为了防止重复遍历顶点，我们需要借助一个哈希表 visited 来记录哪些节点已被访问：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 节点队列结构体 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    Vertex <span class="token operator">*</span>vertices<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">,</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Queue<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
Queue <span class="token operator">*</span><span class="token function">newQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> q<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> q<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 判断队列是否为空 */</span>
<span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 入队操作 */</span>
<span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    q<span class="token operator">-&gt;</span>vertices<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> vet<span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 出队操作 */</span>
Vertex <span class="token operator">*</span><span class="token function">dequeue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    Vertex <span class="token operator">*</span>vet <span class="token operator">=</span> q<span class="token operator">-&gt;</span>vertices<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> vet<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 检查顶点是否已被访问 */</span>
<span class="token keyword">int</span> <span class="token function">isVisited</span><span class="token punctuation">(</span>Vertex <span class="token operator">*</span><span class="token operator">*</span>visited<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 遍历查找节点，使用 O(n) 时间</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> vet<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 广度优先遍历 */</span>
<span class="token comment">// 使用邻接表来表示图，以便获取指定顶点的所有邻接顶点</span>
<span class="token keyword">void</span> <span class="token function">graphBFS</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>startVet<span class="token punctuation">,</span> Vertex <span class="token operator">*</span><span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>resSize<span class="token punctuation">,</span> Vertex <span class="token operator">*</span><span class="token operator">*</span>visited<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>visitedSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 队列用于实现 BFS</span>
    Queue <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token function">newQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">enqueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> startVet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    visited<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>visitedSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> startVet<span class="token punctuation">;</span>
    <span class="token comment">// 以顶点 vet 为起点，循环直至访问完所有顶点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Vertex <span class="token operator">*</span>vet <span class="token operator">=</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 队首顶点出队</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>resSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> vet<span class="token punctuation">;</span>      <span class="token comment">// 记录访问顶点</span>
        <span class="token comment">// 遍历该顶点的所有邻接顶点</span>
        AdjListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 跳过已被访问的顶点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisited</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token operator">*</span>visitedSize<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>vertex<span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                <span class="token function">enqueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 只入队未访问的顶点</span>
                visited<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>visitedSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>vertex<span class="token punctuation">;</span> <span class="token comment">// 标记该顶点已被访问</span>
            <span class="token punctuation">}</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 释放内存</span>
    <span class="token function">free</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-3-深度优先遍历-dfs" tabindex="-1"><a class="header-anchor" href="#_6-3-深度优先遍历-dfs"><span>6.3 深度优先遍历(DFS)</span></a></h3><p><strong>深度优先遍历是一种优先走到底、无路可走再回头的遍历方式。如下图所示，从左上角顶点出发，访问当前顶点的某个邻接顶点，直到走到尽头时返回，再继续走到尽头并返回，以此类推，直至所有顶点遍历完成</strong></p><figure><img src="`+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_6-4-dfs的算法实现" tabindex="-1"><a class="header-anchor" href="#_6-4-dfs的算法实现"><span>6.4 DFS的算法实现</span></a></h3><p><strong>这种“走到尽头再返回”的算法范式通常基于递归来实现。与广度优先遍历类似，在深度优先遍历中，我们也需要借助一个哈希表 visited 来记录已被访问的顶点，以避免重复访问顶点</strong></p><blockquote><p><strong>时间复杂度：所有顶点都会被访问1次，使用O(|V|)时间；所有边都会被访问2次，使用O(2|E|)时间；总体使用O(|V|+|E|)时间</strong><br><br><strong>空间复杂度：列表 res ，哈希表 visited 顶点数量最多为|V|，递归深度最大为|V|，因此使用O(|V|)空间</strong></p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>注意：深度优先遍历的序列是否唯一？

与广度优先遍历类似，深度优先遍历序列的顺序也不是唯一的。给定某顶点，先往哪个方向探索都可以，即邻接顶点的顺序可以任意打乱，都是深度优先遍历

以树的遍历为例，“根 -&gt; 左 -&gt; 右” “左-&gt; 根 -&gt; 右&quot; &quot;左 -&gt; 右 -&gt; 根&quot;分别对应前序、中序、后序遍历，它们展示了三种遍历优先级，然而这三者都属于深度优先遍历

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>深度优先遍历的算法流程如图下图所示：</strong></p><ul><li><strong>直虚线代表向下递推，表示开启了一个新的递归方法来访问新顶点</strong></li><li><strong>曲虚线代表向上回溯，表示此递归方法已经返回，回溯到了开启此方法的位置</strong></li></ul><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+j+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 检查顶点是否已被访问 */</span>
<span class="token keyword">int</span> <span class="token function">isVisited</span><span class="token punctuation">(</span>Vertex <span class="token operator">*</span><span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 遍历查找节点，使用 O(n) 时间</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> vet<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 深度优先遍历辅助函数 */</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span><span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>resSize<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>vet<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 记录访问顶点</span>
    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>resSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> vet<span class="token punctuation">;</span>
    <span class="token comment">// 遍历该顶点的所有邻接顶点</span>
    AdjListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 跳过已被访问的顶点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisited</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token operator">*</span>resSize<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>vertex<span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 递归访问邻接顶点</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> res<span class="token punctuation">,</span> resSize<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 深度优先遍历 */</span>
<span class="token comment">// 使用邻接表来表示图，以便获取指定顶点的所有邻接顶点</span>
<span class="token keyword">void</span> <span class="token function">graphDFS</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>graph<span class="token punctuation">,</span> Vertex <span class="token operator">*</span>startVet<span class="token punctuation">,</span> Vertex <span class="token operator">*</span><span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>resSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> res<span class="token punctuation">,</span> resSize<span class="token punctuation">,</span> startVet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,104),V=[L];function N(q,M){return s(),a("div",null,V)}const F=n(z,[["render",N],["__file","9.图.html.vue"]]),D=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/9.%E5%9B%BE.html","title":"第九章：图","lang":"zh-CN","frontmatter":{"date":"2024-03-09T00:00:00.000Z","order":9,"description":"第九章：图 图（graph）是一种非线性数据结构，由顶点（vertex）和边（edge）组成。我们可以将图G抽象地表示为一组顶点V和一组边E的集合。以下示例展示了一个包含 5 个顶点和 7 条边的图： 如果将顶点看作节点，将边看作连接各个节点的引用（指针），我们就可以将图看作一种从链表拓展而来的数据结构。如图 下图所示，相较于线性关系（链表）和分治关系...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/9.%E5%9B%BE.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第九章：图"}],["meta",{"property":"og:description","content":"第九章：图 图（graph）是一种非线性数据结构，由顶点（vertex）和边（edge）组成。我们可以将图G抽象地表示为一组顶点V和一组边E的集合。以下示例展示了一个包含 5 个顶点和 7 条边的图： 如果将顶点看作节点，将边看作连接各个节点的引用（指针），我们就可以将图看作一种从链表拓展而来的数据结构。如图 下图所示，相较于线性关系（链表）和分治关系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-03-09T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第九章：图\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.图的常见类型与术语","slug":"_1-图的常见类型与术语","link":"#_1-图的常见类型与术语","children":[]},{"level":2,"title":"2.图的表示","slug":"_2-图的表示","link":"#_2-图的表示","children":[{"level":3,"title":"2.1 邻接矩阵","slug":"_2-1-邻接矩阵","link":"#_2-1-邻接矩阵","children":[]},{"level":3,"title":"2.2 邻接表","slug":"_2-2-邻接表","link":"#_2-2-邻接表","children":[]}]},{"level":2,"title":"3.图基于邻接矩阵的实现","slug":"_3-图基于邻接矩阵的实现","link":"#_3-图基于邻接矩阵的实现","children":[]},{"level":2,"title":"4.图基于邻接表的实现","slug":"_4-图基于邻接表的实现","link":"#_4-图基于邻接表的实现","children":[]},{"level":2,"title":"5.邻接矩阵与邻接表的效率对比","slug":"_5-邻接矩阵与邻接表的效率对比","link":"#_5-邻接矩阵与邻接表的效率对比","children":[]},{"level":2,"title":"6.图的遍历","slug":"_6-图的遍历","link":"#_6-图的遍历","children":[{"level":3,"title":"6.1 广度优先遍历(BFS)","slug":"_6-1-广度优先遍历-bfs","link":"#_6-1-广度优先遍历-bfs","children":[]},{"level":3,"title":"6.2 BFS的算法实现","slug":"_6-2-bfs的算法实现","link":"#_6-2-bfs的算法实现","children":[]},{"level":3,"title":"6.3 深度优先遍历(DFS)","slug":"_6-3-深度优先遍历-dfs","link":"#_6-3-深度优先遍历-dfs","children":[]},{"level":3,"title":"6.4 DFS的算法实现","slug":"_6-4-dfs的算法实现","link":"#_6-4-dfs的算法实现","children":[]}]}],"git":{},"readingTime":{"minutes":15.58,"words":4675},"filePathRelative":"算法学习/1.算法知识/9.图.md","localizedDate":"2024年3月9日","autoDesc":true,"excerpt":"\\n<p><strong>图（graph）是一种非线性数据结构，由顶点（vertex）和边（edge）组成。我们可以将图G抽象地表示为一组顶点V和一组边E的集合。以下示例展示了一个包含 5 个顶点和 7 条边的图：</strong></p>\\n<figure><figcaption></figcaption></figure>\\n<p><strong>如果将顶点看作节点，将边看作连接各个节点的引用（指针），我们就可以将图看作一种从链表拓展而来的数据结构。如图 下图所示，相较于线性关系（链表）和分治关系（树），网络关系（图）的自由度更高，因而更为复杂</strong></p>\\n<figure><figcaption></figcaption></figure>"}');export{F as comp,D as data};
