import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/6.C__%E7%BB%A7%E6%89%BF-Da_l7jbf.png",e={},o=t('<h1 id="第六章-c-继承" tabindex="-1"><a class="header-anchor" href="#第六章-c-继承"><span>第六章：C++继承</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：jimbo（1353429820@qq.com）</span>
<span class="token comment">//  Filename：main</span>
<span class="token comment">//  Date：2024/1/19</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>


<span class="token comment">//1.继承的定义</span>
<span class="token comment">//形式：class 子类 : 继承方式 父类</span>
<span class="token comment">//三种继承方式：public、protected、private</span>
<span class="token comment">//public、protected继承派生类可见，private继承方式派生类不可见。不可见指的是继承下来用不了的意思</span>
<span class="token comment">//类内外都可访问用public、类内访问用protected、都不访问用private。一般都用public</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//父类(基类)</span>
class Animal
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Animal is eating&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//子类(派生类)：公有继承</span>
class Cat <span class="token operator">:</span> public Animal
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">cat_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Cat is breaking&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//子类(派生类)：保护继承</span>
class Dog <span class="token operator">:</span> protected Animal
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">dog_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Dog is breaking&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//子类(派生类)：私有继承</span>
class Fish <span class="token operator">:</span> private Animal
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">fish_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Fish is breaking&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//公有继承：创建派生类对象、派生类调用基类成员函数、调用自身成员函数</span>
    Cat mycat<span class="token punctuation">;</span>
    mycat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mycat<span class="token punctuation">.</span><span class="token function">cat_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//保护继承：创建派生类对象、派生类调用基类成员函数、调用自身成员函数</span>
    Dog mydog<span class="token punctuation">;</span>
    <span class="token comment">//mydog.eat(); //报错：因为采用的保护继承，protected在类外不能访问</span>
    mydog<span class="token punctuation">.</span><span class="token function">dog_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//私有继承：创建派生类对象、派生类调用基类成员函数、调用自身成员函数</span>
    Fish myfish<span class="token punctuation">;</span>
    <span class="token comment">//myfish.eat(); //报错：因为采用私有继承，private在类外不能访问，且不可见</span>
    myfish<span class="token punctuation">.</span><span class="token function">fish_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：
        Animal is eating
        Cat is breaking
        Dog is breaking
        Fish is breaking
*/</span>


<span class="token comment">//2.基类和派生类对象的赋值转换</span>
<span class="token comment">//派生类赋值基类：向上转型，切片</span>
<span class="token comment">//基类指针赋值派生类指针：强转，注意：基类对象不可以赋值给派生类对象，基类指针可以强转给派生类指针</span>
<span class="token comment">//注意：非必要，不要用基类指针赋值派生类指针，不安全</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//基类</span>
class Person
<span class="token punctuation">{</span>
protected<span class="token operator">:</span>
    std<span class="token operator">::</span>string name<span class="token punctuation">;</span><span class="token comment">//名字</span>
    std<span class="token operator">::</span>string sex<span class="token punctuation">;</span><span class="token comment">//性别</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//派生类</span>
class Student <span class="token operator">:</span> public Person
<span class="token punctuation">{</span>
protected<span class="token operator">:</span>
    <span class="token keyword">int</span> stuId<span class="token punctuation">;</span><span class="token comment">//学号</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//派生类对象赋值给基类对象、指针、引用，向上转型，进行切片，抛弃派生类特有内容</span>
    Student s<span class="token punctuation">;</span>
    Person p <span class="token operator">=</span> s<span class="token punctuation">;</span>     <span class="token comment">//派生类对象赋值给基类对象，抛弃stuId</span>
    Person<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span> <span class="token comment">//派生类对象赋值给基类指针</span>
    Person<span class="token operator">&amp;</span> ref <span class="token operator">=</span> s<span class="token punctuation">;</span>  <span class="token comment">//派生类对象赋值给基类引用</span>

    <span class="token comment">//基类指针强制给派生类指针，只有基类指针指向派生类的对象才是安全的，避免这样用</span>
    Student<span class="token operator">*</span> stu<span class="token punctuation">;</span>
    Person<span class="token operator">*</span> per<span class="token punctuation">;</span>
    stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token operator">*</span><span class="token punctuation">)</span>per<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//3.继承中的作用域</span>
<span class="token comment">//继承中引入了一个新的作用域，其中派生类可以访问基类的成员</span>
<span class="token comment">//这个作用域被称为派生类的作用域</span>

<span class="token comment">//派生类作用域特点</span>
<span class="token comment">//1.访问基类的成员：派生类可以直接访问基类的公有和受保护的成员，私有成员对于派生类来说是不可访问的</span>
<span class="token comment">//2.隐藏：若子类和父类中有同名成员，子类成员将屏蔽父类同名成员(成员变量、成员函数)的直接访问，这种情况叫隐藏，也叫重定向</span>
<span class="token comment">//3.通过::访问基类成员：在派生类中，可以使用::来显式指定访问基类的成员</span>

<span class="token comment">//注意：父类和子类的同名函数不是构成了重载，因为重载需要在同一作用域下</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//基类</span>
class  Base
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">int</span> commonVar<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">commonfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Base class function&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//派生类</span>
class Derived <span class="token operator">:</span> public Base
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token comment">//覆盖基类同名成员</span>
    <span class="token keyword">int</span> commonVar<span class="token punctuation">;</span>
    <span class="token comment">//覆盖基类同名函数：只要名字相同就构成覆盖</span>
    <span class="token keyword">void</span> <span class="token function">commonfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Derived class function&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">accessBaseMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token comment">//访问派生类中的同名成员</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Derived class commonVar：&quot;</span> <span class="token operator">&lt;&lt;</span> commonVar <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

       <span class="token comment">//访问基类中的同名成员</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Base class commonVar：&quot;</span> <span class="token operator">&lt;&lt;</span> Base<span class="token operator">::</span>commonVar <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Derived derived<span class="token punctuation">;</span>
    derived<span class="token punctuation">.</span>commonVar <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    derived<span class="token punctuation">.</span><span class="token function">commonfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    derived<span class="token punctuation">.</span><span class="token function">accessBaseMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
    运行结果：
           Derived class funciton
           Derived class commonVar：42
           Base class commonVar：-333280960(随机值)
*/</span>


<span class="token comment">//4.单继承、多继承、菱形继承</span>
<span class="token comment">//单继承：指一个派生类只继承一个基类</span>
<span class="token comment">//多继承：指一个派生类继承多个基类</span>
<span class="token comment">//菱形继承：指一个派生类继承多个基类，这多个基类由继承一个基类</span>
<span class="token comment">//菱形继承存在数据冗余和二义性问题，通过菱形虚拟继承解决</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//单继承</span>
class Animal<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class cat <span class="token operator">:</span> public Animal<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//多继承</span>
class Bird<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class Horse<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class  Pegasus <span class="token operator">:</span> public Bird<span class="token punctuation">,</span> public Horse<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//菱形继承：Bat继承Manmal、Bird2，Manmal、Bird2又继承Animal</span>
class Animal1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class Manmal <span class="token operator">:</span> public Animal1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class Bird2 <span class="token operator">:</span> public Animal1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class Bat <span class="token operator">:</span> public Manmal<span class="token punctuation">,</span> public Bird2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">//5.菱形虚拟继承：解决菱形继承数据冗余和二义性问题</span>
<span class="token comment">//原理：菱形虚拟继承对于重复的成员只存储一份，通过虚基表指针和虚基表找到公共虚基类，从而解决数据冗余、二义性</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
class Animal<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class Mammal <span class="token operator">:</span> virtual public Animal<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class Bird <span class="token operator">:</span> virtual public Animal<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
class Bat <span class="token operator">:</span> public Mammal<span class="token punctuation">,</span> public Bird<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","6.C__继承.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/6.C__%E7%BB%A7%E6%89%BF.html","title":"第六章：C++继承","lang":"zh-CN","frontmatter":{"date":"2024-02-06T00:00:00.000Z","order":7,"description":"第六章：C++继承 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/6.C__%E7%BB%A7%E6%89%BF.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第六章：C++继承"}],["meta",{"property":"og:description","content":"第六章：C++继承 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第六章：C++继承\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":4.28,"words":1284},"filePathRelative":"编程学习/2.CPP/6.C++继承.md","localizedDate":"2024年2月6日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：jimbo（1353429820@qq.com）</span>\\n<span class=\\"token comment\\">//  Filename：main</span>\\n<span class=\\"token comment\\">//  Date：2024/1/19</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n\\n<span class=\\"token comment\\">//1.继承的定义</span>\\n<span class=\\"token comment\\">//形式：class 子类 : 继承方式 父类</span>\\n<span class=\\"token comment\\">//三种继承方式：public、protected、private</span>\\n<span class=\\"token comment\\">//public、protected继承派生类可见，private继承方式派生类不可见。不可见指的是继承下来用不了的意思</span>\\n<span class=\\"token comment\\">//类内外都可访问用public、类内访问用protected、都不访问用private。一般都用public</span>\\n\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//父类(基类)</span>\\nclass Animal\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">eat</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Animal is eating\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//子类(派生类)：公有继承</span>\\nclass Cat <span class=\\"token operator\\">:</span> public Animal\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">cat_break</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Cat is breaking\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//子类(派生类)：保护继承</span>\\nclass Dog <span class=\\"token operator\\">:</span> protected Animal\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">dog_break</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Dog is breaking\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//子类(派生类)：私有继承</span>\\nclass Fish <span class=\\"token operator\\">:</span> private Animal\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">fish_break</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Fish is breaking\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//公有继承：创建派生类对象、派生类调用基类成员函数、调用自身成员函数</span>\\n    Cat mycat<span class=\\"token punctuation\\">;</span>\\n    mycat<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">eat</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    mycat<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">cat_break</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//保护继承：创建派生类对象、派生类调用基类成员函数、调用自身成员函数</span>\\n    Dog mydog<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//mydog.eat(); //报错：因为采用的保护继承，protected在类外不能访问</span>\\n    mydog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dog_break</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//私有继承：创建派生类对象、派生类调用基类成员函数、调用自身成员函数</span>\\n    Fish myfish<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//myfish.eat(); //报错：因为采用私有继承，private在类外不能访问，且不可见</span>\\n    myfish<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fish_break</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n        Animal is eating\\n        Cat is breaking\\n        Dog is breaking\\n        Fish is breaking\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//2.基类和派生类对象的赋值转换</span>\\n<span class=\\"token comment\\">//派生类赋值基类：向上转型，切片</span>\\n<span class=\\"token comment\\">//基类指针赋值派生类指针：强转，注意：基类对象不可以赋值给派生类对象，基类指针可以强转给派生类指针</span>\\n<span class=\\"token comment\\">//注意：非必要，不要用基类指针赋值派生类指针，不安全</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//基类</span>\\nclass Person\\n<span class=\\"token punctuation\\">{</span>\\nprotected<span class=\\"token operator\\">:</span>\\n    std<span class=\\"token operator\\">::</span>string name<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//名字</span>\\n    std<span class=\\"token operator\\">::</span>string sex<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//性别</span>\\n    <span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//年龄</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//派生类</span>\\nclass Student <span class=\\"token operator\\">:</span> public Person\\n<span class=\\"token punctuation\\">{</span>\\nprotected<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> stuId<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//学号</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//派生类对象赋值给基类对象、指针、引用，向上转型，进行切片，抛弃派生类特有内容</span>\\n    Student s<span class=\\"token punctuation\\">;</span>\\n    Person p <span class=\\"token operator\\">=</span> s<span class=\\"token punctuation\\">;</span>     <span class=\\"token comment\\">//派生类对象赋值给基类对象，抛弃stuId</span>\\n    Person<span class=\\"token operator\\">*</span> ptr <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>s<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//派生类对象赋值给基类指针</span>\\n    Person<span class=\\"token operator\\">&amp;</span> ref <span class=\\"token operator\\">=</span> s<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">//派生类对象赋值给基类引用</span>\\n\\n    <span class=\\"token comment\\">//基类指针强制给派生类指针，只有基类指针指向派生类的对象才是安全的，避免这样用</span>\\n    Student<span class=\\"token operator\\">*</span> stu<span class=\\"token punctuation\\">;</span>\\n    Person<span class=\\"token operator\\">*</span> per<span class=\\"token punctuation\\">;</span>\\n    stu <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Student<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>per<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//3.继承中的作用域</span>\\n<span class=\\"token comment\\">//继承中引入了一个新的作用域，其中派生类可以访问基类的成员</span>\\n<span class=\\"token comment\\">//这个作用域被称为派生类的作用域</span>\\n\\n<span class=\\"token comment\\">//派生类作用域特点</span>\\n<span class=\\"token comment\\">//1.访问基类的成员：派生类可以直接访问基类的公有和受保护的成员，私有成员对于派生类来说是不可访问的</span>\\n<span class=\\"token comment\\">//2.隐藏：若子类和父类中有同名成员，子类成员将屏蔽父类同名成员(成员变量、成员函数)的直接访问，这种情况叫隐藏，也叫重定向</span>\\n<span class=\\"token comment\\">//3.通过::访问基类成员：在派生类中，可以使用::来显式指定访问基类的成员</span>\\n\\n<span class=\\"token comment\\">//注意：父类和子类的同名函数不是构成了重载，因为重载需要在同一作用域下</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//基类</span>\\nclass  Base\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> commonVar<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">commonfunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Base class function\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//派生类</span>\\nclass Derived <span class=\\"token operator\\">:</span> public Base\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token comment\\">//覆盖基类同名成员</span>\\n    <span class=\\"token keyword\\">int</span> commonVar<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//覆盖基类同名函数：只要名字相同就构成覆盖</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">commonfunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Derived class function\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">accessBaseMember</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token comment\\">//访问派生类中的同名成员</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Derived class commonVar：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> commonVar <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n       <span class=\\"token comment\\">//访问基类中的同名成员</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Base class commonVar：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> Base<span class=\\"token operator\\">::</span>commonVar <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Derived derived<span class=\\"token punctuation\\">;</span>\\n    derived<span class=\\"token punctuation\\">.</span>commonVar <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    derived<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">commonfunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    derived<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">accessBaseMember</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n           Derived class funciton\\n           Derived class commonVar：42\\n           Base class commonVar：-333280960(随机值)\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//4.单继承、多继承、菱形继承</span>\\n<span class=\\"token comment\\">//单继承：指一个派生类只继承一个基类</span>\\n<span class=\\"token comment\\">//多继承：指一个派生类继承多个基类</span>\\n<span class=\\"token comment\\">//菱形继承：指一个派生类继承多个基类，这多个基类由继承一个基类</span>\\n<span class=\\"token comment\\">//菱形继承存在数据冗余和二义性问题，通过菱形虚拟继承解决</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//单继承</span>\\nclass Animal<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass cat <span class=\\"token operator\\">:</span> public Animal<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//多继承</span>\\nclass Bird<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass Horse<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass  Pegasus <span class=\\"token operator\\">:</span> public Bird<span class=\\"token punctuation\\">,</span> public Horse<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//菱形继承：Bat继承Manmal、Bird2，Manmal、Bird2又继承Animal</span>\\nclass Animal1<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass Manmal <span class=\\"token operator\\">:</span> public Animal1<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass Bird2 <span class=\\"token operator\\">:</span> public Animal1<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass Bat <span class=\\"token operator\\">:</span> public Manmal<span class=\\"token punctuation\\">,</span> public Bird2<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token comment\\">//5.菱形虚拟继承：解决菱形继承数据冗余和二义性问题</span>\\n<span class=\\"token comment\\">//原理：菱形虚拟继承对于重复的成员只存储一份，通过虚基表指针和虚基表找到公共虚基类，从而解决数据冗余、二义性</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nclass Animal<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass Mammal <span class=\\"token operator\\">:</span> virtual public Animal<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass Bird <span class=\\"token operator\\">:</span> virtual public Animal<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nclass Bat <span class=\\"token operator\\">:</span> public Mammal<span class=\\"token punctuation\\">,</span> public Bird<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}');export{d as comp,m as data};
