import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as o,b as r}from"./app-Dezzdk4T.js";const e="/assets/%E7%BA%BF%E6%80%A7%E9%9D%9E%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84-CC8MM2h0.png",s="/assets/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84-kATiLe6z.png",i="/assets/%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E4%B8%8E%E5%88%86%E6%95%A3%E7%A9%BA%E9%97%B4-B_ZE4fU2.png",g="/assets/%E6%95%B0%E5%AD%97%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2-D4vbhyg5.png",a="/assets/ASCII%E7%A0%81-CYoCdJqk.png",p={},l=r('<h1 id="第一章-数据结构" tabindex="-1"><a class="header-anchor" href="#第一章-数据结构"><span>第一章：数据结构</span></a></h1><p><strong>常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图</strong>，它们可以从“逻辑结构”和“物理结构”两个维度进行分类</p><h2 id="_1-逻辑结构-线性与非线性" tabindex="-1"><a class="header-anchor" href="#_1-逻辑结构-线性与非线性"><span>1.逻辑结构：线性与非线性</span></a></h2><p><strong>逻辑结构揭示了数据元素之间的逻辑关系</strong>。在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；图则由节点和边构成，反映了复杂的网络关系</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>线性数据结构：数组、链表、栈、队列、哈希表，元素之间是一对一的顺序关系</strong><br><br><strong>非线性数据结构：树、堆、图、哈希表</strong></p></blockquote><hr><h2 id="_2-存储结构-连续与分散" tabindex="-1"><a class="header-anchor" href="#_2-存储结构-连续与分散"><span>2.存储结构：连续与分散</span></a></h2><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>当算法程序运行时，正在处理的数据主要存储在内存中。上图展示了一个计算机内存条，其中每个黑色方块都包含一块内存空间。我们可以将内存想象成一个巨大的 Excel 表格，其中每个单元格都可以存储一定大小的数据</strong></p><p><strong>系统通过内存地址来访问目标位置的数据。如上图所示，计算机根据特定规则为表格中的每个单元格分配编号，确保每个内存空间都有唯一的内存地址。有了这些地址，程序便可以访问内存中的数据</strong></p><p><strong>内存是所有程序的共享资源，当某块内存被某个程序占用时，则无法被其他程序同时使用了。因此在数据结构与算法的设计中，内存资源是一个重要的考虑因素。比如，算法所占用的内存峰值不应超过系统剩余空闲内存；如果缺少连续大块的内存空间，那么所选用的数据结构必须能够存储在分散的内存空间内</strong></p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>如图上图，物理结构反映了数据在计算机内存中的存储方式，可分为连续空间存储（数组）和分散空间存储（链表）。物理结构从底层决定了数据的访问、更新、增删等操作方法，两种物理结构在时间效率和空间效率方面呈现出互补的特点</strong></p><p><strong>值得说明的是，所有数据结构都是基于数组、链表或二者的组合实现的。例如，栈和队列既可以使用数组实现，也可以使用链表实现；而哈希表的实现可能同时包含数组和链表</strong></p><ul><li><strong>基于数组可实现：栈、队列、哈希表、树、堆、图、矩阵、张量（维度的数组）等</strong></li><li><strong>基于链表可实现：栈、队列、哈希表、树、堆、图等</strong></li></ul><p><strong>链表在初始化后，仍可以在程序运行过程中对其长度进行调整，因此也称“动态数据结构”。数组在初始化后长度不可变，因此也称“静态数据结构”。值得注意的是，数组可通过重新分配内存实现长度变化，从而具备一定的“动态性</strong></p><hr><h2 id="_3-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_3-基本数据类型"><span>3.基本数据类型</span></a></h2><p><strong>当谈及计算机中的数据时，我们会想到文本、图片、视频、语音、3D 模型等各种形式。尽管这些数据的组织形式各异，但它们都由各种基本数据类型构成</strong></p><p><strong>基本数据类型是 CPU 可以直接进行运算的类型，在算法中直接被使用，主要包括以下几种：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1.整数类型 byte、short、int、long 
2.浮点数类型 float、double ，用于表示小数
3.字符类型 char ，用于表示各种语言的字母、标点符号甚至表情符号等
4.布尔类型 bool ，用于表示“是”与“否”判断
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>基本数据类型以二进制的形式存储在计算机中。一个二进制位即为 1比特。在绝大多数现代操作系统中，1字节（byte）由 8比特（bit）组成</strong></p><hr><h2 id="_4-数字编码" tabindex="-1"><a class="header-anchor" href="#_4-数字编码"><span>4.数字编码</span></a></h2><p><strong>（1）原码、补码、反码</strong><br><strong>首先需要指出，数字是以“补码”的形式存储在计算机中的。在分析这样做的原因之前，首先给出三者的定义</strong></p><ul><li><strong>原码：我们将数字的二进制表示的最高位视为符号位，其中0表示正数，1表示负数，其余位表示数字的值</strong></li><li><strong>反码：正数的反码与其原码相同，负数的反码是对其原码除符号位外的所有位取反</strong></li><li><strong>补码：正数的补码与其原码相同，负数的补码是在其反码的基础上加1</strong></li></ul><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>计算机使用补码的原因：基于补码表示，计算机可以用同样的电路和操作来处理正数和负数的加法，不需要设计特殊的硬件电路来处理减法，并且无须特别处理正负零的歧义问题。这大大简化了硬件设计，提高了运算效率</strong></p><hr><h2 id="_5-字符编码" tabindex="-1"><a class="header-anchor" href="#_5-字符编码"><span>5.字符编码</span></a></h2><p><strong>在计算机中，所有数据都是以二进制数的形式存储的，字符 char 也不例外。为了表示字符，我们需要建立一套“字符集”，规定每个字符和二进制数之间的一一对应关系。有了字符集之后，计算机就可以通过查表完成二进制数到字符的转换</strong></p><p><strong>（1）ASCII字符集</strong></p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>ASCII 码是最早出现的字符集，其全称为 American Standard Code for Information Interchange（美国标准信息交换代码）。它使用 7 位二进制数（一个字节的低 7 位）表示一个字符，最多能够表示 128 个不同的字符。如图上图所示，ASCII 码包括英文字母的大小写、数字 0 ~ 9、一些标点符号，以及一些控制字符（如换行符和制表符</strong><br><br><strong>然而，ASCII 码仅能够表示英文。随着计算机的全球化，诞生了一种能够表示更多语言的 EASCII 字符集。它在 ASCII 的 7 位基础上扩展到 8 位，能够表示 256 个不同的字符</strong><br><br><strong>在世界范围内，陆续出现了一批适用于不同地区的 EASCII 字符集。这些字符集的前 128 个字符统一为 ASCII 码，后 128 个字符定义不同，以适应不同语言的需求</strong></p></blockquote><p><strong>（2）GBK字符集</strong></p><blockquote><p><strong>后来人们发现，EASCII 码仍然无法满足许多语言的字符数量要求。比如汉字有近十万个，光日常使用的就有几千个。中国国家标准总局于 1980 年发布了 GB2312 字符集，其收录了 6763 个汉字，基本满足了汉字的计算机处理需要</strong><br><br><strong>然而，GB2312 无法处理部分罕见字和繁体字。GBK 字符集是在 GB2312 的基础上扩展得到的，它共收录了 21886 个汉字。在 GBK 的编码方案中，ASCII 字符使用一个字节表示，汉字使用两个字节表示</strong></p></blockquote><p><strong>（3）Unicode字符集</strong></p><blockquote><p><strong>随着计算机技术的蓬勃发展，字符集与编码标准百花齐放，而这带来了许多问题。一方面，这些字符集一般只定义了特定语言的字符，无法在多语言环境下正常工作。另一方面，同一种语言存在多种字符集标准，如果两台计算机使用的是不同的编码标准，则在信息传递时就会出现乱码</strong><br><br><strong>那个时代的研究人员就在想：如果推出一个足够完整的字符集，将世界范围内的所有语言和符号都收录其中，不就可以解决跨语言环境和乱码问题了吗？在这种想法的驱动下，一个大而全的字符集 Unicode 应运而生</strong><br><br><strong>Unicode 的中文名称为“统一码”，理论上能容纳 100 多万个字符。它致力于将全球范围内的字符纳入统一的字符集之中，提供一种通用的字符集来处理和显示各种语言文字，减少因为编码标准不同而产生的乱码问题</strong><br><br><strong>自 1991 年发布以来，Unicode 不断扩充新的语言与字符。截至 2022 年 9 月，Unicode 已经包含 149186 个字符，包括各种语言的字符、符号甚至表情符号等。在庞大的 Unicode 字符集中，常用的字符占用 2 字节，有些生僻的字符占用 3 字节甚至 4 字节</strong><br><br><strong>Unicode 是一种通用字符集，本质上是给每个字符分配一个编号（称为“码点”），但它并没有规定在计算机中如何存储这些字符码点。我们不禁会问：当多种长度的 Unicode 码点同时出现在一个文本中时，系统如何解析字符？例如给定一个长度为 2 字节的编码，系统如何确认它是一个 2 字节的字符还是两个 1 字节的字符？</strong><br><br><strong>对于以上问题，一种直接的解决方案是将所有字符存储为等长的编码，然而 ASCII 码已经向我们证明，编码英文只需 1 字节。若采用上述方案，英文文本占用空间的大小将会是 ASCII 编码下的两倍，非常浪费内存空间。因此，我们需要一种更加高效的 Unicode 编码方法</strong></p></blockquote><p><strong>（4）UTF-8编码</strong></p><blockquote><p><strong>目前，UTF-8 已成为国际上使用最广泛的 Unicode 编码方法。它是一种可变长度的编码，使用 1 到 4 字节来表示一个字符，根据字符的复杂性而变。ASCII 字符只需 1 字节，拉丁字母和希腊字母需要 2 字节，常用的中文字符需要 3 字节，其他的一些生僻字符需要 4 字节</strong><br></p></blockquote><p><strong>UTF-8 的编码规则并不复杂，分为以下两种情况：</strong></p><blockquote><p>对于长度为 1 字节的字符，将最高位设置为0，其余 7 位设置为 Unicode 码点。值得注意的是，ASCII 字符在 Unicode 字符集中占据了前 128 个码点。也就是说，<strong>UTF-8 编码可以向下兼容 ASCII 码</strong>。这意味着我们可以使用 UTF-8 来解析年代久远的 ASCII 码文本<br><br> 对于长度为n字节的字符，将首个字节的高位n都设置为1，第n+1位设置为0；从第二个字节开始，将每个字节的高2位都设置为10；其余所有位用于填充字符的 Unicode码点</p></blockquote><p><strong>除了 UTF-8 之外，常见的编码方式还包括以下两种：</strong></p><blockquote><p><strong>UTF-16 编码：使用 2 或 4 字节来表示一个字符。所有的 ASCII 字符和常用的非英文字符，都用 2 字节表示；少数字符需要用到 4 字节表示。对于 2 字节的字符，UTF-16 编码与 Unicode 码点相等</strong></p></blockquote><blockquote><p><strong>UTF-32 编码：每个字符都使用 4 字节。这意味着 UTF-32 比 UTF-8 和 UTF-16 更占用空间，特别是对于 ASCII 字符占比较高的文本</strong></p></blockquote><p><strong>从存储空间占用的角度看，使用 UTF-8 表示英文字符非常高效，因为它仅需 1 字节；使用 UTF-16 编码某些非英文字符（例如中文）会更加高效，因为它仅需 2 字节，而 UTF-8 可能需要 3 字节</strong></p><p><strong>从兼容性的角度看，UTF-8 的通用性最佳，许多工具和库优先支持UTF-8</strong></p>',48),c=[l];function d(b,h){return n(),o("div",null,c)}const m=t(p,[["render",d],["__file","1.数据结构.html.vue"]]),_=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","title":"第一章：数据结构","lang":"zh-CN","frontmatter":{"date":"2024-03-02T00:00:00.000Z","order":1,"description":"第一章：数据结构 常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图，它们可以从“逻辑结构”和“物理结构”两个维度进行分类 1.逻辑结构：线性与非线性 逻辑结构揭示了数据元素之间的逻辑关系。在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；图则由节点和边构...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第一章：数据结构"}],["meta",{"property":"og:description","content":"第一章：数据结构 常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图，它们可以从“逻辑结构”和“物理结构”两个维度进行分类 1.逻辑结构：线性与非线性 逻辑结构揭示了数据元素之间的逻辑关系。在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；图则由节点和边构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-03-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章：数据结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.逻辑结构：线性与非线性","slug":"_1-逻辑结构-线性与非线性","link":"#_1-逻辑结构-线性与非线性","children":[]},{"level":2,"title":"2.存储结构：连续与分散","slug":"_2-存储结构-连续与分散","link":"#_2-存储结构-连续与分散","children":[]},{"level":2,"title":"3.基本数据类型","slug":"_3-基本数据类型","link":"#_3-基本数据类型","children":[]},{"level":2,"title":"4.数字编码","slug":"_4-数字编码","link":"#_4-数字编码","children":[]},{"level":2,"title":"5.字符编码","slug":"_5-字符编码","link":"#_5-字符编码","children":[]}],"git":{},"readingTime":{"minutes":10,"words":3001},"filePathRelative":"算法学习/1.算法知识/1.数据结构.md","localizedDate":"2024年3月2日","autoDesc":true,"excerpt":"\\n<p><strong>常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图</strong>，它们可以从“逻辑结构”和“物理结构”两个维度进行分类</p>\\n<h2>1.逻辑结构：线性与非线性</h2>\\n<p><strong>逻辑结构揭示了数据元素之间的逻辑关系</strong>。在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；图则由节点和边构成，反映了复杂的网络关系</p>\\n<figure><figcaption></figcaption></figure>\\n<blockquote>\\n<p><strong>线性数据结构：数组、链表、栈、队列、哈希表，元素之间是一对一的顺序关系</strong><br><br>\\n<strong>非线性数据结构：树、堆、图、哈希表</strong></p>\\n</blockquote>"}');export{m as comp,_ as data};
