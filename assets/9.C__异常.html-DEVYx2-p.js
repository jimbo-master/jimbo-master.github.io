import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/9.C__%E5%BC%82%E5%B8%B8-B8bRvNDU.png",o={},e=t('<h1 id="第九章-c-异常" tabindex="-1"><a class="header-anchor" href="#第九章-c-异常"><span>第九章：C++异常</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：jimbo（1353429820@qq.com）</span>
<span class="token comment">//  Filename：main</span>
<span class="token comment">//  Date：2024/1/22</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>


<span class="token comment">//C++异常</span>

<span class="token comment">//1.异常关键字try、catch、throw的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    try
    <span class="token punctuation">{</span>
       <span class="token comment">//在try块中放置可能抛出异常的代码</span>
       <span class="token keyword">int</span> numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">;</span>
       <span class="token comment">//用户输入</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter numerator：&quot;</span><span class="token punctuation">;</span>
       std<span class="token operator">::</span>cin <span class="token operator">&gt;&gt;</span> numerator<span class="token punctuation">;</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter denominator：&quot;</span><span class="token punctuation">;</span>
       std<span class="token operator">::</span>cin <span class="token operator">&gt;&gt;</span> denominator<span class="token punctuation">;</span>
       <span class="token comment">//当分母为零时，抛出异常</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>denominator <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
       <span class="token punctuation">{</span>
          throw std<span class="token operator">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span><span class="token string">&quot;Denominator cannot be zero!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token comment">//执行除法运算</span>
       <span class="token keyword">double</span> result <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>numerator<span class="token punctuation">)</span> <span class="token operator">/</span> denominator<span class="token punctuation">;</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Result：&quot;</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>runtime_error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token comment">//捕获std::runtime_error异常</span>
       std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error：&quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Enter numerator：2</span>
<span class="token comment">//Enter denominator：0</span>
<span class="token comment">//Error：Denominator cannot be zero!</span>


<span class="token comment">//2.自定义异常体系</span>
<span class="token comment">//std::exception是所有异常类的基类，提供了一个what()方法，用于返回异常的描述信息</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">//自定义基类异常</span>
class MyException <span class="token operator">:</span> public std<span class="token operator">::</span>exception
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> noexcept override
    <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token string">&quot;MyException occurred!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//自定义派生类异常</span>
class CustomException <span class="token operator">:</span> public MyException
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> noexcept override
    <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token string">&quot;CustomException occurred!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//添加自定义成员或行为</span>
    <span class="token keyword">int</span> <span class="token function">get_error_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">return</span> errorCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 private<span class="token operator">:</span>
    <span class="token keyword">int</span> errorCode <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    try
    <span class="token punctuation">{</span>
       <span class="token comment">//抛出自定义异常</span>
       throw <span class="token function">CustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> MyException<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token comment">//捕获基类异常</span>
       std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Caught exception：&quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
       <span class="token comment">//如果是CustomException，可以使用其特定的成员或行为</span>
       <span class="token keyword">const</span> CustomException<span class="token operator">*</span> customExceptionPtr <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> CustomException<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>customExceptionPtr<span class="token punctuation">)</span>
       <span class="token punctuation">{</span>
          std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Custom error code：&quot;</span> <span class="token operator">&lt;&lt;</span> customExceptionPtr<span class="token operator">-&gt;</span><span class="token function">get_error_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//运行结果：</span>
<span class="token comment">//Caught exception：CustomException occurred!</span>
<span class="token comment">//Custom error code：42</span>



<span class="token comment">//3.标准库异常体系</span>
<span class="token comment">//std::exception：所有标准库异常的基类，提供了一个what()方法，用于返回异常的描述信息</span>
<span class="token comment">//std::bad_exception：当throw其他类型的异常时，std::bad_exception用于充当未被捕获的异常的一个基类</span>
<span class="token comment">//std::bad_alloc：当动态内存分配失败时抛出的异常</span>
<span class="token comment">//std::bad_cast：在类型转换中遇到无效的类型转换时抛出的异常</span>
<span class="token comment">//std::bad_typeid：在使用typeid运算符获取无效类型信息时抛出的异常</span>
<span class="token comment">//std::logic_error：表示在逻辑上存在错误，如逻辑断言失败、无效的转换等</span>
<span class="token comment">//std::runtime_error：表示在运行时发生的错误，如除零错误、无效参数等</span>
<span class="token comment">//...具体查文档</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    try
    <span class="token punctuation">{</span>
        <span class="token comment">// std::exception 示例</span>
        <span class="token comment">//throw std::exception(&quot;Generic exception&quot;);</span>

        <span class="token comment">// std::bad_exception 示例</span>
        <span class="token comment">// 注意：std::bad_exception通常在异常处理中使用，表示未捕获的异常</span>
        <span class="token comment">// 在主函数中直接抛出它并不是常规做法</span>
        <span class="token comment">//throw std::bad_exception();</span>

        <span class="token comment">// std::bad_alloc 示例</span>
        <span class="token keyword">int</span><span class="token operator">*</span> dynamicArray <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1000000000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 模拟分配失败</span>
        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> dynamicArray<span class="token punctuation">;</span>

        <span class="token comment">// std::bad_cast 示例</span>
        class Base
       <span class="token punctuation">{</span>
            virtual <span class="token keyword">void</span> <span class="token function">dummy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        class Derived <span class="token operator">:</span> public Base <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        Base baseObj<span class="token punctuation">;</span>
        try
       <span class="token punctuation">{</span>
            Derived<span class="token operator">&amp;</span> derivedRef <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span>Derived<span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>baseObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 抛出 std::bad_cast</span>
        <span class="token punctuation">}</span>
       <span class="token function">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>bad_cast<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
       <span class="token punctuation">{</span>
            std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Caught bad_cast: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// std::bad_typeid 示例</span>
        try
       <span class="token punctuation">{</span>
            throw std<span class="token operator">::</span><span class="token function">bad_typeid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
       <span class="token function">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>bad_typeid<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
       <span class="token punctuation">{</span>
            std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Caught bad_typeid: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// std::logic_error 示例</span>
        throw std<span class="token operator">::</span><span class="token function">logic_error</span><span class="token punctuation">(</span><span class="token string">&quot;Logical error occurred&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// std::runtime_error 示例</span>
        <span class="token comment">// 注意：std::runtime_error通常用于表示运行时错误</span>
        <span class="token comment">// 在主函数中直接抛出它并不是常规做法</span>
        <span class="token comment">//throw std::runtime_error(&quot;Runtime error occurred&quot;);</span>
    <span class="token punctuation">}</span>
    <span class="token function">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>exception<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Caught exception: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[e];function l(i,r){return s(),a("div",null,c)}const d=n(o,[["render",l],["__file","9.C__异常.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/9.C__%E5%BC%82%E5%B8%B8.html","title":"第九章：C++异常","lang":"zh-CN","frontmatter":{"date":"2024-02-09T00:00:00.000Z","order":10,"description":"第九章：C++异常 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/9.C__%E5%BC%82%E5%B8%B8.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第九章：C++异常"}],["meta",{"property":"og:description","content":"第九章：C++异常 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-09T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第九章：C++异常\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":2.57,"words":772},"filePathRelative":"编程学习/2.CPP/9.C++异常.md","localizedDate":"2024年2月9日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：jimbo（1353429820@qq.com）</span>\\n<span class=\\"token comment\\">//  Filename：main</span>\\n<span class=\\"token comment\\">//  Date：2024/1/22</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n\\n<span class=\\"token comment\\">//C++异常</span>\\n\\n<span class=\\"token comment\\">//1.异常关键字try、catch、throw的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    try\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token comment\\">//在try块中放置可能抛出异常的代码</span>\\n       <span class=\\"token keyword\\">int</span> numerator<span class=\\"token punctuation\\">,</span> denominator<span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token comment\\">//用户输入</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Enter numerator：\\"</span><span class=\\"token punctuation\\">;</span>\\n       std<span class=\\"token operator\\">::</span>cin <span class=\\"token operator\\">&gt;&gt;</span> numerator<span class=\\"token punctuation\\">;</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Enter denominator：\\"</span><span class=\\"token punctuation\\">;</span>\\n       std<span class=\\"token operator\\">::</span>cin <span class=\\"token operator\\">&gt;&gt;</span> denominator<span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token comment\\">//当分母为零时，抛出异常</span>\\n       <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>denominator <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n       <span class=\\"token punctuation\\">{</span>\\n          throw std<span class=\\"token operator\\">::</span><span class=\\"token function\\">runtime_error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Denominator cannot be zero!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token punctuation\\">}</span>\\n       <span class=\\"token comment\\">//执行除法运算</span>\\n       <span class=\\"token keyword\\">double</span> result <span class=\\"token operator\\">=</span> static_cast<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">double</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>numerator<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> denominator<span class=\\"token punctuation\\">;</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Result：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> result <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token operator\\">::</span>runtime_error<span class=\\"token operator\\">&amp;</span> e<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token comment\\">//捕获std::runtime_error异常</span>\\n       std<span class=\\"token operator\\">::</span>cerr <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Error：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">what</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Enter numerator：2</span>\\n<span class=\\"token comment\\">//Enter denominator：0</span>\\n<span class=\\"token comment\\">//Error：Denominator cannot be zero!</span>\\n\\n\\n<span class=\\"token comment\\">//2.自定义异常体系</span>\\n<span class=\\"token comment\\">//std::exception是所有异常类的基类，提供了一个what()方法，用于返回异常的描述信息</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">//自定义基类异常</span>\\nclass MyException <span class=\\"token operator\\">:</span> public std<span class=\\"token operator\\">::</span>exception\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> <span class=\\"token function\\">what</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> noexcept override\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"MyException occurred!\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//自定义派生类异常</span>\\nclass CustomException <span class=\\"token operator\\">:</span> public MyException\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> <span class=\\"token function\\">what</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> noexcept override\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"CustomException occurred!\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">//添加自定义成员或行为</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">get_error_code</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token keyword\\">return</span> errorCode<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n private<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> errorCode <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    try\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token comment\\">//抛出自定义异常</span>\\n       throw <span class=\\"token function\\">CustomException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> MyException<span class=\\"token operator\\">&amp;</span> e<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token comment\\">//捕获基类异常</span>\\n       std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Caught exception：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">what</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token comment\\">//如果是CustomException，可以使用其特定的成员或行为</span>\\n       <span class=\\"token keyword\\">const</span> CustomException<span class=\\"token operator\\">*</span> customExceptionPtr <span class=\\"token operator\\">=</span> dynamic_cast<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">const</span> CustomException<span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>customExceptionPtr<span class=\\"token punctuation\\">)</span>\\n       <span class=\\"token punctuation\\">{</span>\\n          std<span class=\\"token operator\\">::</span>cerr <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Custom error code：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> customExceptionPtr<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">get_error_code</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//运行结果：</span>\\n<span class=\\"token comment\\">//Caught exception：CustomException occurred!</span>\\n<span class=\\"token comment\\">//Custom error code：42</span>\\n\\n\\n\\n<span class=\\"token comment\\">//3.标准库异常体系</span>\\n<span class=\\"token comment\\">//std::exception：所有标准库异常的基类，提供了一个what()方法，用于返回异常的描述信息</span>\\n<span class=\\"token comment\\">//std::bad_exception：当throw其他类型的异常时，std::bad_exception用于充当未被捕获的异常的一个基类</span>\\n<span class=\\"token comment\\">//std::bad_alloc：当动态内存分配失败时抛出的异常</span>\\n<span class=\\"token comment\\">//std::bad_cast：在类型转换中遇到无效的类型转换时抛出的异常</span>\\n<span class=\\"token comment\\">//std::bad_typeid：在使用typeid运算符获取无效类型信息时抛出的异常</span>\\n<span class=\\"token comment\\">//std::logic_error：表示在逻辑上存在错误，如逻辑断言失败、无效的转换等</span>\\n<span class=\\"token comment\\">//std::runtime_error：表示在运行时发生的错误，如除零错误、无效参数等</span>\\n<span class=\\"token comment\\">//...具体查文档</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    try\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// std::exception 示例</span>\\n        <span class=\\"token comment\\">//throw std::exception(\\"Generic exception\\");</span>\\n\\n        <span class=\\"token comment\\">// std::bad_exception 示例</span>\\n        <span class=\\"token comment\\">// 注意：std::bad_exception通常在异常处理中使用，表示未捕获的异常</span>\\n        <span class=\\"token comment\\">// 在主函数中直接抛出它并不是常规做法</span>\\n        <span class=\\"token comment\\">//throw std::bad_exception();</span>\\n\\n        <span class=\\"token comment\\">// std::bad_alloc 示例</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> dynamicArray <span class=\\"token operator\\">=</span> new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1000000000000</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 模拟分配失败</span>\\n        delete<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> dynamicArray<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// std::bad_cast 示例</span>\\n        class Base\\n       <span class=\\"token punctuation\\">{</span>\\n            virtual <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">dummy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        class Derived <span class=\\"token operator\\">:</span> public Base <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n        Base baseObj<span class=\\"token punctuation\\">;</span>\\n        try\\n       <span class=\\"token punctuation\\">{</span>\\n            Derived<span class=\\"token operator\\">&amp;</span> derivedRef <span class=\\"token operator\\">=</span> dynamic_cast<span class=\\"token operator\\">&lt;</span>Derived<span class=\\"token operator\\">&amp;</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>baseObj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 抛出 std::bad_cast</span>\\n        <span class=\\"token punctuation\\">}</span>\\n       <span class=\\"token function\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token operator\\">::</span>bad_cast<span class=\\"token operator\\">&amp;</span> e<span class=\\"token punctuation\\">)</span>\\n       <span class=\\"token punctuation\\">{</span>\\n            std<span class=\\"token operator\\">::</span>cerr <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Caught bad_cast: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">what</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// std::bad_typeid 示例</span>\\n        try\\n       <span class=\\"token punctuation\\">{</span>\\n            throw std<span class=\\"token operator\\">::</span><span class=\\"token function\\">bad_typeid</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n       <span class=\\"token function\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token operator\\">::</span>bad_typeid<span class=\\"token operator\\">&amp;</span> e<span class=\\"token punctuation\\">)</span>\\n       <span class=\\"token punctuation\\">{</span>\\n            std<span class=\\"token operator\\">::</span>cerr <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Caught bad_typeid: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">what</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// std::logic_error 示例</span>\\n        throw std<span class=\\"token operator\\">::</span><span class=\\"token function\\">logic_error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Logical error occurred\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// std::runtime_error 示例</span>\\n        <span class=\\"token comment\\">// 注意：std::runtime_error通常用于表示运行时错误</span>\\n        <span class=\\"token comment\\">// 在主函数中直接抛出它并不是常规做法</span>\\n        <span class=\\"token comment\\">//throw std::runtime_error(\\"Runtime error occurred\\");</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token operator\\">::</span>exception<span class=\\"token operator\\">&amp;</span> e<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token operator\\">::</span>cerr <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Caught exception: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">what</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{d as comp,m as data};
