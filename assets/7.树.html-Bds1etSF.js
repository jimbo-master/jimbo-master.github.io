import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/%E7%88%B6%E5%AD%90%E7%BB%93%E7%82%B9-eKoL_7cz.png",e="/assets/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B8%B8%E7%94%A8%E6%9C%AF%E8%AF%AD-KXS597vv.png",o="/assets/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9-W5IjThnV.png",c="/assets/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91-BSwYovwu.png",i="/assets/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91-8MfzQP4A.png",l="/assets/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-C5K6gZD0.png",r="/assets/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%80%80%E5%8C%96-BaAaekkh.png",u="/assets/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E9%93%BE%E8%A1%A8%E5%AF%B9%E6%AF%94-Bi3s6m7s.png",d="/assets/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86-C9IeiajO.png",k="/assets/%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86-D_sACaIE.png",v="/assets/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E6%95%B0%E7%BB%84%E8%A1%A8%E7%A4%BA-FilvvED8.png",m="/assets/%E6%95%B0%E7%BB%84%E8%A1%A8%E7%A4%BA%E5%A4%B1%E6%95%88-DBE6Je0e.png",b="/assets/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%95%B0%E7%BB%84%E8%A1%A8%E7%A4%BA-Dn6bHki8.png",g="/assets/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E6%95%B0%E7%BB%84-DO9naQ5S.png",f="/assets/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-CLwjWTYc.png",h="/assets/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%9F%A5%E6%89%BE%E7%BB%93%E7%82%B9-ZxJ0OdIy.png",y="/assets/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9-Ci38WwF0.png",E="/assets/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9-BK_WLPmn.png",w="/assets/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B92-B1G1_U6r.png",_="/assets/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B93-D6JLGO1y.png",A="/assets/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86-17Fqpt1R.png",B="/assets/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%95%88%E7%8E%87-CYlfFC7y.png",N="/assets/AVL%E5%8F%B3%E6%97%8B-sOlW_B7b.png",T="/assets/AVL%E6%9C%89%E5%AD%A9%E5%AD%90%E5%8F%B3%E6%97%8B-Db2NGRwb.png",x="/assets/AVL%E5%B7%A6%E6%97%8B-CSX3T0BA.png",L="/assets/AVL%E6%9C%89%E5%AD%A9%E5%AD%90%E5%B7%A6%E6%97%8B-C0mvXDjW.png",z="/assets/AVL%E5%85%88%E5%B7%A6%E6%97%8B%E5%86%8D%E5%8F%B3%E6%97%8B-5AwIAeLd.png",C="/assets/AVL%E5%85%88%E5%8F%B3%E6%97%8B%E5%86%8D%E5%B7%A6%E6%97%8B-CEeaAdZI.png",F="/assets/AVL%E5%9B%9B%E7%A7%8D%E9%80%89%E6%8B%A9%E6%83%85%E5%86%B5-DXvNoqcq.png",O="/assets/%E5%B9%B3%E8%A1%A1%E6%83%85%E5%86%B5-Bv-8_gEz.png",U={},V=t('<h1 id="第七章-树" tabindex="-1"><a class="header-anchor" href="#第七章-树"><span>第七章：树</span></a></h1><h2 id="_1-二叉树的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-二叉树的基本概念"><span>1.二叉树的基本概念</span></a></h2><p><strong>二叉树（binary tree）是一种非线性数据结构，代表“祖先”与“后代”之间的派生关系，体现了“一分为二”的分治逻辑。与链表类似，二叉树的基本单元是节点，每个节点包含值、左子节点引用和右子节点引用</strong></p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>每个节点都有两个引用（指针），分别指向左子节点（left-child node）和右子节点（right-child node），该节点被称为这两个子节点的父节点（parent node）。当给定一个二叉树的节点时，我们将该节点的左子节点及其以下节点形成的树称为该节点的左子树（left subtree），同理可得右子树（right subtree）</strong></p><p><strong>在二叉树中，除叶节点外，其他所有节点都包含子节点和非空子树。如图下图所示，如果将“节点 2”视为父节点，则其左子节点和右子节点分别是“节点 4”和“节点 5”，左子树是“节点 4 及其以下节点形成的树”，右子树是“节点 5 及其以下节点形成的树”</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 二叉树节点结构体 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>                <span class="token comment">// 节点值</span>
    <span class="token keyword">int</span> height<span class="token punctuation">;</span>             <span class="token comment">// 节点高度</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>  <span class="token comment">// 左子节点指针</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>right<span class="token punctuation">;</span> <span class="token comment">// 右子节点指针</span>
<span class="token punctuation">}</span> TreeNode<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
TreeNode <span class="token operator">*</span><span class="token function">newTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    TreeNode <span class="token operator">*</span>node<span class="token punctuation">;</span>

    node <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-1-二叉树常见术语" tabindex="-1"><a class="header-anchor" href="#_1-1-二叉树常见术语"><span>1.1 二叉树常见术语</span></a></h3><figure><img src="`+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>二叉树的常用术语如下所示：</strong></p><ul><li><strong>根节点（root node）：位于二叉树顶层的节点，没有父节点</strong></li><li><strong>叶节点（leaf node）：没有子节点的节点，其两个指针均指向 None</strong></li><li><strong>边（edge）：连接两个节点的线段，即节点引用（指针）</strong></li><li><strong>节点所在的层（level）：从顶至底递增，根节点所在层为 1</strong></li><li><strong>节点的度（degree）：节点的子节点的数量。在二叉树中，度的取值范围是 0、1、2</strong></li><li><strong>二叉树的高度（height）：从根节点到最远叶节点所经过的边的数量</strong></li><li><strong>节点的深度（depth）：从根节点到该节点所经过的边的数量</strong></li><li><strong>节点的高度（height）：从距离该节点最远的叶节点到该节点所经过的边的数量</strong></li></ul><hr><h3 id="_1-2-二叉树基本操作" tabindex="-1"><a class="header-anchor" href="#_1-2-二叉树基本操作"><span>1.2 二叉树基本操作</span></a></h3><p><strong>（1）初始化二叉树</strong></p><p><strong>与链表类似，首先初始化节点，然后构建引用（指针）</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 初始化二叉树 */</span>
<span class="token comment">// 初始化节点</span>
TreeNode <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
TreeNode <span class="token operator">*</span>n2 <span class="token operator">=</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
TreeNode <span class="token operator">*</span>n3 <span class="token operator">=</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
TreeNode <span class="token operator">*</span>n4 <span class="token operator">=</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
TreeNode <span class="token operator">*</span>n5 <span class="token operator">=</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 构建节点之间的引用（指针）</span>
n1<span class="token operator">-&gt;</span>left <span class="token operator">=</span> n2<span class="token punctuation">;</span>
n1<span class="token operator">-&gt;</span>right <span class="token operator">=</span> n3<span class="token punctuation">;</span>
n2<span class="token operator">-&gt;</span>left <span class="token operator">=</span> n4<span class="token punctuation">;</span>
n2<span class="token operator">-&gt;</span>right <span class="token operator">=</span> n5<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）插入与删除节点</strong></p><p><strong>与链表类似，在二叉树中插入与删除节点可以通过修改指针来实现。下图给出了一个示例：</strong></p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 插入与删除节点 */</span>
TreeNode <span class="token operator">*</span>P <span class="token operator">=</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在 n1 -&gt; n2 中间插入节点 P</span>
n1<span class="token operator">-&gt;</span>left <span class="token operator">=</span> P<span class="token punctuation">;</span>
P<span class="token operator">-&gt;</span>left <span class="token operator">=</span> n2<span class="token punctuation">;</span>
<span class="token comment">// 删除节点 P</span>
n1<span class="token operator">-&gt;</span>left <span class="token operator">=</span> n2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-3-常见二叉树类型" tabindex="-1"><a class="header-anchor" href="#_1-3-常见二叉树类型"><span>1.3 常见二叉树类型</span></a></h3><p><strong>（1）满二叉树</strong></p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>满二叉树（也叫完美二叉树）所有层的节点都被完全填满。在满二叉树中，叶节点的度为0，其余所有节点的度都为2；若树的高度为h，则节点总数为2^(h+1)-1，呈现标准的指数级关系，反映了自然界中常见的细胞分裂现象</strong></p><p><strong>（2）完全二叉树</strong></p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>完全二叉树（complete binary tree）只有最底层的节点未被填满，且最底层节点尽量靠左填充</strong></p><p><strong>（3）平衡二叉树</strong></p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>平衡二叉树（balanced binary tree）中任意节点的左子树和右子树的高度之差的绝对值不超过 1</strong></p><hr><h3 id="_1-4-二叉树的退化" tabindex="-1"><a class="header-anchor" href="#_1-4-二叉树的退化"><span>1.4 二叉树的退化</span></a></h3><p><strong>下图展示了二叉树的理想结构与退化结构。当二叉树的每层节点都被填满时，达到“完美二叉树”；而当所有节点都偏向一侧时，二叉树退化为“链表”</strong></p><ul><li><strong>满二叉树是理想情况，可以充分发挥二叉树“分治”的优势</strong></li><li><strong>链表则是另一个极端，各项操作都变为线性操作，时间复杂度退化至O(n)</strong></li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>在最佳结构和最差结构下，二叉树的叶节点数量、节点总数、高度等达到极大值或极小值</strong></p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_2-二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#_2-二叉树的遍历"><span>2.二叉树的遍历</span></a></h2><p><strong>从物理结构的角度来看，树是一种基于链表的数据结构，因此其遍历方式是通过指针逐个访问节点。然而，树是一种非线性数据结构，这使得遍历树比遍历链表更加复杂，需要借助搜索算法来实现</strong></p><p><strong>二叉树常见的遍历方式包括层序遍历、前序遍历、中序遍历和后序遍历等</strong></p><hr><h3 id="_2-1-层序遍历" tabindex="-1"><a class="header-anchor" href="#_2-1-层序遍历"><span>2.1 层序遍历</span></a></h3><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>层序遍历（level-order traversal）从顶部到底部逐层遍历二叉树，并在每一层按照从左到右的顺序访问节点</strong></p><p><strong>层序遍历本质上属于广度优先遍历（breadth-first traversal），也称广度优先搜索（breadth-first search, BFS），它体现了一种“一圈一圈向外扩展”的逐层遍历方式</strong></p><blockquote><p><strong>时间复杂度为O(n)：所有结点被访问一次，使用O(n)时间，其中n为结点数量</strong><br><br><strong>空间复杂度为O(n)：在最差情况下，即满二叉树时，遍历到最底层之前，队列中最多同时存在(n+1)/2个结点，占用O(n)空间</strong></p></blockquote><blockquote><p><strong>广度优先遍历通常借助“队列”来实现。队列遵循“先进先出”的规则，而广度优先遍历则遵循“逐层推进”的规则，两者背后的思想是一致的。实现代码如下：</strong></p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 层序遍历 */</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>size<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">/* 辅助队列 */</span>
    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token operator">*</span>arr<span class="token punctuation">;</span>
    TreeNode <span class="token operator">*</span>node<span class="token punctuation">;</span>
    TreeNode <span class="token operator">*</span><span class="token operator">*</span>queue<span class="token punctuation">;</span>

    <span class="token comment">/* 辅助队列 */</span>
    queue <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 队列指针</span>
    front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 加入根节点</span>
    queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">// 初始化一个列表，用于保存遍历序列</span>
    <span class="token comment">/* 辅助数组 */</span>
    arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 数组指针</span>
    index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">&lt;</span> rear<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 队列出队</span>
        node <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 保存节点值</span>
        arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 左子节点入队</span>
            queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 右子节点入队</span>
            queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 更新数组长度的值</span>
    <span class="token operator">*</span>size <span class="token operator">=</span> index<span class="token punctuation">;</span>
    arr <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 释放辅助数组空间</span>
    <span class="token function">free</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-2-前序、中序、后序遍历" tabindex="-1"><a class="header-anchor" href="#_2-2-前序、中序、后序遍历"><span>2.2 前序、中序、后序遍历</span></a></h3><p><strong>相应地，前序、中序和后序遍历都属于深度优先遍历（depth-first traversal），也称深度优先搜索（depth-first search, DFS），它体现了一种“先走到尽头，再回溯继续”的遍历方式</strong></p><blockquote><p><strong>时间复杂度为O(n)：所有结点被访问一次，使用O(n)时间</strong><br><br><strong>空间复杂度为O(n)：在最差情况下，即树退化为链表时，递归深度达到n，系统占用O(n)栈帧空间</strong></p></blockquote><p><strong>下图展示了对二叉树进行深度优先遍历的工作原理。深度优先遍历就像是绕着整棵二叉树的外围“走”一圈，在每个节点都会遇到三个位置，分别对应前序遍历、中序遍历和后序遍历</strong></p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>深度优先搜索通常基于递归实现：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 前序遍历 */</span>
<span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>size<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span>
    arr<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 中序遍历 */</span>
<span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>size<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 后序遍历 */</span>
<span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>size<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点</span>
    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-二叉树的数组表示" tabindex="-1"><a class="header-anchor" href="#_3-二叉树的数组表示"><span>3.二叉树的数组表示</span></a></h2><p><strong>在链表表示下，二叉树的存储单元为节点 TreeNode ，节点之间通过指针相连接。上一节介绍了链表表示下的二叉树的各项基本操作</strong></p><p><strong>那么，我们能否用数组来表示二叉树呢？答案是肯定的</strong></p><hr><h3 id="_3-1-表示满二叉树" tabindex="-1"><a class="header-anchor" href="#_3-1-表示满二叉树"><span>3.1 表示满二叉树</span></a></h3><p><strong>先分析一个简单案例。给定一棵满二叉树，我们将所有节点按照层序遍历的顺序存储在一个数组中，则每个节点都对应唯一的数组索引</strong></p><p><strong>根据层序遍历的特性，我们可以推导出父节点索引与子节点索引之间的“映射公式”：若某节点的索引为i，则该节点的左子节点索引为2i+1，右子节点索引为2i+2，如下图所示：</strong></p><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>映射公式的角色相当于链表中的节点引用（指针）。给定数组中的任意一个节点，我们都可以通过映射公式来访问它的左（右）子节点</strong></p><hr><h3 id="_3-2-表示任意二叉树" tabindex="-1"><a class="header-anchor" href="#_3-2-表示任意二叉树"><span>3.2 表示任意二叉树</span></a></h3><p><strong>满二叉树是一个特例，在二叉树的中间层通常存在许多 None 。由于层序遍历序列并不包含这些 None ，因此我们无法仅凭该序列来推测 None 的数量和分布位置。这意味着存在多种二叉树结构都符合该层序遍历序列</strong></p><p><strong>如图下图所示，给定一棵非完美二叉树，上述数组表示方法已经失效：</strong></p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>为了解决此问题，我们可以考虑在层序遍历序列中显式地写出所有 None 。如图下图所示，这样处理后，层序遍历序列就可以唯一表示二叉树了。示例代码如下：</strong></p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 二叉树的数组表示 */</span>
<span class="token comment">// 使用 int 最大值标记空位，因此要求节点值不能为 INT_MAX</span>
<span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>值得说明的是，完全二叉树非常适合使用数组来表示。回顾完全二叉树的定义，None 只出现在最底层且靠右的位置，因此所有 None 一定出现在层序遍历序列的末尾</strong></p><p><strong>这意味着使用数组表示完全二叉树时，可以省略存储所有 None ，非常方便。下图给出了一个例子：</strong></p><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>以下代码实现了一棵基于数组表示的二叉树，包括以下几种操作:</strong></p><ul><li><strong>给定某节点，获取它的值、左（右）子节点、父节点</strong></li><li><strong>获取前序遍历、中序遍历、后序遍历、层序遍历序列</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 数组表示下的二叉树结构体 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>tree<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> ArrayBinaryTree<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
ArrayBinaryTree <span class="token operator">*</span><span class="token function">newArrayBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    ArrayBinaryTree <span class="token operator">*</span>abt <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArrayBinaryTree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    abt<span class="token operator">-&gt;</span>tree <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> arrSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>abt<span class="token operator">-&gt;</span>tree<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> arrSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    abt<span class="token operator">-&gt;</span>size <span class="token operator">=</span> arrSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> abt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 析构函数 */</span>
<span class="token keyword">void</span> <span class="token function">delArrayBinaryTree</span><span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span>abt<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>abt<span class="token operator">-&gt;</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>abt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 列表容量 */</span>
<span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span>abt<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> abt<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 获取索引为 i 节点的值 */</span>
<span class="token keyword">int</span> <span class="token function">val</span><span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span>abt<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 若索引越界，则返回 INT_MAX ，代表空位</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span>abt<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token keyword">return</span> abt<span class="token operator">-&gt;</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 层序遍历 */</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">levelOrder</span><span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span>abt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">size</span><span class="token punctuation">(</span>abt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 直接遍历数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span>abt<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">val</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> INT_MAX<span class="token punctuation">)</span>
            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 深度优先遍历 */</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span>abt<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>index<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 若为空位，则返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">val</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 前序遍历</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> <span class="token string">&quot;pre&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>index<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">,</span> res<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 中序遍历</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> <span class="token string">&quot;in&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>index<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">,</span> res<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 后序遍历</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>index<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 前序遍历 */</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">preOrder</span><span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span>abt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">size</span><span class="token punctuation">(</span>abt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;pre&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 中序遍历 */</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">inOrder</span><span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span>abt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">size</span><span class="token punctuation">(</span>abt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;in&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 后序遍历 */</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">postOrder</span><span class="token punctuation">(</span>ArrayBinaryTree <span class="token operator">*</span>abt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">size</span><span class="token punctuation">(</span>abt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>abt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-3-优点与缺点" tabindex="-1"><a class="header-anchor" href="#_3-3-优点与缺点"><span>3.3 优点与缺点</span></a></h3><p><strong>二叉树的数组表示主要有以下优点：</strong></p><ul><li><strong>数组存储在连续的内存空间中，对缓存友好，访问与遍历速度较快</strong></li><li><strong>不需要存储指针，比较节省空间</strong></li><li><strong>允许随机访问节点</strong></li></ul><p><strong>然而，数组表示也存在一些局限性：</strong></p><ul><li><strong>数组存储需要连续内存空间，因此不适合存储数据量过大的树</strong></li><li><strong>增删节点需要通过数组插入与删除操作实现，效率较低</strong></li><li><strong>当二叉树中存在大量 None 时，数组中包含的节点数据比重较低，空间利用率较低</strong></li></ul><hr><h2 id="_4-二叉搜索树-bst树" tabindex="-1"><a class="header-anchor" href="#_4-二叉搜索树-bst树"><span>4.二叉搜索树(BST树)</span></a></h2><p><strong>如图下图所示，二叉搜索树（binary search tree）满足以下条件：</strong></p><ul><li><strong>对于根节点，左子树中所有节点的值 &lt; 根节点的值 &lt; 右子树中所有节点的值</strong></li><li><strong>任意节点的左、右子树也是二叉搜索树，即同样满足条件1</strong></li></ul><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_4-1-查找结点" tabindex="-1"><a class="header-anchor" href="#_4-1-查找结点"><span>4.1 查找结点</span></a></h3><p><strong>给定目标节点值 num ，可以根据二叉搜索树的性质来查找。如下图所示，我们声明一个节点 cur ，从二叉树的根节点 root 出发，循环比较节点值 cur.val 和 num 之间的大小关系</strong></p><ul><li><strong>若 cur.val &lt; num ，说明目标节点在 cur 的右子树中，因此执行 cur = cur.right</strong></li><li><strong>若 cur.val &gt; num ，说明目标节点在 cur 的左子树中，因此执行 cur = cur.left</strong></li><li><strong>若 cur.val = num ，说明找到目标节点，跳出循环并返回该节点</strong></li></ul><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>二叉搜索树的查找操作与二分查找算法的工作原理一致，都是每轮排除一半情况。循环次数最多为二叉树的高度，当二叉树平衡时，使用O(logn)时间，实例代码如下：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 查找节点 */</span>
TreeNode <span class="token operator">*</span><span class="token function">search</span><span class="token punctuation">(</span>BinarySearchTree <span class="token operator">*</span>bst<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> bst<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>
    <span class="token comment">// 循环查找，越过叶节点后跳出</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 目标节点在 cur 的右子树中</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span> num<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 目标节点在 cur 的左子树中</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 找到目标节点，跳出循环</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回目标节点</span>
    <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-2-插入结点" tabindex="-1"><a class="header-anchor" href="#_4-2-插入结点"><span>4.2 插入结点</span></a></h3><p><strong>给定一个待插入元素 num ，为了保持二叉搜索树“左子树 &lt; 根节点 &lt; 右子树”的性质，插入操作流程如下图所示：</strong></p><ul><li><strong>查找插入位置：与查找操作相似，从根节点出发，根据当前节点值和 num 的大小关系循环向下搜索，直到越过叶节点（遍历至 None ）时跳出循环</strong></li><li><strong>在该位置插入节点：初始化节点 num ，将该节点置于 None 的位置</strong></li></ul><blockquote><p><strong>与查找节点相同，插入节点使用O(logn)时间</strong></p></blockquote><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>在代码实现中，需要注意以下两点:</strong></p><ul><li><strong>二叉搜索树不允许存在重复节点，否则将违反其定义。因此，若待插入节点在树中已存在，则不执行插入，直接返回</strong></li><li><strong>为了实现插入节点，我们需要借助节点 pre 保存上一轮循环的节点。这样在遍历至 None 时，我们可以获取到其父节点，从而完成节点插入操作</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 插入节点 */</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>BinarySearchTree <span class="token operator">*</span>bst<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 若树为空，则初始化根节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bst<span class="token operator">-&gt;</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        bst<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> bst<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环查找，越过叶节点后跳出</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 找到重复节点，直接返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">==</span> num<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 插入位置在 cur 的右子树中</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 插入位置在 cur 的左子树中</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 插入节点</span>
    TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        pre<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> 
    <span class="token punctuation">{</span>
        pre<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-3-删除结点" tabindex="-1"><a class="header-anchor" href="#_4-3-删除结点"><span>4.3 删除结点</span></a></h3><p><strong>先在二叉树中查找到目标节点，再将其删除。与插入节点类似，我们需要保证在删除操作完成后，二叉搜索树的“左子树 &lt; 根节点 &lt; 右子树”的性质仍然满足。因此，我们根据目标节点的子节点数量，分 0、1 和 2 三种情况，执行对应的删除节点操作</strong></p><p><strong>如下图所示，当待删除节点的度为0时，表示该节点是叶节点，可以直接删除</strong></p><figure><img src="`+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>如下图所示，当待删除节点的度为1时，将待删除节点替换为其子节点即可</strong></p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>当待删除节点的度为2时，我们无法直接删除它，而需要使用一个节点替换该节点。由于要保持二叉搜索树“左子树 &lt; 根节点 &lt; 右子树”的性质，因此这个节点可以是右子树的最小节点或左子树的最大节点</strong></p><p><strong>假设我们选择右子树的最小节点（中序遍历的下一个节点），则删除操作流程如下图所示：</strong></p><ul><li><strong>找到待删除节点在“中序遍历序列”中的下一个节点，记为 tmp</strong></li><li><strong>用 tmp 的值覆盖待删除节点的值，并在树中递归删除节点 tmp</strong></li></ul><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>删除节点操作同样使用O(logn)时间，其中查找待删除节点需要O(logn)时间，获取中序遍历后继节点需要O(logn)时间，示例代码如下：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 删除节点 */</span>
<span class="token comment">// 由于引入了 stdio.h ，此处无法使用 remove 关键词</span>
<span class="token keyword">void</span> <span class="token function">removeItem</span><span class="token punctuation">(</span>BinarySearchTree <span class="token operator">*</span>bst<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 若树为空，直接提前返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bst<span class="token operator">-&gt;</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> bst<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环查找，越过叶节点后跳出</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 找到待删除节点，跳出循环</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">==</span> num<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 待删除节点在 root 的右子树中</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 待删除节点在 root 的左子树中</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 若无待删除节点，则直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断待删除节点是否存在子节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> cur<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">/* 子节点数量 = 0 or 1 */</span>
        <span class="token comment">// 当子节点数量 = 0 / 1 时， child = nullptr / 该子节点</span>
        TreeNode <span class="token operator">*</span>child <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">?</span> cur<span class="token operator">-&gt;</span>left <span class="token operator">:</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token comment">// 删除节点 cur</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>left <span class="token operator">==</span> cur<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            pre<span class="token operator">-&gt;</span>left <span class="token operator">=</span> child<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            pre<span class="token operator">-&gt;</span>right <span class="token operator">=</span> child<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 释放内存</span>
        <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">/* 子节点数量 = 2 */</span>
        <span class="token comment">// 获取中序遍历中 cur 的下一个节点</span>
        TreeNode <span class="token operator">*</span>tmp <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> tmpVal <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token comment">// 递归删除节点 tmp</span>
        <span class="token function">removeItem</span><span class="token punctuation">(</span>bst<span class="token punctuation">,</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 用 tmp 覆盖 cur</span>
        cur<span class="token operator">-&gt;</span>val <span class="token operator">=</span> tmpVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-4-中序遍历有序" tabindex="-1"><a class="header-anchor" href="#_4-4-中序遍历有序"><span>4.4 中序遍历有序</span></a></h3><p><strong>如下图所示，二叉树的中序遍历遵循“左 -&gt; 根 -&gt; 右”的遍历顺序，而二叉搜索树满足“左子节点 &lt; 根节点 &lt; 右子节点”的大小关系</strong></p><p><strong>这意味着在二叉搜索树中进行中序遍历时，总是会优先遍历下一个最小节点，从而得出一个重要性质：二叉搜索树的中序遍历序列是升序的</strong></p><p><strong>利用中序遍历升序的性质，我们在二叉搜索树中获取有序数据仅需O(n)时间，无须进行额外的排序操作，非常高效</strong></p><figure><img src="`+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_4-5-二叉搜索树的效率" tabindex="-1"><a class="header-anchor" href="#_4-5-二叉搜索树的效率"><span>4.5 二叉搜索树的效率</span></a></h3><figure><img src="'+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_5-平衡二叉树-avl树" tabindex="-1"><a class="header-anchor" href="#_5-平衡二叉树-avl树"><span>5.平衡二叉树(AVL树)</span></a></h2><p><strong>AVL 树既是二叉搜索树，也是平衡二叉树，同时满足这两类二叉树的所有性质，因此是一种平衡二叉搜索树（balanced binary search tree）</strong></p><p><strong>由于 AVL 树的相关操作需要获取节点高度，因此我们需要为节点类添加 height 变量：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* AVL 树节点结构体 */</span>
TreeNode <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>
<span class="token punctuation">}</span> TreeNode<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
TreeNode <span class="token operator">*</span><span class="token function">newTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    TreeNode <span class="token operator">*</span>node<span class="token punctuation">;</span>

    node <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-1-avl树的常见术语" tabindex="-1"><a class="header-anchor" href="#_5-1-avl树的常见术语"><span>5.1 AVL树的常见术语</span></a></h3><p><strong>（1）节点高度</strong></p><p><strong>“节点高度”是指从该节点到它的最远叶节点的距离，即所经过的“边”的数量。需要特别注意的是，叶节点的高度为0，而空节点的高度为-1。我们将创建两个工具函数，分别用于获取和更新节点的高度：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 获取节点高度 */</span>
<span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 空节点高度为 -1 ，叶节点高度为 0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> node<span class="token operator">-&gt;</span>height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 更新节点高度 */</span>
<span class="token keyword">void</span> <span class="token function">updateHeight</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> lh <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rh <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点高度等于最高子树高度 + 1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lh <span class="token operator">&gt;</span> rh<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> lh <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> 
    <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> rh <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）节点平衡因子</strong></p><p><strong>节点的平衡因子（balance factor）定义为节点左子树的高度减去右子树的高度，同时规定空节点的平衡因子为0。我们同样将获取节点平衡因子的功能封装成函数，方便后续使用：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 获取平衡因子 */</span>
<span class="token keyword">int</span> <span class="token function">balanceFactor</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 空节点平衡因子为 0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 节点平衡因子 = 左子树高度 - 右子树高度</span>
    <span class="token keyword">return</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-2-avl树的旋转" tabindex="-1"><a class="header-anchor" href="#_5-2-avl树的旋转"><span>5.2 AVL树的旋转</span></a></h3><p><strong>AVL 树的特点在于“旋转”操作，它能够在不影响二叉树的中序遍历序列的前提下，使失衡节点重新恢复平衡。换句话说，旋转操作既能保持“二叉搜索树”的性质，也能使树重新变为“平衡二叉树”</strong></p><p><strong>我们将平衡因子绝对值 &gt; 1 的节点称为“失衡节点”。根据节点失衡情况的不同，旋转操作分为四种：右旋、左旋、先右旋后左旋、先左旋后右旋。下面详细介绍这些旋转操作</strong></p><hr><h4 id="_5-2-1-右旋" tabindex="-1"><a class="header-anchor" href="#_5-2-1-右旋"><span>5.2.1 右旋</span></a></h4><p><strong>如下图所示，节点下方为平衡因子。从底至顶看，二叉树中首个失衡节点是“节点 3”。我们关注以该失衡节点为根节点的子树，将该节点记为 node ，其左子节点记为 child ，执行“右旋”操作。完成右旋后，子树恢复平衡，并且仍然保持二叉搜索树的性质</strong></p><figure><img src="`+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>如下图所示，当节点 child 有右子节点（记为 grand_child ）时，需要在右旋中添加一步：将 grand_child 作为 node 的左子节点</strong></p><figure><img src="'+T+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>“向右旋转”是一种形象化的说法，实际上需要通过修改节点指针来实现，代码如下所示：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 右旋操作 */</span>
TreeNode <span class="token operator">*</span><span class="token function">rightRotate</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    TreeNode <span class="token operator">*</span>child<span class="token punctuation">,</span> <span class="token operator">*</span>grandChild<span class="token punctuation">;</span>
    child <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    grandChild <span class="token operator">=</span> child<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    <span class="token comment">// 以 child 为原点，将 node 向右旋转</span>
    child<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> grandChild<span class="token punctuation">;</span>
    <span class="token comment">// 更新节点高度</span>
    <span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">updateHeight</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回旋转后子树的根节点</span>
    <span class="token keyword">return</span> child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_5-2-2-左旋" tabindex="-1"><a class="header-anchor" href="#_5-2-2-左旋"><span>5.2.2 左旋</span></a></h4><p><strong>相应地，如果考虑上述失衡二叉树的“镜像”，则需要执行下图所示的“左旋”操作</strong></p><figure><img src="`+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>同理，如下图所示，当节点 child 有左子节点（记为 grand_child ）时，需要在左旋中添加一步：将 grand_child 作为 node 的右子节点</strong></p><figure><img src="'+L+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>可以观察到，右旋和左旋操作在逻辑上是镜像对称的，它们分别解决的两种失衡情况也是对称的。基于对称性，我们只需将右旋的实现代码中的所有的 left 替换为 right ，将所有的 right 替换为 left ，即可得到左旋的实现代码：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 左旋操作 */</span>
TreeNode <span class="token operator">*</span><span class="token function">leftRotate</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    TreeNode <span class="token operator">*</span>child<span class="token punctuation">,</span> <span class="token operator">*</span>grandChild<span class="token punctuation">;</span>
    child <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    grandChild <span class="token operator">=</span> child<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    <span class="token comment">// 以 child 为原点，将 node 向左旋转</span>
    child<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> grandChild<span class="token punctuation">;</span>
    <span class="token comment">// 更新节点高度</span>
    <span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">updateHeight</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回旋转后子树的根节点</span>
    <span class="token keyword">return</span> child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_5-2-3-先左旋再右旋" tabindex="-1"><a class="header-anchor" href="#_5-2-3-先左旋再右旋"><span>5.2.3 先左旋再右旋</span></a></h4><p><strong>对于下图中的失衡节点 3 ，仅使用左旋或右旋都无法使子树恢复平衡。此时需要先对 child 执行“左旋”，再对 node 执行“右旋”</strong></p><figure><img src="`+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="_5-2-4-先右旋再左旋" tabindex="-1"><a class="header-anchor" href="#_5-2-4-先右旋再左旋"><span>5.2.4 先右旋再左旋</span></a></h4><p><strong>如下图所示，对于上述失衡二叉树的镜像情况，需要先对 child 执行“右旋”，再对 node 执行“左旋”</strong></p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="_5-2-5-旋转的选择" tabindex="-1"><a class="header-anchor" href="#_5-2-5-旋转的选择"><span>5.2.5 旋转的选择</span></a></h4><p><strong>下图展示的四种失衡情况与上述案例逐个对应，分别需要采用右旋、先左旋后右旋、先右旋后左旋、左旋的操作</strong></p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>我们通过判断失衡节点的平衡因子以及较高一侧子节点的平衡因子的正负号，来确定失衡节点属于哪种情况:</strong></p><figure><img src="'+O+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>为了便于使用，我们将旋转操作封装成一个函数。有了这个函数，我们就能对各种失衡情况进行旋转，使失衡节点重新恢复平衡。代码如下所示：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 执行旋转操作，使该子树重新恢复平衡 */</span>
TreeNode <span class="token operator">*</span><span class="token function">rotate</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 获取节点 node 的平衡因子</span>
    <span class="token keyword">int</span> bf <span class="token operator">=</span> <span class="token function">balanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 左偏树</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">balanceFactor</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 右旋</span>
            <span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 先左旋后右旋</span>
            node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 右偏树</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">balanceFactor</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 左旋</span>
            <span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 先右旋后左旋</span>
            node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 平衡树，无须旋转，直接返回</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-3-avl树插入节点" tabindex="-1"><a class="header-anchor" href="#_5-3-avl树插入节点"><span>5.3 AVL树插入节点</span></a></h3><p>A<strong>VL 树的节点插入操作与二叉搜索树在主体上类似。唯一的区别在于，在 AVL 树中插入节点后，从该节点到根节点的路径上可能会出现一系列失衡节点。因此，我们需要从这个节点开始，自底向上执行旋转操作，使所有失衡节点恢复平衡。代码如下所示：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 插入节点 */</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">insertHelper</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 递归插入节点（辅助函数） */</span>
TreeNode <span class="token operator">*</span><span class="token function">insertHelper</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">newTreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 1. 查找插入位置并插入节点 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">insertHelper</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">insertHelper</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token keyword">else</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 重复节点不插入，直接返回</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 更新节点高度</span>
    <span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 2. 执行旋转操作，使该子树重新恢复平衡 */</span>
    node <span class="token operator">=</span> <span class="token function">rotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回子树的根节点</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-4-avl树删除节点" tabindex="-1"><a class="header-anchor" href="#_5-4-avl树删除节点"><span>5.4 AVL树删除节点</span></a></h3><p><strong>类似地，在二叉搜索树的删除节点方法的基础上，需要从底至顶执行旋转操作，使所有失衡节点恢复平衡。代码如下所示：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 删除节点 */</span>
<span class="token comment">// 由于引入了 stdio.h ，此处无法使用 remove 关键词</span>
<span class="token keyword">void</span> <span class="token function">removeItem</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token function">removeHelper</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 递归删除节点（辅助函数） */</span>
TreeNode <span class="token operator">*</span><span class="token function">removeHelper</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    TreeNode <span class="token operator">*</span>child<span class="token punctuation">,</span> <span class="token operator">*</span>grandChild<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 1. 查找节点并删除 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">removeHelper</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">removeHelper</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> node<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            child <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                child <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 子节点数量 = 0 ，直接删除 node 并返回</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
            <span class="token keyword">else</span> 
            <span class="token punctuation">{</span>
                <span class="token comment">// 子节点数量 = 1 ，直接删除 node</span>
                node <span class="token operator">=</span> child<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 子节点数量 = 2 ，则将中序遍历的下个节点删除，并用该节点替换当前节点</span>
            TreeNode <span class="token operator">*</span>temp <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span> tempVal <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">removeHelper</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>val <span class="token operator">=</span> tempVal<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 更新节点高度</span>
    <span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 2. 执行旋转操作，使该子树重新恢复平衡 */</span>
    node <span class="token operator">=</span> <span class="token function">rotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回子树的根节点</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,189),q=[V];function D(S,I){return s(),a("div",null,q)}const M=n(U,[["render",D],["__file","7.树.html.vue"]]),R=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/7.%E6%A0%91.html","title":"第七章：树","lang":"zh-CN","frontmatter":{"date":"2024-03-07T00:00:00.000Z","order":7,"description":"第七章：树 1.二叉树的基本概念 二叉树（binary tree）是一种非线性数据结构，代表“祖先”与“后代”之间的派生关系，体现了“一分为二”的分治逻辑。与链表类似，二叉树的基本单元是节点，每个节点包含值、左子节点引用和右子节点引用 每个节点都有两个引用（指针），分别指向左子节点（left-child node）和右子节点（right-child n...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/7.%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第七章：树"}],["meta",{"property":"og:description","content":"第七章：树 1.二叉树的基本概念 二叉树（binary tree）是一种非线性数据结构，代表“祖先”与“后代”之间的派生关系，体现了“一分为二”的分治逻辑。与链表类似，二叉树的基本单元是节点，每个节点包含值、左子节点引用和右子节点引用 每个节点都有两个引用（指针），分别指向左子节点（left-child node）和右子节点（right-child n..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-03-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第七章：树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.二叉树的基本概念","slug":"_1-二叉树的基本概念","link":"#_1-二叉树的基本概念","children":[{"level":3,"title":"1.1 二叉树常见术语","slug":"_1-1-二叉树常见术语","link":"#_1-1-二叉树常见术语","children":[]},{"level":3,"title":"1.2 二叉树基本操作","slug":"_1-2-二叉树基本操作","link":"#_1-2-二叉树基本操作","children":[]},{"level":3,"title":"1.3 常见二叉树类型","slug":"_1-3-常见二叉树类型","link":"#_1-3-常见二叉树类型","children":[]},{"level":3,"title":"1.4 二叉树的退化","slug":"_1-4-二叉树的退化","link":"#_1-4-二叉树的退化","children":[]}]},{"level":2,"title":"2.二叉树的遍历","slug":"_2-二叉树的遍历","link":"#_2-二叉树的遍历","children":[{"level":3,"title":"2.1 层序遍历","slug":"_2-1-层序遍历","link":"#_2-1-层序遍历","children":[]},{"level":3,"title":"2.2 前序、中序、后序遍历","slug":"_2-2-前序、中序、后序遍历","link":"#_2-2-前序、中序、后序遍历","children":[]}]},{"level":2,"title":"3.二叉树的数组表示","slug":"_3-二叉树的数组表示","link":"#_3-二叉树的数组表示","children":[{"level":3,"title":"3.1 表示满二叉树","slug":"_3-1-表示满二叉树","link":"#_3-1-表示满二叉树","children":[]},{"level":3,"title":"3.2 表示任意二叉树","slug":"_3-2-表示任意二叉树","link":"#_3-2-表示任意二叉树","children":[]},{"level":3,"title":"3.3 优点与缺点","slug":"_3-3-优点与缺点","link":"#_3-3-优点与缺点","children":[]}]},{"level":2,"title":"4.二叉搜索树(BST树)","slug":"_4-二叉搜索树-bst树","link":"#_4-二叉搜索树-bst树","children":[{"level":3,"title":"4.1 查找结点","slug":"_4-1-查找结点","link":"#_4-1-查找结点","children":[]},{"level":3,"title":"4.2 插入结点","slug":"_4-2-插入结点","link":"#_4-2-插入结点","children":[]},{"level":3,"title":"4.3 删除结点","slug":"_4-3-删除结点","link":"#_4-3-删除结点","children":[]},{"level":3,"title":"4.4 中序遍历有序","slug":"_4-4-中序遍历有序","link":"#_4-4-中序遍历有序","children":[]},{"level":3,"title":"4.5 二叉搜索树的效率","slug":"_4-5-二叉搜索树的效率","link":"#_4-5-二叉搜索树的效率","children":[]}]},{"level":2,"title":"5.平衡二叉树(AVL树)","slug":"_5-平衡二叉树-avl树","link":"#_5-平衡二叉树-avl树","children":[{"level":3,"title":"5.1 AVL树的常见术语","slug":"_5-1-avl树的常见术语","link":"#_5-1-avl树的常见术语","children":[]},{"level":3,"title":"5.2 AVL树的旋转","slug":"_5-2-avl树的旋转","link":"#_5-2-avl树的旋转","children":[]},{"level":3,"title":"5.3 AVL树插入节点","slug":"_5-3-avl树插入节点","link":"#_5-3-avl树插入节点","children":[]},{"level":3,"title":"5.4 AVL树删除节点","slug":"_5-4-avl树删除节点","link":"#_5-4-avl树删除节点","children":[]}]}],"git":{},"readingTime":{"minutes":23.53,"words":7059},"filePathRelative":"算法学习/1.算法知识/7.树.md","localizedDate":"2024年3月7日","autoDesc":true,"excerpt":"\\n<h2>1.二叉树的基本概念</h2>\\n<p><strong>二叉树（binary tree）是一种非线性数据结构，代表“祖先”与“后代”之间的派生关系，体现了“一分为二”的分治逻辑。与链表类似，二叉树的基本单元是节点，每个节点包含值、左子节点引用和右子节点引用</strong></p>\\n<figure><figcaption></figcaption></figure>\\n<p><strong>每个节点都有两个引用（指针），分别指向左子节点（left-child node）和右子节点（right-child node），该节点被称为这两个子节点的父节点（parent node）。当给定一个二叉树的节点时，我们将该节点的左子节点及其以下节点形成的树称为该节点的左子树（left subtree），同理可得右子树（right subtree）</strong></p>"}');export{M as comp,R as data};
