import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as e,a as n,d as i,w as c,b as s,e as l}from"./app-Dezzdk4T.js";const r="/assets/%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5-BpY0d3Z1.png",u="/assets/%E5%88%92%E5%88%86%E6%95%B0%E7%BB%84%E5%89%8D%E5%90%8E%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F-BuxZsoG5.png",d="/assets/%E5%88%92%E5%88%86%E5%89%8D%E5%90%8E%E6%80%BB%E6%93%8D%E4%BD%9C%E6%95%B0-BQBZsu7x.png",k="/assets/%E6%A1%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97-Dg9Dy5i7.png",g="/assets/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%86%E6%B2%BB%E8%BF%87%E7%A8%8B-BAW520Oo.png",m="/assets/%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E9%97%AE%E9%A2%98-sdhCxcwo.png",v="/assets/%E5%89%8D%E4%B8%AD%E9%81%8D%E5%8E%86%E5%88%92%E5%88%86%E5%AD%90%E6%A0%91-Ckzu9-aj.png",b="/assets/%E9%81%8D%E5%8E%86%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95-CKh_d0_u.png",f="/assets/%E7%B4%A2%E5%BC%95%E5%8C%BA%E9%97%B4%E8%A1%A8%E7%A4%BA-Dg75Rtpr.png",h="/assets/%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E9%80%92%E5%BD%92%E8%BF%87%E7%A8%8B-BoNR1ulU.png",E="/assets/%E9%80%92%E5%BD%92%E5%88%92%E5%88%86%E8%BF%87%E7%A8%8B-BqAg3hYH.png",_="/assets/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98-BZbYv-Zt.png",A="/assets/%E8%A7%84%E6%A8%A11%E7%9A%84%E8%A7%A3-B41LfnOf.png",B="/assets/%E8%A7%84%E6%A8%A12%E7%9A%84%E8%A7%A3-D4k6BDwZ.png",y="/assets/%E8%A7%84%E6%A8%A13%E7%9A%84%E8%A7%A3-rU2Kn0rA.png",w="/assets/%E6%B1%89%E8%AF%BA%E5%A1%94%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5-dbVhcllQ.png",z="/assets/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%E9%80%92%E5%BD%92%E6%A0%91-DrB4Pka0.png",x={},S=s('<h1 id="第十二章-分治" tabindex="-1"><a class="header-anchor" href="#第十二章-分治"><span>第十二章：分治</span></a></h1><h2 id="_1-分治基本概念" tabindex="-1"><a class="header-anchor" href="#_1-分治基本概念"><span>1.分治基本概念</span></a></h2><p><strong>分治（divide and conquer），全称分而治之，是一种非常重要且常见的算法策略。分治通常基于递归实现，包括“分”和“治”两个步骤</strong></p><ul><li><strong>分（划分阶段）：递归地将原问题分解为两个或多个子问题，直至到达最小子问题时终止</strong></li><li><strong>治（合并阶段）：从已知解的最小子问题开始，从底至顶地将子问题的解进行合并，从而构建出原问题的解</strong></li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_2-如何判断分治问题" tabindex="-1"><a class="header-anchor" href="#_2-如何判断分治问题"><span>2.如何判断分治问题</span></a></h2><p><strong>一个问题是否适合使用分治解决，通常可以参考以下几个判断依据：</strong></p><ul><li><strong>问题可以分解：原问题可以分解成规模更小、类似的子问题，以及能够以相同方式递归地进行划分</strong></li><li><strong>子问题是独立的：子问题之间没有重叠，互不依赖，可以独立解决</strong></li><li><strong>子问题的解可以合并：原问题的解通过合并子问题的解得来</strong></li></ul><p><strong>显然，归并排序满足以上三个判断依据：</strong></p><ul><li><strong>问题可以分解：递归地将数组（原问题）划分为两个子数组（子问题）</strong></li><li><strong>子问题是独立的：每个子数组都可以独立地进行排序（子问题可以独立进行求解）</strong></li><li><strong>子问题的解可以合并：两个有序子数组（子问题的解）可以合并为一个有序数组（原问题的解）</strong></li></ul><hr><h2 id="_3-通过分治提高效率" tabindex="-1"><a class="header-anchor" href="#_3-通过分治提高效率"><span>3.通过分治提高效率</span></a></h2><p><strong>分治不仅可以有效地解决算法问题，往往还可以提升算法效率。在排序算法中，快速排序、归并排序、堆排序相较于选择、冒泡、插入排序更快，就是因为它们应用了分治策略</strong></p><p><strong>那么，我们不禁发问：为什么分治可以提升算法效率，其底层逻辑是什么？换句话说，将大问题分解为多个子问题、解决子问题、将子问题的解合并为原问题的解，这几步的效率为什么比直接解决原问题的效率更高？这个问题可以从操作数量和并行计算两方面来讨论</strong></p><hr><h3 id="_3-1-操作数量优化" tabindex="-1"><a class="header-anchor" href="#_3-1-操作数量优化"><span>3.1 操作数量优化</span></a></h3><p><strong>以“冒泡排序”为例，其处理一个长度为n的数组需要O(n^2)时间。假设我们按照下图所示的方式，将数组从中点处分为两个子数组，则划分需要O(n)时间，排序每个子数组需要O((n/2) ^2)时间，合并两个子数组需要O(n)时间，总体时间复杂度为：</strong></p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>接下来，我们计算以下不等式，其左边和右边分别为划分前和划分后的操作总数：</strong></p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_3-2-并行计算优化" tabindex="-1"><a class="header-anchor" href="#_3-2-并行计算优化"><span>3.2 并行计算优化</span></a></h3><p><strong>我们知道，分治生成的子问题是相互独立的，因此通常可以并行解决。也就是说，分治不仅可以降低算法的时间复杂度，还有利于操作系统的并行优化</strong></p><p><strong>并行优化在多核或多处理器的环境中尤其有效，因为系统可以同时处理多个子问题，更加充分地利用计算资源，从而显著减少总体的运行时间</strong></p><p><strong>比如在下图所示的“桶排序”中，我们将海量的数据平均分配到各个桶中，则可所有桶的排序任务分散到各个计算单元，完成后再合并结果</strong></p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_4-分治的常见应用" tabindex="-1"><a class="header-anchor" href="#_4-分治的常见应用"><span>4.分治的常见应用</span></a></h2><p><strong>一方面，分治可以用来解决许多经典算法问题：</strong></p><ul><li><strong>寻找最近点对：该算法首先将点集分成两部分，然后分别找出两部分中的最近点对，最后找出跨越两部分的最近点对</strong></li><li><strong>大整数乘法：例如 Karatsuba 算法，它将大整数乘法分解为几个较小的整数的乘法和加法</strong></li><li><strong>矩阵乘法：例如 Strassen 算法，它将大矩阵乘法分解为多个小矩阵的乘法和加法</strong></li><li><strong>汉诺塔问题：汉诺塔问题可以通过递归解决，这是典型的分治策略应用</strong></li><li><strong>求解逆序对：在一个序列中，如果前面的数字大于后面的数字，那么这两个数字构成一个逆序对。求解逆序对问题可以利用分治的思想，借助归并排序进行求解</strong></li></ul><p><strong>另一方面，分治在算法和数据结构的设计中应用得非常广泛：</strong></p><ul><li><strong>二分查找：二分查找是将有序数组从中点索引处分为两部分，然后根据目标值与中间元素值比较结果，决定排除哪一半区间，并在剩余区间执行相同的二分操作</strong></li><li><strong>归并排序：本节开头已介绍，不再赘述</strong></li><li><strong>快速排序：快速排序是选取一个基准值，然后把数组分为两个子数组，一个子数组的元素比基准值小，另一子数组的元素比基准值大，再对这两部分进行相同的划分操作，直至子数组只剩下一个元素</strong></li><li><strong>桶排序：桶排序的基本思想是将数据分散到多个桶，然后对每个桶内的元素进行排序，最后将各个桶的元素依次取出，从而得到一个有序数组</strong></li><li><strong>树：例如二叉搜索树、AVL 树、红黑树、B 树、B+ 树等，它们的查找、插入和删除等操作都可以视为分治策略的应用</strong></li><li><strong>堆：堆是一种特殊的完全二叉树，其各种操作，如插入、删除和堆化，实际上都隐含了分治的思想</strong></li><li><strong>哈希表：虽然哈希表并不直接应用分治，但某些哈希冲突解决方案间接应用了分治策略，例如，链式地址中的长链表会被转化为红黑树，以提升查询效率</strong></li></ul><p><strong>可以看出，分治是一种“润物细无声”的算法思想，隐含在各种算法与数据结构之中</strong></p><hr><h2 id="_5-分治搜索策略" tabindex="-1"><a class="header-anchor" href="#_5-分治搜索策略"><span>5.分治搜索策略</span></a></h2><p><strong>我们已经学过，搜索算法分为两大类：</strong></p><ul><li><strong>暴力搜索：它通过遍历数据结构实现，时间复杂度为O(n)</strong></li><li><strong>自适应搜索：它利用特有的数据组织形式或先验信息，时间复杂度可达到O(logn)，甚至O(1)</strong></li></ul><p><strong>实际上，时间复杂度为O(logn)的搜索算法通常是基于分治策略实现的，例如二分查找和树</strong></p><ul><li><strong>二分查找的每一步都将问题（在数组中搜索目标元素）分解为一个小问题（在数组的一半中搜索目标元素），这个过程一直持续到数组为空或找到目标元素为止</strong></li><li><strong>树是分治思想的代表，在二叉搜索树、AVL 树、堆等数据结构中，各种操作的时间复杂度皆为O(logn)</strong></li></ul><p><strong>二分查找的分治策略如下所示:</strong></p><ul><li><strong>问题可以分解：二分查找递归地将原问题（在数组中进行查找）分解为子问题（在数组的一半中进行查找），这是通过比较中间元素和目标元素来实现的</strong></li><li><strong>子问题是独立的：在二分查找中，每轮只处理一个子问题，它不受其他子问题的影响</strong></li><li><strong>子问题的解无须合并：二分查找旨在查找一个特定元素，因此不需要将子问题的解进行合并。当子问题得到解决时，原问题也会同时得到解决</strong></li></ul><p><strong>分治能够提升搜索效率，本质上是因为暴力搜索每轮只能排除一个选项，而分治搜索每轮可以排除一半选项</strong></p>',43),C=s('<blockquote><p><strong>在之前的章节中，二分查找是基于递推（迭代）实现的。现在我们基于分治（递归）来实现它</strong></p></blockquote><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>在实现代码中，我们声明一个递归函数 dfs() 来求解问题f(i,j)：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 二分查找：问题 f(i, j) */</span>
<span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 若区间为空，代表无目标元素，则返回 -1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> j<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 计算中点索引 m</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 递归子问题 f(m+1, j)</span>
        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 递归子问题 f(i, m-1)</span>
        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 找到目标元素，返回其索引</span>
        <span class="token keyword">return</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 二分查找 */</span>
<span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token comment">// 求解问题 f(0, n-1)</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_6-构建树问题" tabindex="-1"><a class="header-anchor" href="#_6-构建树问题"><span>6.构建树问题</span></a></h2><p><strong>问题：给定一棵二叉树的前序遍历 preorder 和中序遍历 inorder ，请从中构建二叉树，返回二叉树的根节点。假设二叉树中没有值重复的节点（如图下图）</strong></p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_6-1-判断是否为分治问题" tabindex="-1"><a class="header-anchor" href="#_6-1-判断是否为分治问题"><span>6.1 判断是否为分治问题</span></a></h3><p><strong>问题定义为从 preorder 和 inorder 构建二叉树，是一个典型的分治问题</strong></p><ul><li><strong>问题可以分解：从分治的角度切入，我们可以将原问题划分为两个子问题：构建左子树、构建右子树，加上一步操作：初始化根节点。而对于每棵子树（子问题），我们仍然可以复用以上划分方法，将其划分为更小的子树（子问题），直至达到最小子问题（空子树）时终止</strong></li><li><strong>子问题是独立的：左子树和右子树是相互独立的，它们之间没有交集。在构建左子树时，我们只需关注中序遍历和前序遍历中与左子树对应的部分。右子树同理</strong></li><li><strong>子问题的解可以合并：一旦得到了左子树和右子树（子问题的解），我们就可以将它们链接到根节点上，得到原问题的解</strong></li></ul><hr><h3 id="_6-2-如何划分子树" tabindex="-1"><a class="header-anchor" href="#_6-2-如何划分子树"><span>6.2 如何划分子树</span></a></h3><p><strong>根据以上分析，这道题可以使用分治来求解，但如何通过前序遍历 preorder 和中序遍历 inorder 来划分左子树和右子树呢？</strong></p><p><strong>根据定义，preorder 和 inorder 都可以划分为三个部分：</strong></p><ul><li><strong>前序遍历：[ 根节点 | 左子树 | 右子树 ] ，例如上图的树对应 [ 3 | 9 | 2 1 7 ]</strong></li><li><strong>中序遍历：[ 左子树 | 根节点 ｜ 右子树 ] ，例如上图的树对应 [ 9 | 3 | 1 2 7 ]</strong></li></ul><p><strong>以上图数据为例，我们可以通过下图所示的步骤得到划分结果：</strong></p><ul><li><strong>前序遍历的首元素 3 是根节点的值</strong></li><li><strong>查找根节点 3 在 inorder 中的索引，利用该索引可将 inorder 划分为 [ 9 | 3 ｜ 1 2 7 ]</strong></li><li><strong>根据 inorder 的划分结果，易得左子树和右子树的节点数量分别为 1 和 3 ，从而可将 preorder 划分为 [ 3 | 9 | 2 1 7 ]</strong></li></ul><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_6-3-基于变量描述子树区间" tabindex="-1"><a class="header-anchor" href="#_6-3-基于变量描述子树区间"><span>6.3 基于变量描述子树区间</span></a></h3><p><strong>根据以上划分方法，我们已经得到根节点、左子树、右子树在 preorder 和 inorder 中的索引区间。而为了描述这些索引区间，我们需要借助几个指针变量</strong></p><ul><li><strong>将当前树的根节点在 preorder 中的索引记为i</strong></li><li><strong>将当前树的根节点在 inorder 中的索引记为m</strong></li><li><strong>将当前树在 inorder 中的索引区间记为[l,r]</strong></li></ul><p><strong>通过以上变量即可表示根节点在 preorder 中的索引，以及子树在 inorder 中的索引区间</strong></p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>请注意，右子树根节点索引中的(m-l)的含义是“左子树的节点数量”，建议结合下图理解：</strong></p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_6-4-构建树问题代码实现" tabindex="-1"><a class="header-anchor" href="#_6-4-构建树问题代码实现"><span>6.4 构建树问题代码实现</span></a></h3><p><strong>为了提升查询m的效率，我们借助一个哈希表 hmap 来存储数组 inorder 中元素到索引的映射：</strong></p><p><strong>下图展示了构建二叉树的递归过程，各个节点是在向下“递”的过程中建立的，而各条边（引用）是在向上“归”的过程中建立的</strong></p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>每个递归函数内的前序遍历 preorder 和中序遍历 inorder 的划分结果如下图所示</strong></p><figure><img src="'+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>设树的节点数量为n，初始化每一个节点（执行一个递归函数 dfs() ）使用 O(1)时间。因此总体时间复杂度为O(n)

哈希表存储 inorder 元素到索引的映射，空间复杂度为O(n)。在最差情况下，即二叉树退化为链表时，递归深度达到n，使用O(n)的栈帧空间。因此总体空间复杂度为O(n)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 构建二叉树：分治 */</span>
TreeNode <span class="token operator">*</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>inorderMap<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 子树区间为空时终止</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化根节点</span>
    TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>val <span class="token operator">=</span> preorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 查询 m ，从而划分左右子树</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> inorderMap<span class="token punctuation">[</span>preorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 子问题：构建左子树</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorderMap<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 子问题：构建右子树</span>
    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorderMap<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> m <span class="token operator">-</span> l<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回根节点</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 构建二叉树 */</span>
TreeNode <span class="token operator">*</span><span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preorderSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inorderSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化哈希表，存储 inorder 元素到索引的映射</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>inorderMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorderSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        inorderMap<span class="token punctuation">[</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorderMap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorderSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> inorderSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>inorderMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_7-汉诺塔问题" tabindex="-1"><a class="header-anchor" href="#_7-汉诺塔问题"><span>7.汉诺塔问题</span></a></h2><p><strong>在归并排序和构建二叉树中，我们都是将原问题分解为两个规模为原问题一半的子问题。然而对于汉诺塔问题，我们采用不同的分解策略</strong></p><p><strong>问题：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>给定三根柱子，记为 A、B 和 C 。起始状态下，柱子 A 上套着n个圆盘，它们从上到下按照从小到大的顺序排列。我们的任务是要把这n个圆盘移到柱子 C 上，并保持它们的原有顺序不变（如图下图所示）。在移动圆盘的过程中，需要遵守以下规则

    1.圆盘只能从一根柱子顶部拿出，从另一根柱子顶部放入。
    2.每次只能移动一个圆盘。
    3.小圆盘必须时刻位于大圆盘之上。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_7-1-考虑基本情况" tabindex="-1"><a class="header-anchor" href="#_7-1-考虑基本情况"><span>7.1 考虑基本情况</span></a></h3><p><strong>如下图所示，对于问题f(1)，即当只有一个圆盘时，我们将它直接从 A 移动至 C 即可</strong></p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>如下图所示，对于问题f(2)，即当有两个圆盘时，由于要时刻满足小圆盘在大圆盘之上，因此需要借助 B 来完成移动</strong></p><ul><li><strong>先将上面的小圆盘从 A 移至 B</strong></li><li><strong>再将大圆盘从 A 移至 C</strong></li><li><strong>最后将小圆盘从 B 移至 C</strong></li></ul><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_7-2-子问题分解" tabindex="-1"><a class="header-anchor" href="#_7-2-子问题分解"><span>7.2 子问题分解</span></a></h3><p><strong>对于问题f(3)，即当有三个圆盘时，情况变得稍微复杂了一些</strong></p><p><strong>因为已知f(1)、f(2)的解，所以我们可从分治角度思考，将 A 顶部的两个圆盘看作一个整体，执行下图所示的步骤。这样三个圆盘就被顺利地从 A 移至 C 了</strong></p><ul><li><strong>B 为目标柱、C 为缓冲柱，将两个圆盘从 A 移至 B</strong></li><li><strong>将 A 中剩余的一个圆盘从 A 直接移动至 C</strong></li><li><strong>令 C 为目标柱、A 为缓冲柱，将两个圆盘从 B 移至 C</strong></li></ul><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>从本质上看，我们将问题f(3)划分为两个子问题f(2)、f(1)。按顺序解决这三个子问题之后，原问题随之得到解决。这说明子问题是独立的，而且解可以合并</strong></p><p><strong>至此，我们可总结出图下图所示的解决汉诺塔问题的分治策略：将原问题f(n)划分为两个子问题f(n-1)和一个子问题f(1)，并按照以下顺序解决这三个子问题</strong></p><ul><li><strong>将n-1个圆盘借助 C 从 A 移至 B</strong></li><li><strong>将剩余1个圆盘从 A 直接移至 C</strong></li><li><strong>将n-1个圆盘借助 A 从 B 移至 C</strong></li></ul><p><strong>对于这两个子问题f(n-1) ，可以通过相同的方式进行递归划分，直至达到最小子问题f(1)。而f(1)的解是已知的，只需一次移动操作即可</strong></p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_7-3-汉诺塔问题代码实现" tabindex="-1"><a class="header-anchor" href="#_7-3-汉诺塔问题代码实现"><span>7.3 汉诺塔问题代码实现</span></a></h3><p><strong>在代码中，我们声明一个递归函数 dfs(i, src, buf, tar) ，它的作用是将柱 src 顶部的i个圆盘借助缓冲柱 buf 移动至目标柱 tar ：</strong></p><p><strong>如下图所示，汉诺塔问题形成一棵高度为n的递归树，每个节点代表一个子问题，对应一个开启的 dfs() 函数，因此时间复杂度为O(2^n)，空间复杂度为O(n)</strong></p><figure><img src="'+z+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 移动一个圆盘 */</span>
<span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>srcSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>tar<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>tarSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 从 src 顶部拿出一个圆盘</span>
    <span class="token keyword">int</span> pan <span class="token operator">=</span> src<span class="token punctuation">[</span><span class="token operator">*</span>srcSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    src<span class="token punctuation">[</span><span class="token operator">*</span>srcSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>srcSize<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">// 将圆盘放入 tar 顶部</span>
    tar<span class="token punctuation">[</span><span class="token operator">*</span>tarSize<span class="token punctuation">]</span> <span class="token operator">=</span> pan<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>tarSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 求解汉诺塔问题 f(i) */</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>srcSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>bufSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>tar<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>tarSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 若 src 只剩下一个圆盘，则直接将其移到 tar</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">move</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> srcSize<span class="token punctuation">,</span> tar<span class="token punctuation">,</span> tarSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 子问题 f(i-1) ：将 src 顶部 i-1 个圆盘借助 tar 移到 buf</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> srcSize<span class="token punctuation">,</span> tar<span class="token punctuation">,</span> tarSize<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> bufSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 子问题 f(1) ：将 src 剩余一个圆盘移到 tar</span>
    <span class="token function">move</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> srcSize<span class="token punctuation">,</span> tar<span class="token punctuation">,</span> tarSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 子问题 f(i-1) ：将 buf 顶部 i-1 个圆盘借助 src 移到 tar</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> bufSize<span class="token punctuation">,</span> src<span class="token punctuation">,</span> srcSize<span class="token punctuation">,</span> tar<span class="token punctuation">,</span> tarSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 求解汉诺塔问题 */</span>
<span class="token keyword">void</span> <span class="token function">solveHanota</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ASize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>B<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>BSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>C<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>CSize<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 将 A 顶部 n 个圆盘借助 B 移到 C</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token operator">*</span>ASize<span class="token punctuation">,</span> A<span class="token punctuation">,</span> ASize<span class="token punctuation">,</span> B<span class="token punctuation">,</span> BSize<span class="token punctuation">,</span> C<span class="token punctuation">,</span> CSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,67);function D(O,N){const a=p("font");return o(),e("div",null,[S,n("p",null,[n("strong",null,[i(a,{color:"red"},{default:c(()=>[l("基于分治实现二分查找：")]),_:1})])]),C])}const j=t(x,[["render",D],["__file","12.分治.html.vue"]]),M=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/12.%E5%88%86%E6%B2%BB.html","title":"第十二章：分治","lang":"zh-CN","frontmatter":{"date":"2024-03-12T00:00:00.000Z","order":12,"description":"第十二章：分治 1.分治基本概念 分治（divide and conquer），全称分而治之，是一种非常重要且常见的算法策略。分治通常基于递归实现，包括“分”和“治”两个步骤 分（划分阶段）：递归地将原问题分解为两个或多个子问题，直至到达最小子问题时终止 治（合并阶段）：从已知解的最小子问题开始，从底至顶地将子问题的解进行合并，从而构建出原问题的解 2...","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/1.%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/12.%E5%88%86%E6%B2%BB.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第十二章：分治"}],["meta",{"property":"og:description","content":"第十二章：分治 1.分治基本概念 分治（divide and conquer），全称分而治之，是一种非常重要且常见的算法策略。分治通常基于递归实现，包括“分”和“治”两个步骤 分（划分阶段）：递归地将原问题分解为两个或多个子问题，直至到达最小子问题时终止 治（合并阶段）：从已知解的最小子问题开始，从底至顶地将子问题的解进行合并，从而构建出原问题的解 2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-03-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十二章：分治\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"1.分治基本概念","slug":"_1-分治基本概念","link":"#_1-分治基本概念","children":[]},{"level":2,"title":"2.如何判断分治问题","slug":"_2-如何判断分治问题","link":"#_2-如何判断分治问题","children":[]},{"level":2,"title":"3.通过分治提高效率","slug":"_3-通过分治提高效率","link":"#_3-通过分治提高效率","children":[{"level":3,"title":"3.1 操作数量优化","slug":"_3-1-操作数量优化","link":"#_3-1-操作数量优化","children":[]},{"level":3,"title":"3.2 并行计算优化","slug":"_3-2-并行计算优化","link":"#_3-2-并行计算优化","children":[]}]},{"level":2,"title":"4.分治的常见应用","slug":"_4-分治的常见应用","link":"#_4-分治的常见应用","children":[]},{"level":2,"title":"5.分治搜索策略","slug":"_5-分治搜索策略","link":"#_5-分治搜索策略","children":[]},{"level":2,"title":"6.构建树问题","slug":"_6-构建树问题","link":"#_6-构建树问题","children":[{"level":3,"title":"6.1 判断是否为分治问题","slug":"_6-1-判断是否为分治问题","link":"#_6-1-判断是否为分治问题","children":[]},{"level":3,"title":"6.2 如何划分子树","slug":"_6-2-如何划分子树","link":"#_6-2-如何划分子树","children":[]},{"level":3,"title":"6.3 基于变量描述子树区间","slug":"_6-3-基于变量描述子树区间","link":"#_6-3-基于变量描述子树区间","children":[]},{"level":3,"title":"6.4 构建树问题代码实现","slug":"_6-4-构建树问题代码实现","link":"#_6-4-构建树问题代码实现","children":[]}]},{"level":2,"title":"7.汉诺塔问题","slug":"_7-汉诺塔问题","link":"#_7-汉诺塔问题","children":[{"level":3,"title":"7.1 考虑基本情况","slug":"_7-1-考虑基本情况","link":"#_7-1-考虑基本情况","children":[]},{"level":3,"title":"7.2 子问题分解","slug":"_7-2-子问题分解","link":"#_7-2-子问题分解","children":[]},{"level":3,"title":"7.3 汉诺塔问题代码实现","slug":"_7-3-汉诺塔问题代码实现","link":"#_7-3-汉诺塔问题代码实现","children":[]}]}],"git":{},"readingTime":{"minutes":15.41,"words":4622},"filePathRelative":"算法学习/1.算法知识/12.分治.md","localizedDate":"2024年3月12日","autoDesc":true,"excerpt":"\\n<h2>1.分治基本概念</h2>\\n<p><strong>分治（divide and conquer），全称分而治之，是一种非常重要且常见的算法策略。分治通常基于递归实现，包括“分”和“治”两个步骤</strong></p>\\n<ul>\\n<li><strong>分（划分阶段）：递归地将原问题分解为两个或多个子问题，直至到达最小子问题时终止</strong></li>\\n<li><strong>治（合并阶段）：从已知解的最小子问题开始，从底至顶地将子问题的解进行合并，从而构建出原问题的解</strong></li>\\n</ul>\\n<figure><figcaption></figcaption></figure>"}');export{j as comp,M as data};
