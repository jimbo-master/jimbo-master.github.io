import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/12.C__%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-CI6I6L6S.png",e={},o=t('<h1 id="第十二章-c-类型转换" tabindex="-1"><a class="header-anchor" href="#第十二章-c-类型转换"><span>第十二章：C++类型转换</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：JimBo (1353429820@qq.com)</span>
<span class="token comment">//  Filename：main.cpp</span>
<span class="token comment">//  Date：2024/1/2</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>

<span class="token comment">//1.C语言中的类型转换</span>
<span class="token comment">//隐式类型转换、显式类型转换</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//隐式类型转换：同类型，较低转较高层次</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>
	<span class="token keyword">float</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">//int隐式转换为float，有效数字7位</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %lf\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//运行结果：result = 7.500000</span>

	<span class="token comment">//显示类型转换：同类型，较高转较低层次</span>
	<span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">5.67</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span><span class="token comment">//double类型强转为int类型，丢失精度</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;y = %d\\n&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//运行结果：y = 5</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//2.C++类型转换</span>
<span class="token comment">//static_cast：静态转换，用于相近类型转换</span>
<span class="token comment">//reinterpret_cast：重新解释转换，用于指针或引用之间的转换</span>
<span class="token comment">//const_cast：常量转换，用于指针或引用去除const性质</span>
<span class="token comment">//dynamic_cast：动态转换，用于基类和派生类的转换</span>
<span class="token comment">//explicit：禁止单参数构造函数隐式转换</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//static_cast：用于相近类型转换</span>
	<span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> y <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//double转变为int类型</span>

	<span class="token comment">//reinterpret_cast：用于指针或引用之间的转换</span>
	<span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span><span class="token operator">*</span> charPtr <span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将int指针转换为char指针</span>

	<span class="token comment">//const_cast：用于添加或移除变量的const性质</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token comment">//错误的使用方式：int b = const_cast&lt;int&gt;(a);//因为const_cast主要用于指针或引用去除const</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> constPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token keyword">int</span><span class="token operator">*</span> nonConstPtr <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>constPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除constPtr的const属性</span>

	<span class="token comment">//dynamic_cast：用于基类和派生类的转换</span>
	class Bsae
	<span class="token punctuation">{</span>
		virtual <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	class Derived <span class="token operator">:</span> public Base <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	Base<span class="token operator">*</span> basePtr <span class="token operator">=</span> new Derived<span class="token punctuation">;</span>
	Derived<span class="token operator">*</span> derivedPtr <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span>Derived<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>basePtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基类Base转换为派生类Derived</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//explicit的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
class MyClass
<span class="token punctuation">{</span>
 public<span class="token operator">:</span>
	explicit <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//构造函数禁止隐式转换</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

 private<span class="token operator">:</span>
	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	MyClass obj1 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token comment">//错误，因为构造函数被标记为explicit，禁止隐式转换</span>
	<span class="token comment">//说明：因为MyClass构造函数接受一个int类型的参数，所以42可以隐式的传递给MyClass的构造函数进行对象的构造</span>
	
	MyClass <span class="token function">obj2</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确，使用构造函数显示创建对象</span>
    MyClass obj3 <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确，先调用构造函数创建对象，再调用拷贝构造拷贝值给obj3</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//3.RTT1机制：运行时类型识别</span>
<span class="token comment">//①typeid：运行时识别对象类型</span>
<span class="token comment">//②dynamic_cast：运行时识别父类的指针或引用，用于安全的向下转型(向上转型本来就安全)</span>
<span class="token comment">//③decltype：运行时推演一个表达式或函数返回值类型</span>

<span class="token comment">//typeid的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

class MyBaseClass
<span class="token punctuation">{</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

class MyDerivedClass <span class="token operator">:</span> public MyBaseClass
<span class="token punctuation">{</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	MyBaseClass<span class="token operator">*</span> ptr <span class="token operator">=</span> new <span class="token function">MyDerivedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">typeid</span><span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">typeid</span><span class="token punctuation">(</span>MyDerivedClass<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ptr指向的对象是MyDerivedClass类型&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//没有结果，ptr指向对象不是MyDerivedClass类型</span>
	delete ptr<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//dynamic_cast的使用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>

class MyBaseClass
<span class="token punctuation">{</span>
	virtual <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

class MyDervivedClass <span class="token operator">:</span> public MyBaseClass
<span class="token punctuation">{</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	MyBaseClass<span class="token operator">*</span> ptr <span class="token operator">=</span> new <span class="token function">MyDervivedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	MyDervivedClass<span class="token operator">*</span> dervivedPtr <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span>MyDervivedClass<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span>dervivedPtr<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;转型成功&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;转型失败&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//decltype的使用：decltype(expression) variableName;</span>
<span class="token comment">//decltype用于推演类型，主要用于模板和泛型编程中</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> y <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
	<span class="token function">decltype</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//a的类型为int</span>
	<span class="token function">decltype</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> b <span class="token operator">=</span><span class="token number">4.56</span><span class="token punctuation">;</span><span class="token comment">//b的类型为const double&amp;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","12.C__类型转换.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/12.C__%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","title":"第十二章：C++类型转换","lang":"zh-CN","frontmatter":{"date":"2024-02-12T00:00:00.000Z","order":13,"description":"第十二章：C++类型转换 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/12.C__%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第十二章：C++类型转换"}],["meta",{"property":"og:description","content":"第十二章：C++类型转换 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十二章：C++类型转换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":2.76,"words":829},"filePathRelative":"编程学习/2.CPP/12.C++类型转换.md","localizedDate":"2024年2月12日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：JimBo (1353429820@qq.com)</span>\\n<span class=\\"token comment\\">//  Filename：main.cpp</span>\\n<span class=\\"token comment\\">//  Date：2024/1/2</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n<span class=\\"token comment\\">//1.C语言中的类型转换</span>\\n<span class=\\"token comment\\">//隐式类型转换、显式类型转换</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">//隐式类型转换：同类型，较低转较高层次</span>\\n\\t<span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">float</span> b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2.5</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">float</span> result <span class=\\"token operator\\">=</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//int隐式转换为float，有效数字7位</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"result = %lf\\\\n\\"</span><span class=\\"token punctuation\\">,</span> result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">//运行结果：result = 7.500000</span>\\n\\n\\t<span class=\\"token comment\\">//显示类型转换：同类型，较高转较低层次</span>\\n\\t<span class=\\"token keyword\\">double</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5.67</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> y <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span>x<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//double类型强转为int类型，丢失精度</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"y = %d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">//运行结果：y = 5</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//2.C++类型转换</span>\\n<span class=\\"token comment\\">//static_cast：静态转换，用于相近类型转换</span>\\n<span class=\\"token comment\\">//reinterpret_cast：重新解释转换，用于指针或引用之间的转换</span>\\n<span class=\\"token comment\\">//const_cast：常量转换，用于指针或引用去除const性质</span>\\n<span class=\\"token comment\\">//dynamic_cast：动态转换，用于基类和派生类的转换</span>\\n<span class=\\"token comment\\">//explicit：禁止单参数构造函数隐式转换</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">//static_cast：用于相近类型转换</span>\\n\\t<span class=\\"token keyword\\">double</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.14</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> y <span class=\\"token operator\\">=</span> static_cast<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//double转变为int类型</span>\\n\\n\\t<span class=\\"token comment\\">//reinterpret_cast：用于指针或引用之间的转换</span>\\n\\t<span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr <span class=\\"token operator\\">=</span> new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> charPtr <span class=\\"token operator\\">=</span> reinterpret_cast<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>ptr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//将int指针转换为char指针</span>\\n\\n\\t<span class=\\"token comment\\">//const_cast：用于添加或移除变量的const性质</span>\\n\\t<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">//错误的使用方式：int b = const_cast&lt;int&gt;(a);//因为const_cast主要用于指针或引用去除const</span>\\n\\t<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> constPtr <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>a<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> nonConstPtr <span class=\\"token operator\\">=</span> const_cast<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>constPtr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//去除constPtr的const属性</span>\\n\\n\\t<span class=\\"token comment\\">//dynamic_cast：用于基类和派生类的转换</span>\\n\\tclass Bsae\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tvirtual <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\tclass Derived <span class=\\"token operator\\">:</span> public Base <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\tBase<span class=\\"token operator\\">*</span> basePtr <span class=\\"token operator\\">=</span> new Derived<span class=\\"token punctuation\\">;</span>\\n\\tDerived<span class=\\"token operator\\">*</span> derivedPtr <span class=\\"token operator\\">=</span> dynamic_cast<span class=\\"token operator\\">&lt;</span>Derived<span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>basePtr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//基类Base转换为派生类Derived</span>\\n\\t\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//explicit的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nclass MyClass\\n<span class=\\"token punctuation\\">{</span>\\n public<span class=\\"token operator\\">:</span>\\n\\texplicit <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">data</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">//构造函数禁止隐式转换</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getData</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> data<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n private<span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">int</span> data<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\tMyClass obj1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//错误，因为构造函数被标记为explicit，禁止隐式转换</span>\\n\\t<span class=\\"token comment\\">//说明：因为MyClass构造函数接受一个int类型的参数，所以42可以隐式的传递给MyClass的构造函数进行对象的构造</span>\\n\\t\\n\\tMyClass <span class=\\"token function\\">obj2</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//正确，使用构造函数显示创建对象</span>\\n    MyClass obj3 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//正确，先调用构造函数创建对象，再调用拷贝构造拷贝值给obj3</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//3.RTT1机制：运行时类型识别</span>\\n<span class=\\"token comment\\">//①typeid：运行时识别对象类型</span>\\n<span class=\\"token comment\\">//②dynamic_cast：运行时识别父类的指针或引用，用于安全的向下转型(向上转型本来就安全)</span>\\n<span class=\\"token comment\\">//③decltype：运行时推演一个表达式或函数返回值类型</span>\\n\\n<span class=\\"token comment\\">//typeid的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\nclass MyBaseClass\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">//...</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nclass MyDerivedClass <span class=\\"token operator\\">:</span> public MyBaseClass\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">//...</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\tMyBaseClass<span class=\\"token operator\\">*</span> ptr <span class=\\"token operator\\">=</span> new <span class=\\"token function\\">MyDerivedClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">typeid</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>ptr<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token function\\">typeid</span><span class=\\"token punctuation\\">(</span>MyDerivedClass<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tstd<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"ptr指向的对象是MyDerivedClass类型\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token comment\\">//没有结果，ptr指向对象不是MyDerivedClass类型</span>\\n\\tdelete ptr<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//dynamic_cast的使用</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\nclass MyBaseClass\\n<span class=\\"token punctuation\\">{</span>\\n\\tvirtual <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nclass MyDervivedClass <span class=\\"token operator\\">:</span> public MyBaseClass\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">//...</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\tMyBaseClass<span class=\\"token operator\\">*</span> ptr <span class=\\"token operator\\">=</span> new <span class=\\"token function\\">MyDervivedClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tMyDervivedClass<span class=\\"token operator\\">*</span> dervivedPtr <span class=\\"token operator\\">=</span> dynamic_cast<span class=\\"token operator\\">&lt;</span>MyDervivedClass<span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>ptr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>dervivedPtr<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tstd<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"转型成功\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">else</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tstd<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"转型失败\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//decltype的使用：decltype(expression) variableName;</span>\\n<span class=\\"token comment\\">//decltype用于推演类型，主要用于模板和泛型编程中</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">double</span><span class=\\"token operator\\">&amp;</span> y <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.14</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">decltype</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//a的类型为int</span>\\n\\t<span class=\\"token function\\">decltype</span><span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">)</span> b <span class=\\"token operator\\">=</span><span class=\\"token number\\">4.56</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//b的类型为const double&amp;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{d as comp,m as data};
