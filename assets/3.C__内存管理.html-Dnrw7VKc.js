import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/3.C__%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-BhUKswnh.png",e={},o=t('<h1 id="第三章-c-内存管理" tabindex="-1"><a class="header-anchor" href="#第三章-c-内存管理"><span>第三章：C++内存管理</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：JimBo (1353429820@qq.com)</span>
<span class="token comment">//  Filename：main</span>
<span class="token comment">//  Date：2024/1/16</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>


<span class="token comment">//1.new与delete用法</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//动态申请释放一个空间</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">;</span>
    delete ptr<span class="token punctuation">;</span>

    <span class="token comment">//动态申请释放多个某类型空间</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ptr2 <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建10个</span>
    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> ptr2<span class="token punctuation">;</span>

    <span class="token comment">//动态申请释放一个某类型空间并初始化</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ptr3 <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化为1</span>
    delete ptr3<span class="token punctuation">;</span>

    <span class="token comment">//动态申请释放多个某类型空间并初始化</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ptr4 <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> ptr4<span class="token punctuation">;</span>

    <span class="token comment">//动态申请释放一个类的空间</span>
    string<span class="token operator">*</span> ptr5 <span class="token operator">=</span> new string<span class="token punctuation">;</span>
    delete ptr5<span class="token punctuation">;</span>

    <span class="token comment">//动态申请多个类的空间</span>
    string<span class="token operator">*</span> ptr6 <span class="token operator">=</span> new string<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> ptr6<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//2.定位new表达式</span>
<span class="token comment">//定位new表达式是C++中的一种特殊形式的new表达式，它允许在已分配的内存块中构造对象</span>
<span class="token comment">//形式：new(place_address)type</span>
<span class="token comment">//比如：new(buffer)Myclass(1)，给预先分配内存块的buffer中构造Myclass对象类型，(1)是传给Myclass构造函数的参数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

class MyClass
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;使用值调用的构造函数: &quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;使用值调用的析构函数: &quot;</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

private<span class="token operator">:</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//分配内存块</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 为5个MyClass对象分配足够的空间</span>

    <span class="token comment">//使用定位new在已分配的内存块中构造对象</span>
    <span class="token comment">//new(buffer)Myclass(1)，给预先分配内存块的buffer中构造Myclass对象类型</span>
    <span class="token comment">//(1)是传给Myclass构造函数的参数</span>
    MyClass<span class="token operator">*</span> myObjects <span class="token operator">=</span> <span class="token function">new</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    myObjects<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 移动指针到下一个位置</span>
    <span class="token function">new</span> <span class="token punctuation">(</span>myObjects<span class="token punctuation">)</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 使用完对象后手动调用析构函数</span>
    myObjects<span class="token operator">-&gt;</span><span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myObjects<span class="token operator">--</span><span class="token punctuation">;</span>
    myObjects<span class="token operator">-&gt;</span><span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    使用值调用的构造函数: 1
    使用值调用的构造函数: 2
    使用值调用的析构函数: 2
    使用值调用的析构函数: 1 
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","3.C__内存管理.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/3.C__%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","title":"第三章：C++内存管理","lang":"zh-CN","frontmatter":{"date":"2024-02-03T00:00:00.000Z","order":4,"description":"第三章：C++内存管理 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/3.C__%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第三章：C++内存管理"}],["meta",{"property":"og:description","content":"第三章：C++内存管理 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第三章：C++内存管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":1.74,"words":522},"filePathRelative":"编程学习/2.CPP/3.C++内存管理.md","localizedDate":"2024年2月3日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：JimBo (1353429820@qq.com)</span>\\n<span class=\\"token comment\\">//  Filename：main</span>\\n<span class=\\"token comment\\">//  Date：2024/1/16</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n\\n<span class=\\"token comment\\">//1.new与delete用法</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;string&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//动态申请释放一个空间</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr <span class=\\"token operator\\">=</span> new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">;</span>\\n    delete ptr<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//动态申请释放多个某类型空间</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr2 <span class=\\"token operator\\">=</span> new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//创建10个</span>\\n    delete<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> ptr2<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//动态申请释放一个某类型空间并初始化</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr3 <span class=\\"token operator\\">=</span> new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//初始化为1</span>\\n    delete ptr3<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//动态申请释放多个某类型空间并初始化</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> ptr4 <span class=\\"token operator\\">=</span> new <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    delete<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> ptr4<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//动态申请释放一个类的空间</span>\\n    string<span class=\\"token operator\\">*</span> ptr5 <span class=\\"token operator\\">=</span> new string<span class=\\"token punctuation\\">;</span>\\n    delete ptr5<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//动态申请多个类的空间</span>\\n    string<span class=\\"token operator\\">*</span> ptr6 <span class=\\"token operator\\">=</span> new string<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    delete<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> ptr6<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//2.定位new表达式</span>\\n<span class=\\"token comment\\">//定位new表达式是C++中的一种特殊形式的new表达式，它允许在已分配的内存块中构造对象</span>\\n<span class=\\"token comment\\">//形式：new(place_address)type</span>\\n<span class=\\"token comment\\">//比如：new(buffer)Myclass(1)，给预先分配内存块的buffer中构造Myclass对象类型，(1)是传给Myclass构造函数的参数</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n\\nclass MyClass\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">value</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"使用值调用的构造函数: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"使用值调用的析构函数: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> value <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//分配内存块</span>\\n    <span class=\\"token keyword\\">char</span> buffer<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>MyClass<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 为5个MyClass对象分配足够的空间</span>\\n\\n    <span class=\\"token comment\\">//使用定位new在已分配的内存块中构造对象</span>\\n    <span class=\\"token comment\\">//new(buffer)Myclass(1)，给预先分配内存块的buffer中构造Myclass对象类型</span>\\n    <span class=\\"token comment\\">//(1)是传给Myclass构造函数的参数</span>\\n    MyClass<span class=\\"token operator\\">*</span> myObjects <span class=\\"token operator\\">=</span> <span class=\\"token function\\">new</span> <span class=\\"token punctuation\\">(</span>buffer<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    myObjects<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 移动指针到下一个位置</span>\\n    <span class=\\"token function\\">new</span> <span class=\\"token punctuation\\">(</span>myObjects<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 使用完对象后手动调用析构函数</span>\\n    myObjects<span class=\\"token operator\\">-&gt;</span><span class=\\"token operator\\">~</span><span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    myObjects<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n    myObjects<span class=\\"token operator\\">-&gt;</span><span class=\\"token operator\\">~</span><span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    使用值调用的构造函数: 1\\n    使用值调用的构造函数: 2\\n    使用值调用的析构函数: 2\\n    使用值调用的析构函数: 1 \\n*/</span>\\n</code></pre></div>"}');export{d as comp,m as data};
