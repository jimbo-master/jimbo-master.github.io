import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Dezzdk4T.js";const p="/assets/2.C__%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1-c4i-Ogx9.png",o={},e=t('<h1 id="第二章-c-类和对象" tabindex="-1"><a class="header-anchor" href="#第二章-c-类和对象"><span>第二章：C++类和对象</span></a></h1><h2 id="知识点思维导图" tabindex="-1"><a class="header-anchor" href="#知识点思维导图"><span>知识点思维导图</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="复习代码" tabindex="-1"><a class="header-anchor" href="#复习代码"><span>复习代码</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//  Author：JimBo (1353429820@qq.com)</span>
<span class="token comment">//  Filename：main</span>
<span class="token comment">//  Date：2024/1/15</span>
<span class="token comment">//  Description：review knowledge points</span>
<span class="token comment">//  Copyrights（c）JimBo. All rights reserved</span>


<span class="token comment">//3.类的引入：struct升级为类</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token comment">//在C语言中struct是结构体不能在struct里定义函数。在C++中struct被升级为了类(class)，可以在struct中定义函数</span>
<span class="token keyword">struct</span> <span class="token class-name">Student</span> 
<span class="token punctuation">{</span>
    <span class="token comment">//成员变量定义习惯在前面加m_</span>
    <span class="token keyword">char</span> m_name1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> m_gender1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>  m_age1<span class="token punctuation">;</span>

    <span class="token comment">//设置学生基本信息</span>
    <span class="token keyword">void</span> <span class="token function">Set_StudentInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> gender<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_name1<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_gender1<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_age1 <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//打印学生信息</span>
    <span class="token keyword">void</span> <span class="token function">Print_StudentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> m_name1 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> m_gender1 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> m_age1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Student s<span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">Set_StudentInfo</span><span class="token punctuation">(</span><span class="token string">&quot;小张&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">Print_StudentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    运行结果：
            小张 男 18
*/</span>


<span class="token comment">//3.类的定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token comment">//同时声明和定义类的方法</span>
class Dog
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token comment">//成员函数</span>
        <span class="token keyword">void</span> <span class="token function">ShowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;姓名：&quot;</span> <span class="token operator">&lt;&lt;</span> m_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;性别：&quot;</span> <span class="token operator">&lt;&lt;</span> m_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;年龄：&quot;</span> <span class="token operator">&lt;&lt;</span> m_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

public<span class="token operator">:</span>
        <span class="token comment">//成员变量</span>
        <span class="token comment">//声明和定义的区分：不开空间是声明，开空间是定义</span>
        
        <span class="token comment">//所以下面的成员变量是声明，创建对象时才定义</span>
        <span class="token keyword">char</span><span class="token operator">*</span> m_name<span class="token punctuation">;</span><span class="token comment">//姓名</span>
        <span class="token keyword">char</span><span class="token operator">*</span> m_sex<span class="token punctuation">;</span><span class="token comment">//性别</span>
        <span class="token keyword">int</span>   m_age<span class="token punctuation">;</span><span class="token comment">//年龄</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//分开声明和定义类的方法：ShowInfo方法声明放.h里，实现放在.cpp里</span>


<span class="token comment">//8.类的大小问题</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token comment">//类中既有成员变量，又有成员函数</span>
class A1
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token comment">//成员函数放在公共代码段，不在类中</span>
        <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token comment">//成员变量放在类中，符合C语言内存对齐规则</span>
        <span class="token comment">//对齐数：默认对齐数和成员自身大小的较小值</span>
        <span class="token comment">//最大对齐数：成员中对齐数最大的</span>
        <span class="token comment">//结构体/类大小：最大对齐数的整数倍</span>
        
        <span class="token keyword">int</span> _a<span class="token punctuation">;</span>  <span class="token comment">//对齐数4</span>
        <span class="token keyword">char</span> _aa<span class="token punctuation">;</span><span class="token comment">//对齐数1</span>
        <span class="token comment">//成员总大小是5，则类大小为最大对齐数4的倍数，即8</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//类中仅有成员函数</span>
class A2
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment">//没有成员变量的类对象，编译会给他们分配1byte占位，表示对象存在过</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//类中什么都没有---空类</span>
class A3<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//没有成员变量的类对象，编译会给他们分配1byte占位，表示对象存在过</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token comment">//计算类的长度，符合C语言内存对齐规则</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;sizeof(A1)：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//8</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;sizeof(A2)：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//1</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;sizeof(A3)：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A3<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//1</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
        运行结果：
                sizeof(A1)：8
                sizeof(A2)：1
                sizeof(A3)：1
*/</span>



<span class="token comment">//9.探究this指针</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token comment">//定义一个日期类Date</span>
class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> _year <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> _month <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> _day <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">void</span> <span class="token function">SetDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span> <span class="token comment">// 年</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span> <span class="token comment">// 月</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span> <span class="token comment">// 日</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">SetDate</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span><span class="token function">SetDate</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
        Date类中有SetDate与Display两个成员函数，他们是存在公共代码段的，函数体中没有关于不同对象的区分，那当s1调用SetDate函数时，
        该函数是如何知道应该设置s1对象，而不是设置s2对象呢？

        实现方法：void Dispaly()会被编译器默认处理成void Display(Date* this) 严格来说是Date* const this(const修饰this)
        如下代码：

        //隐藏this指针的原函数
        void Display()
        {
                cout &lt;&lt;_year&lt;&lt; &quot;-&quot; &lt;&lt;_month &lt;&lt; &quot;-&quot;&lt;&lt; _day &lt;&lt;endl;
        }

        //显示this指针的原函数
        void Display(Date* const this)
        {
                //Date* const this谁调用就访问谁的成员
                cout &lt;&lt;this-&gt;_year&lt;&lt; &quot;-&quot; &lt;&lt;this-&gt;_month &lt;&lt; &quot;-&quot;&lt;&lt;this-&gt;_day &lt;&lt;endl;
        }

*/</span>


<span class="token comment">//10.构造函数</span>
class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token comment">//0.不写构造函数，编译器自动生成一个构造函数</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//自动生成</span>

        <span class="token comment">// 1.无参构造函数</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token comment">// 2.带参构造函数</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span>

        <span class="token comment">//以下代码为C++11补丁，针对编译器自己生成默认成员函数不初始化问题</span>
        <span class="token comment">//给的缺省值，给编译器自己生成的默认构造函数使用</span>
        
        <span class="token comment">//int _year=0;        </span>
        <span class="token comment">//int _month=0;</span>
        <span class="token comment">//int _day=0;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">TestDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token comment">// 注意：如果通过无参构造函数创建对象时，对象后面不用跟括号，否则就成了函数声明</span>
        Date d1<span class="token punctuation">;</span><span class="token comment">// 调用无参构造函数</span>
        Date <span class="token function">d2</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用带参的构造函数</span>
        Date <span class="token function">d3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明了d3函数，该函数无参，返回一个日期类型的对象</span>
<span class="token punctuation">}</span>


<span class="token comment">//10.析构函数</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span>
class SeqList
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">SeqList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//全缺省构造函数---初始化类的成员变量</span>
        <span class="token punctuation">{</span>
                _Data <span class="token operator">=</span> <span class="token punctuation">(</span>DataType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DataType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">assert</span><span class="token punctuation">(</span>_Data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                _size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                _capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">//只有类需要管理空间才自己写析构函数</span>
        <span class="token operator">~</span><span class="token function">SeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//析构函数---销毁类的成员</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>_Data<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                        <span class="token function">free</span><span class="token punctuation">(</span>_Data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放堆上的空间</span>
                        _pData <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 将指针置为空</span>
                        _capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                        _size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span><span class="token operator">*</span> _Data<span class="token punctuation">;</span>
        <span class="token class-name">size_t</span> _size<span class="token punctuation">;</span>
        <span class="token class-name">size_t</span> _capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>



<span class="token comment">//10.拷贝构造函数优化问题：类对象初始化、作函数参数、作返回值就调用拷贝构造函数</span>

<span class="token comment">//没有优化的编译器</span>
class Weight
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">Weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Weight()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">weight</span><span class="token punctuation">(</span><span class="token keyword">const</span> Weight<span class="token operator">&amp;</span> w<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Weight(const Weight&amp; w)&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Weight <span class="token function">func1</span><span class="token punctuation">(</span>Weight u<span class="token punctuation">)</span><span class="token comment">//调用函数传参时会拷贝构造一次---函数参数以对象传递</span>
<span class="token punctuation">{</span>
        Weight <span class="token function">v</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Weight v(u)和Weight v=u 等价  拷贝构造一次---对象初始化</span>
        Weight w <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token comment">//拷贝构造一次---对象初始化</span>
        <span class="token keyword">return</span> w<span class="token punctuation">;</span><span class="token comment">//拷贝构造一---函数返回值以对象返回   先拷贝构造一个临时变量，再拷贝给赋的值</span>
<span class="token punctuation">}</span>
<span class="token comment">//func1调用4次拷贝构造</span>

Weight <span class="token function">func2</span><span class="token punctuation">(</span>Weight<span class="token operator">&amp;</span> u<span class="token punctuation">)</span><span class="token comment">//这里用的是别名，不会调用拷贝构造</span>
<span class="token punctuation">{</span>
        Weight <span class="token function">v</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造一次</span>
        Weight w <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token comment">//拷贝构造一次</span>
        <span class="token keyword">return</span> w<span class="token punctuation">;</span><span class="token comment">//拷贝构造一次</span>
<span class="token punctuation">}</span>
<span class="token comment">//func2调用3次拷贝构造</span>

Weight<span class="token operator">&amp;</span> <span class="token function">func3</span><span class="token punctuation">(</span>Weight<span class="token operator">&amp;</span> u<span class="token punctuation">)</span><span class="token comment">//这里用的别名，不拷贝构造</span>
<span class="token punctuation">{</span>
        Weight <span class="token function">v</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造一次   直接构造</span>
        Weight w <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token comment">//拷贝构造一次           隐式类型转换</span>
        <span class="token keyword">return</span> w<span class="token punctuation">;</span><span class="token comment">//返回值用的别名，不拷贝构造</span>
<span class="token punctuation">}</span>
<span class="token comment">//func3调用2次拷贝构造</span>




<span class="token comment">//优化的编译器</span>
<span class="token comment">//例题:这个函数调用了几次拷贝构造函数? 答案：7次   </span>

<span class="token comment">//一个表达式中，连续步骤的构造+拷贝构造或者拷贝构造+拷贝构造，编译器可能优化，合二为一</span>
Weight <span class="token function">f</span><span class="token punctuation">(</span>Weight u<span class="token punctuation">)</span><span class="token comment">//1  省略一次</span>
<span class="token punctuation">{</span>
        Weight <span class="token function">v</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2  5</span>
        Weight w <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token comment">//3  6</span>
        <span class="token keyword">return</span> w<span class="token punctuation">;</span><span class="token comment">//4  7</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Weight x<span class="token punctuation">;</span>
        Weight y <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    说明：
        第一次调用f(x)，4次
        第二次调用f(f(x))，省略第一次参数时x给u的拷贝构造，其他相同，一共4+3=7次
*/</span>


<span class="token comment">//10.拷贝构造函数特性</span>
class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">,</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//全缺省构造函数</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token comment">//拷贝构造函数</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> d<span class="token punctuation">.</span>_year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> d<span class="token punctuation">.</span>_month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> d<span class="token punctuation">.</span>_day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date d1<span class="token punctuation">;</span>    <span class="token comment">//调用默认构造---全缺省、不写自动生成、无参构造</span>
        Date <span class="token function">d2</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用拷贝构造</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">,</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//全缺省构造函数</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//生成默认拷贝构造函数</span>
        <span class="token comment">//Date(const Date&amp; d){}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date d1<span class="token punctuation">;</span><span class="token comment">//调用默认构造函数，使用全缺省构造函数</span>
        <span class="token comment">//这里d2调用的默认拷贝构造完成拷贝，d2和d1的值也是一样的。</span>
        Date <span class="token function">d2</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token comment">//10.const引发的浅拷贝崩溃问题---需要深拷贝解决问题</span>
class String
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token comment">//浅拷贝构造函数</span>
        <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                _str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strcpy</span><span class="token punctuation">(</span>_str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 深拷贝构造函数</span>
        <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>_str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>_str<span class="token punctuation">,</span> other<span class="token punctuation">.</span>_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    
        <span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
             cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;~String()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
             <span class="token function">free</span><span class="token punctuation">(</span>_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">char</span><span class="token operator">*</span> _str<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        String <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用浅拷贝</span>
        String <span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用深拷贝，浅拷贝程序会崩掉 需要深拷贝才能解决问题</span>
        <span class="token comment">//解析：</span>
        <span class="token comment">//浅拷贝是直接将内容复制过去，所以s1和s2的_str的地址是一样的</span>
        <span class="token comment">//s1和s2的_str指向同一块空间，从而导致资源释放时，_str被释放两次，从而导致野指针问题崩溃</span>
        <span class="token comment">//解决方案：自己实现拷贝构造，即深拷贝</span>
<span class="token punctuation">}</span>


<span class="token comment">//10.全局和局部运算符重载</span>
<span class="token comment">// 全局的operator==</span>
class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">,</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bool operator<span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token comment">//局部operator</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> _year <span class="token operator">==</span> d<span class="token punctuation">.</span>year
                        <span class="token operator">&amp;&amp;</span> _month <span class="token operator">==</span> d<span class="token punctuation">.</span>month
                        <span class="token operator">&amp;&amp;</span> _day <span class="token operator">==</span> d<span class="token punctuation">.</span>day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//private:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 这里会发现运算符重载成全局的就需要成员变量是共有的，那么问题来了，封装性如何保证？</span>


<span class="token comment">// 这里其实可以用我们后面学习的友元解决，或者干脆重载成成员函数</span>
bool operator<span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span><span class="token comment">//操作符重载的声明和定义，全局operator</span>
<span class="token punctuation">{</span>
        <span class="token keyword">return</span> d1<span class="token punctuation">.</span>_year <span class="token operator">==</span> d2<span class="token punctuation">.</span>_year
                <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>_month <span class="token operator">==</span> d2<span class="token punctuation">.</span>_month
                <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>_day <span class="token operator">==</span> d2<span class="token punctuation">.</span>_day<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//这里编译不通过，因为上面的成员是私有的</span>
<span class="token comment">//处理方法3种：成员改为共有、提供函数获取内容、友元函数(常用)</span>

<span class="token comment">//运算符重载格式：</span>
<span class="token comment">//1.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>operator<span class="token operator">==</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//定义的：类外的operator，全局operator</span>
<span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;==&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//2.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>d1<span class="token punctuation">.</span>operator<span class="token operator">==</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//定义的：类里面的operator，成员operator</span>
<span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;==&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//3.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span><span class="token comment">//编译器会处理成对应重载运算符调用if(operator==(d1,d2)){}或if(d1.operator(d2)){}</span>
<span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;==&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date <span class="token function">d1</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Date <span class="token function">d2</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//10.运算符重载默认形参this</span>
class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">,</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// bool operator==(Date* this, const Date&amp; d2)</span>
        <span class="token comment">// 这里需要注意的是，左操作数是this指向的调用函数的对象</span>

        bool operator<span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span><span class="token comment">//操作符重载 隐含Date* this指针</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> _year <span class="token operator">==</span> d2<span class="token punctuation">.</span>_year<span class="token punctuation">;</span>
                <span class="token operator">&amp;&amp;</span> _month <span class="token operator">==</span> d2<span class="token punctuation">.</span>_month<span class="token punctuation">;</span>
                <span class="token operator">&amp;&amp;</span> _day <span class="token operator">==</span> d2<span class="token punctuation">.</span>_day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date <span class="token function">d1</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Date <span class="token function">d2</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//d1==d2 -&gt;d1.operator==(const Date&amp; d2);</span>
<span class="token punctuation">}</span>


<span class="token comment">//10.赋值运算符重载特性</span>
class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">,</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//构造函数</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//赋值重载</span>
        Date<span class="token operator">&amp;</span> operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token comment">//返回Date类的引用</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>this <span class="token operator">!=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token comment">//判断是否自己赋值自己</span>
                <span class="token punctuation">{</span>
                        _year <span class="token operator">=</span> d<span class="token punctuation">.</span>_year<span class="token punctuation">;</span>
                        _month <span class="token operator">=</span> d<span class="token punctuation">.</span>_month<span class="token punctuation">;</span>
                        _day <span class="token operator">=</span> d<span class="token punctuation">.</span>_day<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date <span class="token function">d1</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Date <span class="token function">d2</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Date <span class="token function">d3</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造---一个存在的对象去初始化另一个要创建的对象</span>
        d2 <span class="token operator">=</span> d1<span class="token punctuation">;</span><span class="token comment">//赋值重载/复制拷贝---两个已经存在的对象之间赋值</span>
        <span class="token function">d1</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值重载---两个已经存在的对象赋值</span>
<span class="token punctuation">}</span>


<span class="token comment">//10.普通对象取地址和const对象取地址</span>
class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        Date<span class="token operator">*</span> operator<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//普通对象取地址</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> this<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">const</span> Date<span class="token operator">*</span> operator<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token comment">//const取地址</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> this<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span> <span class="token comment">// 年</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span> <span class="token comment">// 月</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span> <span class="token comment">// 日</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>d1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token comment">//C++默认构造函数的练习：日期类的实现</span>

<span class="token comment">//日期类文件名：Date.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h&gt;</span></span>
using std<span class="token operator">::</span>cin<span class="token punctuation">;</span>
using std<span class="token operator">::</span>cout<span class="token punctuation">;</span>
using std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        bool <span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token comment">//是闰年     4年一润且百年不润，或400年一润</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> <span class="token function">GetMonthDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 默认生成的析构函数，内置类型成员不做处理，自定义类型成员会去调用它的析构函数</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Date(const Date&amp; d)</span>
        <span class="token comment">//{</span>
        <span class="token comment">//        _year = d._year;</span>
        <span class="token comment">//        _month = d._month;</span>
        <span class="token comment">//        _day = d._day;</span>
        <span class="token comment">//}</span>

        <span class="token comment">//Date&amp; operator=(const Date&amp; d)</span>
        <span class="token comment">//{</span>
        <span class="token comment">//        if (this != &amp;d)</span>
        <span class="token comment">//        {</span>
        <span class="token comment">//                _year = d._year;</span>
        <span class="token comment">//                _month = d._month;</span>
        <span class="token comment">//                _day = d._day;</span>
        <span class="token comment">//        }</span>

        <span class="token comment">//        return *this;</span>
        <span class="token comment">//}</span>

        <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
        <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> _year <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> _month <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> _day <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        Date operator<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span>  <span class="token keyword">const</span><span class="token punctuation">;</span>
        Date<span class="token operator">&amp;</span> operator<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Date operator<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span>  <span class="token keyword">const</span><span class="token punctuation">;</span>
        Date<span class="token operator">&amp;</span> operator<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//代码短的用inline</span>
        <span class="token comment">// ++d1</span>
        Date<span class="token operator">&amp;</span> operator<span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 前置</span>
        <span class="token punctuation">{</span>
                <span class="token operator">*</span>this <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// d1++</span>
        Date operator<span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token comment">// 后置 这里的int传的值大小无关，只是用于区分，一般写0或1</span>
        <span class="token punctuation">{</span>
                Date <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token operator">*</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝一份当前值</span>
                <span class="token operator">*</span>this <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        Date<span class="token operator">&amp;</span> operator<span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 前置</span>
        <span class="token punctuation">{</span>
                <span class="token operator">*</span>this <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        Date operator<span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token comment">// 后置</span>
        <span class="token punctuation">{</span>
                Date <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token operator">*</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>this <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// d1 - d2</span>
        <span class="token keyword">int</span> operator<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

        bool operator<span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>  <span class="token keyword">const</span><span class="token punctuation">;</span>
        bool operator<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>  <span class="token keyword">const</span><span class="token punctuation">;</span>

        <span class="token comment">// inline不支持声明和定义分别放到.h 和.cpp</span>
        <span class="token comment">// 所以成员函数中要成为inline最好直接在类里面定义</span>
        <span class="token comment">// 类里面定义默认就是inline</span>
        bool operator<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>  <span class="token keyword">const</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>this <span class="token operator">&lt;=</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        bool operator<span class="token operator">&gt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>  <span class="token keyword">const</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>this <span class="token operator">&lt;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        bool operator<span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>  <span class="token keyword">const</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span>  <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>this <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// d1 &lt;= d2</span>
        bool operator<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>  <span class="token keyword">const</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">*</span>this <span class="token operator">&lt;</span> d <span class="token operator">||</span> <span class="token operator">*</span>this <span class="token operator">==</span> d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">//文件名：Date.cpp</span>

<span class="token comment">//Date.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Date.h&quot;</span></span>

bool Date<span class="token operator">::</span>operator<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token keyword">const</span>
<span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_year <span class="token operator">&lt;</span> d<span class="token punctuation">.</span>_year<span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token punctuation">(</span>_year <span class="token operator">==</span> d<span class="token punctuation">.</span>_year <span class="token operator">&amp;&amp;</span> _month <span class="token operator">&lt;</span> d<span class="token punctuation">.</span>_month<span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token punctuation">(</span>_year <span class="token operator">==</span> d<span class="token punctuation">.</span>_year <span class="token operator">&amp;&amp;</span> _month <span class="token operator">==</span> d<span class="token punctuation">.</span>_month <span class="token operator">&amp;&amp;</span> _day <span class="token operator">&lt;</span> d<span class="token punctuation">.</span>_day<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// d1 == d2</span>
bool Date<span class="token operator">::</span>operator<span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token keyword">const</span>
<span class="token punctuation">{</span>
        <span class="token keyword">return</span> _year <span class="token operator">==</span> d<span class="token punctuation">.</span>_year
                <span class="token operator">&amp;&amp;</span> _month <span class="token operator">==</span> d<span class="token punctuation">.</span>_month
                <span class="token operator">&amp;&amp;</span> _day <span class="token operator">==</span> d<span class="token punctuation">.</span>_day<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> Date<span class="token operator">::</span><span class="token function">GetMonthDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>year <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> month <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">int</span> monthDayArray<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isLeapYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">29</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> monthDayArray<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Date<span class="token operator">::</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
                month <span class="token operator">&lt;=</span> <span class="token number">12</span> <span class="token operator">&amp;&amp;</span> month <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
                day <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> day <span class="token operator">&lt;=</span> <span class="token function">GetMonthDay</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                _year <span class="token operator">=</span> year<span class="token punctuation">;</span>
                _month <span class="token operator">=</span> month<span class="token punctuation">;</span>
                _day <span class="token operator">=</span> day<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;日期错误&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// d1 + 100 --&gt;d1.operator+(day);</span>

<span class="token comment">// d1 += 100</span>
Date<span class="token operator">&amp;</span> Date<span class="token operator">::</span>operator<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token operator">*</span>this <span class="token operator">=</span> <span class="token operator">*</span>this <span class="token operator">+</span> day<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


Date Date<span class="token operator">::</span>operator<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date <span class="token function">ret</span><span class="token punctuation">(</span><span class="token operator">*</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ret<span class="token punctuation">.</span>_day <span class="token operator">+=</span> day<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span>_day <span class="token operator">&gt;</span> <span class="token function">GetMonthDay</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>_year<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>_month<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                ret<span class="token punctuation">.</span>_day <span class="token operator">-=</span> <span class="token function">GetMonthDay</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>_year<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>_month<span class="token punctuation">)</span><span class="token punctuation">;</span>
                ret<span class="token punctuation">.</span>_month<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span>_month <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                        <span class="token operator">++</span>ret<span class="token punctuation">.</span>_year<span class="token punctuation">;</span>
                        ret<span class="token punctuation">.</span>_month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Date Date<span class="token operator">::</span>operator<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token keyword">const</span>
<span class="token punctuation">{</span>
        Date <span class="token function">ret</span><span class="token punctuation">(</span><span class="token operator">*</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">+=</span> day<span class="token punctuation">;</span>

        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// d1 += 100</span>
Date<span class="token operator">&amp;</span> Date<span class="token operator">::</span>operator<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">*</span>this <span class="token operator">-=</span> <span class="token operator">-</span>day<span class="token punctuation">;</span>

        _day <span class="token operator">+=</span> day<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>_day <span class="token operator">&gt;</span> <span class="token function">GetMonthDay</span><span class="token punctuation">(</span>_year<span class="token punctuation">,</span> _month<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                _day <span class="token operator">-=</span> <span class="token function">GetMonthDay</span><span class="token punctuation">(</span>_year<span class="token punctuation">,</span> _month<span class="token punctuation">)</span><span class="token punctuation">;</span>
                _month<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>_month <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                        <span class="token operator">++</span>_year<span class="token punctuation">;</span>
                        _month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Date Date<span class="token operator">::</span>operator<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token keyword">const</span>
<span class="token punctuation">{</span>
        Date ret <span class="token operator">=</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
        ret <span class="token operator">-=</span> day<span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// d1 -= 100</span>
Date<span class="token operator">&amp;</span> Date<span class="token operator">::</span>operator<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">*</span>this <span class="token operator">+=</span> <span class="token operator">-</span>day<span class="token punctuation">;</span>

        _day <span class="token operator">-=</span> day<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>_day <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token operator">--</span>_month<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>_month <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                        _month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
                        <span class="token operator">--</span>_year<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                _day <span class="token operator">+=</span> <span class="token function">GetMonthDay</span><span class="token punctuation">(</span>_year<span class="token punctuation">,</span> _month<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// d1 - d2 --&gt;  d1.operator-(const Date&amp; d) const </span>

<span class="token comment">//最简日期类相减运算</span>
<span class="token keyword">int</span> Date<span class="token operator">::</span>operator<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token keyword">const</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//设置标识：1为正数，-1为负数</span>
        Date max <span class="token operator">=</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
        Date min <span class="token operator">=</span> d<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>this <span class="token operator">&lt;</span> d<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                min <span class="token operator">=</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
                max <span class="token operator">=</span> d<span class="token punctuation">;</span>
                flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//天数标识</span>
        <span class="token comment">//最大值和最小值不相等则让天数+1，用n标记数，最终由n*flag确定相差的天数</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> max<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token operator">++</span>n<span class="token punctuation">;</span>
                <span class="token operator">++</span>min<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>





<span class="token comment">//11.初始化列表</span>
<span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
class Date
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token comment">//列表初始化</span>
                <span class="token operator">:</span> <span class="token function">_year</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>
                <span class="token punctuation">,</span> <span class="token function">_month</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span>
                <span class="token punctuation">,</span> <span class="token function">_day</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day，<span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token comment">//列表初始化</span>
                <span class="token operator">:</span> <span class="token function">_year</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>
                <span class="token punctuation">,</span> <span class="token function">_month</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span>
                <span class="token punctuation">,</span> <span class="token function">_day</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>
                <span class="token punctuation">,</span> <span class="token function">_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
                <span class="token punctuation">,</span> <span class="token function">_data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token comment">//以下代码会报错：Date::n和Date::data必须初始化引用类型的成员，因为对象赋值不能让成员初始化，没有给_n和_data开空间</span>
        <span class="token comment">/*
        Date(int year,int month,int day,int n,int data)
        {
                _year=year;
                _month=month;
                _day=day;
                _n=n;
                _data=data;
        }*/</span>

private<span class="token operator">:</span>
        <span class="token comment">//这些成员不需要考虑，它们可以在定义的时候初始化也可以定义后赋值修改</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span><span class="token comment">//声明_yaer</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span><span class="token comment">//声明_month</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span><span class="token comment">//声明_day</span>

        <span class="token comment">//这些成员(引用、const、没有默认构造函数)只能在定义的时候初始化</span>
        <span class="token keyword">const</span> <span class="token keyword">int</span> _n<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token operator">&amp;</span> _data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date <span class="token function">d1</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象定义 对象整体定义调用构造函数，而初始化列表就是对象成员的定义</span>
        date d2<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token comment">//11.初始化列表特性</span>
class B
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
                <span class="token operator">:</span><span class="token function">_x</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//先列表初始化_x，再_y，再_z</span>
                <span class="token punctuation">,</span> <span class="token function">_z</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
                <span class="token punctuation">,</span> <span class="token function">_y</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span>
private<span class="token operator">:</span>
        A _x<span class="token punctuation">;</span> <span class="token comment">//自定义类型成员变量---没有默认构造函数</span>
        <span class="token keyword">int</span><span class="token operator">&amp;</span> _y<span class="token punctuation">;</span> <span class="token comment">//引用成员变量---由于B类中初始化列表初始化了_y</span>
        <span class="token keyword">const</span> <span class="token keyword">int</span> _z<span class="token punctuation">;</span> <span class="token comment">//const成员变量 </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

class A
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>
                <span class="token operator">:</span><span class="token function">_a1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//_a2初始化完，走_a1初始化，因为a=1，则_a1</span>
                <span class="token punctuation">,</span> <span class="token function">_a2</span><span class="token punctuation">(</span>_a1<span class="token punctuation">)</span><span class="token comment">//先走_a2的列表初始化，因为_a1还没初始化则_a2为随机值，值为随机值</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> _a1 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> _a2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span> _a2<span class="token punctuation">;</span><span class="token comment">//_a2先声明，则先执行_a2的初始化</span>
        <span class="token keyword">int</span> _a1<span class="token punctuation">;</span><span class="token comment">//_a2初始化完，然后_a1声明，_a1初始化</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        A <span class="token function">aa</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        aa<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 1 随机值</span>
<span class="token punctuation">}</span>


<span class="token comment">//12.explicit关键字</span>
class A
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
        <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token comment">// 单参数的构造函数</span>
                <span class="token operator">:</span> <span class="token function">_a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;A(int a)&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

private<span class="token operator">:</span>
        <span class="token keyword">int</span> _a<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token comment">// 实例化新对象的两种写法：</span>

        <span class="token comment">// 调用构造函数，实例化新对象a1</span>
        A <span class="token function">a1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// 下面本质上是一个隐式类型转换 --&gt; 用一个int类型变量给A类型对象赋值</span>
        <span class="token comment">// 实际上编译器，会先用20作为参数构造一个临时对象，再用临时对象拷贝构造新对象a2</span>
        <span class="token comment">// 最终编译器进行了优化(变成第一种形式)，直接用20作为参数构造新对象a2，把临时对象当成a2来用了，没有调用拷贝构造</span>
        A a2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//14.友元类与友元函数</span>
class Date
<span class="token punctuation">{</span>
        <span class="token comment">//友元函数哪里声明都可以，推荐类开始，在类外实现</span>
        friend ostream<span class="token operator">&amp;</span> operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> _cout<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//友元函数---可以访问私有、保护成员</span>
        friend istream<span class="token operator">&amp;</span> operator<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> _cin<span class="token punctuation">,</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//友元函数</span>
public<span class="token operator">:</span>


private<span class="token operator">:</span>
        <span class="token keyword">int</span> _year<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _month<span class="token punctuation">;</span>
        <span class="token keyword">int</span> _day<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

ostream<span class="token operator">&amp;</span> operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> _cout<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        _cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>_year <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>_month <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>_day<span class="token punctuation">;</span>
        <span class="token keyword">return</span> _cout<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

istream<span class="token operator">&amp;</span> operator<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> _cin<span class="token punctuation">,</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        _cin <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">.</span>_year<span class="token punctuation">;</span>
        _cin <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">.</span>_month<span class="token punctuation">;</span>
        _cin <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">.</span>_day<span class="token punctuation">;</span>
        <span class="token keyword">return</span> _cin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        Date d<span class="token punctuation">;</span><span class="token comment">//调用默认构造</span>
        cin <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">;</span><span class="token comment">//调用运算符重载</span>
        cout <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//调用运算符重载</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//15.内部类</span>
class A
<span class="token punctuation">{</span>
private<span class="token operator">:</span>
        <span class="token keyword">static</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>
        <span class="token keyword">int</span> h<span class="token punctuation">;</span>
public<span class="token operator">:</span>
        <span class="token comment">//B天生是A的友元，A不是B的友元</span>
        class B 
        <span class="token punctuation">{</span>
        public<span class="token operator">:</span>
                <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> a<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                        cout <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//内部类可以直接使用外部类的static成员、枚举成员</span>
                        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>h <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//内部类可以使用外部类对象成员</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> A<span class="token operator">::</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        A<span class="token operator">::</span>B b<span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[e];function l(i,u){return s(),a("div",null,c)}const d=n(o,[["render",l],["__file","2.C__类和对象.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/2.C__%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1.html","title":"第二章：C++类和对象","lang":"zh-CN","frontmatter":{"date":"2024-02-02T00:00:00.000Z","order":3,"description":"第二章：C++类和对象 知识点思维导图 复习代码","head":[["meta",{"property":"og:url","content":"https://github.com/jimbo-master/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.CPP/2.C__%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"JimBoの学习妙妙屋"}],["meta",{"property":"og:title","content":"第二章：C++类和对象"}],["meta",{"property":"og:description","content":"第二章：C++类和对象 知识点思维导图 复习代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"JimBo"}],["meta",{"property":"article:published_time","content":"2024-02-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第二章：C++类和对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JimBo\\",\\"url\\":\\"https://github.com/jimbo-master\\"}]}"]]},"headers":[{"level":2,"title":"知识点思维导图","slug":"知识点思维导图","link":"#知识点思维导图","children":[]},{"level":2,"title":"复习代码","slug":"复习代码","link":"#复习代码","children":[]}],"git":{},"readingTime":{"minutes":14.39,"words":4316},"filePathRelative":"编程学习/2.CPP/2.C++类和对象.md","localizedDate":"2024年2月2日","autoDesc":true,"excerpt":"\\n<h2>知识点思维导图</h2>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<h2>复习代码</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//  Author：JimBo (1353429820@qq.com)</span>\\n<span class=\\"token comment\\">//  Filename：main</span>\\n<span class=\\"token comment\\">//  Date：2024/1/15</span>\\n<span class=\\"token comment\\">//  Description：review knowledge points</span>\\n<span class=\\"token comment\\">//  Copyrights（c）JimBo. All rights reserved</span>\\n\\n\\n<span class=\\"token comment\\">//3.类的引入：struct升级为类</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//在C语言中struct是结构体不能在struct里定义函数。在C++中struct被升级为了类(class)，可以在struct中定义函数</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Student</span> \\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//成员变量定义习惯在前面加m_</span>\\n    <span class=\\"token keyword\\">char</span> m_name1<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">char</span> m_gender1<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span>  m_age1<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//设置学生基本信息</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Set_StudentInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> gender<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">strcpy</span><span class=\\"token punctuation\\">(</span>m_name1<span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">strcpy</span><span class=\\"token punctuation\\">(</span>m_gender1<span class=\\"token punctuation\\">,</span> gender<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        m_age1 <span class=\\"token operator\\">=</span> age<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">//打印学生信息</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Print_StudentInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> m_name1 <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> m_gender1 <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> m_age1 <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Student s<span class=\\"token punctuation\\">;</span>\\n    s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Set_StudentInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"小张\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"男\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Print_StudentInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    运行结果：\\n            小张 男 18\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//3.类的定义</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//同时声明和定义类的方法</span>\\nclass Dog\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token comment\\">//成员函数</span>\\n        <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">ShowInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"姓名：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> m_name <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"性别：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> m_name <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"年龄：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> m_name <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token comment\\">//成员变量</span>\\n        <span class=\\"token comment\\">//声明和定义的区分：不开空间是声明，开空间是定义</span>\\n        \\n        <span class=\\"token comment\\">//所以下面的成员变量是声明，创建对象时才定义</span>\\n        <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> m_name<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//姓名</span>\\n        <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> m_sex<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//性别</span>\\n        <span class=\\"token keyword\\">int</span>   m_age<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//年龄</span>\\n\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//分开声明和定义类的方法：ShowInfo方法声明放.h里，实现放在.cpp里</span>\\n\\n\\n<span class=\\"token comment\\">//8.类的大小问题</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//类中既有成员变量，又有成员函数</span>\\nclass A1\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token comment\\">//成员函数放在公共代码段，不在类中</span>\\n        <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">f1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token comment\\">//成员变量放在类中，符合C语言内存对齐规则</span>\\n        <span class=\\"token comment\\">//对齐数：默认对齐数和成员自身大小的较小值</span>\\n        <span class=\\"token comment\\">//最大对齐数：成员中对齐数最大的</span>\\n        <span class=\\"token comment\\">//结构体/类大小：最大对齐数的整数倍</span>\\n        \\n        <span class=\\"token keyword\\">int</span> _a<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">//对齐数4</span>\\n        <span class=\\"token keyword\\">char</span> _aa<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//对齐数1</span>\\n        <span class=\\"token comment\\">//成员总大小是5，则类大小为最大对齐数4的倍数，即8</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//类中仅有成员函数</span>\\nclass A2\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">f2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">//没有成员变量的类对象，编译会给他们分配1byte占位，表示对象存在过</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//类中什么都没有---空类</span>\\nclass A3<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//没有成员变量的类对象，编译会给他们分配1byte占位，表示对象存在过</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//计算类的长度，符合C语言内存对齐规则</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"sizeof(A1)：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>A1<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//8</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"sizeof(A2)：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>A2<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//1</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"sizeof(A3)：\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>A3<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//1</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n        运行结果：\\n                sizeof(A1)：8\\n                sizeof(A2)：1\\n                sizeof(A3)：1\\n*/</span>\\n\\n\\n\\n<span class=\\"token comment\\">//9.探究this指针</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//定义一个日期类Date</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Display</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> _year <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> _month <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> _day <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">SetDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 年</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 月</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 日</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date s1<span class=\\"token punctuation\\">,</span> s2<span class=\\"token punctuation\\">;</span>\\n        s1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SetDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2024</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        s2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SetDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2024</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        s1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Display</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        s2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Display</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n        Date类中有SetDate与Display两个成员函数，他们是存在公共代码段的，函数体中没有关于不同对象的区分，那当s1调用SetDate函数时，\\n        该函数是如何知道应该设置s1对象，而不是设置s2对象呢？\\n\\n        实现方法：void Dispaly()会被编译器默认处理成void Display(Date* this) 严格来说是Date* const this(const修饰this)\\n        如下代码：\\n\\n        //隐藏this指针的原函数\\n        void Display()\\n        {\\n                cout &lt;&lt;_year&lt;&lt; \\"-\\" &lt;&lt;_month &lt;&lt; \\"-\\"&lt;&lt; _day &lt;&lt;endl;\\n        }\\n\\n        //显示this指针的原函数\\n        void Display(Date* const this)\\n        {\\n                //Date* const this谁调用就访问谁的成员\\n                cout &lt;&lt;this-&gt;_year&lt;&lt; \\"-\\" &lt;&lt;this-&gt;_month &lt;&lt; \\"-\\"&lt;&lt;this-&gt;_day &lt;&lt;endl;\\n        }\\n\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//10.构造函数</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token comment\\">//0.不写构造函数，编译器自动生成一个构造函数</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token comment\\">//自动生成</span>\\n\\n        <span class=\\"token comment\\">// 1.无参构造函数</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// 2.带参构造函数</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">//以下代码为C++11补丁，针对编译器自己生成默认成员函数不初始化问题</span>\\n        <span class=\\"token comment\\">//给的缺省值，给编译器自己生成的默认构造函数使用</span>\\n        \\n        <span class=\\"token comment\\">//int _year=0;        </span>\\n        <span class=\\"token comment\\">//int _month=0;</span>\\n        <span class=\\"token comment\\">//int _day=0;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">TestDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 注意：如果通过无参构造函数创建对象时，对象后面不用跟括号，否则就成了函数声明</span>\\n        Date d1<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 调用无参构造函数</span>\\n        Date <span class=\\"token function\\">d2</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2015</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 调用带参的构造函数</span>\\n        Date <span class=\\"token function\\">d3</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//声明了d3函数，该函数无参，返回一个日期类型的对象</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//10.析构函数</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">int</span> DataType<span class=\\"token punctuation\\">;</span>\\nclass SeqList\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">SeqList</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> capacity <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//全缺省构造函数---初始化类的成员变量</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _Data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>DataType<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span>capacity <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>DataType<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token function\\">assert</span><span class=\\"token punctuation\\">(</span>_Data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                _size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n                _capacity <span class=\\"token operator\\">=</span> capacity<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        \\n        <span class=\\"token comment\\">//只有类需要管理空间才自己写析构函数</span>\\n        <span class=\\"token operator\\">~</span><span class=\\"token function\\">SeqList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//析构函数---销毁类的成员</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_Data<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token function\\">free</span><span class=\\"token punctuation\\">(</span>_Data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 释放堆上的空间</span>\\n                        _pData <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 将指针置为空</span>\\n                        _capacity <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n                        _size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> _Data<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">size_t</span> _size<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">size_t</span> _capacity<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n\\n<span class=\\"token comment\\">//10.拷贝构造函数优化问题：类对象初始化、作函数参数、作返回值就调用拷贝构造函数</span>\\n\\n<span class=\\"token comment\\">//没有优化的编译器</span>\\nclass Weight\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">Weight</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Weight()\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token function\\">weight</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Weight<span class=\\"token operator\\">&amp;</span> w<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Weight(const Weight&amp; w)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nWeight <span class=\\"token function\\">func1</span><span class=\\"token punctuation\\">(</span>Weight u<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//调用函数传参时会拷贝构造一次---函数参数以对象传递</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Weight <span class=\\"token function\\">v</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//Weight v(u)和Weight v=u 等价  拷贝构造一次---对象初始化</span>\\n        Weight w <span class=\\"token operator\\">=</span> v<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝构造一次---对象初始化</span>\\n        <span class=\\"token keyword\\">return</span> w<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝构造一---函数返回值以对象返回   先拷贝构造一个临时变量，再拷贝给赋的值</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//func1调用4次拷贝构造</span>\\n\\nWeight <span class=\\"token function\\">func2</span><span class=\\"token punctuation\\">(</span>Weight<span class=\\"token operator\\">&amp;</span> u<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//这里用的是别名，不会调用拷贝构造</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Weight <span class=\\"token function\\">v</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝构造一次</span>\\n        Weight w <span class=\\"token operator\\">=</span> v<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝构造一次</span>\\n        <span class=\\"token keyword\\">return</span> w<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝构造一次</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//func2调用3次拷贝构造</span>\\n\\nWeight<span class=\\"token operator\\">&amp;</span> <span class=\\"token function\\">func3</span><span class=\\"token punctuation\\">(</span>Weight<span class=\\"token operator\\">&amp;</span> u<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//这里用的别名，不拷贝构造</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Weight <span class=\\"token function\\">v</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝构造一次   直接构造</span>\\n        Weight w <span class=\\"token operator\\">=</span> v<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝构造一次           隐式类型转换</span>\\n        <span class=\\"token keyword\\">return</span> w<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//返回值用的别名，不拷贝构造</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//func3调用2次拷贝构造</span>\\n\\n\\n\\n\\n<span class=\\"token comment\\">//优化的编译器</span>\\n<span class=\\"token comment\\">//例题:这个函数调用了几次拷贝构造函数? 答案：7次   </span>\\n\\n<span class=\\"token comment\\">//一个表达式中，连续步骤的构造+拷贝构造或者拷贝构造+拷贝构造，编译器可能优化，合二为一</span>\\nWeight <span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span>Weight u<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//1  省略一次</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Weight <span class=\\"token function\\">v</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//2  5</span>\\n        Weight w <span class=\\"token operator\\">=</span> v<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//3  6</span>\\n        <span class=\\"token keyword\\">return</span> w<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//4  7</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Weight x<span class=\\"token punctuation\\">;</span>\\n        Weight y <span class=\\"token operator\\">=</span> <span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">/*\\n    说明：\\n        第一次调用f(x)，4次\\n        第二次调用f(f(x))，省略第一次参数时x给u的拷贝构造，其他相同，一共4+3=7次\\n*/</span>\\n\\n\\n<span class=\\"token comment\\">//10.拷贝构造函数特性</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//全缺省构造函数</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//拷贝构造函数</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> d<span class=\\"token punctuation\\">.</span>_year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> d<span class=\\"token punctuation\\">.</span>_month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> d<span class=\\"token punctuation\\">.</span>_day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date d1<span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">//调用默认构造---全缺省、不写自动生成、无参构造</span>\\n        Date <span class=\\"token function\\">d2</span><span class=\\"token punctuation\\">(</span>d1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用拷贝构造</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//全缺省构造函数</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">//生成默认拷贝构造函数</span>\\n        <span class=\\"token comment\\">//Date(const Date&amp; d){}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date d1<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用默认构造函数，使用全缺省构造函数</span>\\n        <span class=\\"token comment\\">//这里d2调用的默认拷贝构造完成拷贝，d2和d1的值也是一样的。</span>\\n        Date <span class=\\"token function\\">d2</span><span class=\\"token punctuation\\">(</span>d1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n<span class=\\"token comment\\">//10.const引发的浅拷贝崩溃问题---需要深拷贝解决问题</span>\\nclass String\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token comment\\">//浅拷贝构造函数</span>\\n        <span class=\\"token function\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"jack\\"</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _str <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">strlen</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token function\\">strcpy</span><span class=\\"token punctuation\\">(</span>_str<span class=\\"token punctuation\\">,</span> str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        \\n        <span class=\\"token comment\\">// 深拷贝构造函数</span>\\n        <span class=\\"token function\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> String<span class=\\"token operator\\">&amp;</span> other<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            _str <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">strlen</span><span class=\\"token punctuation\\">(</span>other<span class=\\"token punctuation\\">.</span>_str<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">strcpy</span><span class=\\"token punctuation\\">(</span>_str<span class=\\"token punctuation\\">,</span> other<span class=\\"token punctuation\\">.</span>_str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    \\n        <span class=\\"token operator\\">~</span><span class=\\"token function\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n             cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"~String()\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n             <span class=\\"token function\\">free</span><span class=\\"token punctuation\\">(</span>_str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> _str<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        String <span class=\\"token function\\">s1</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"hello\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用浅拷贝</span>\\n        String <span class=\\"token function\\">s2</span><span class=\\"token punctuation\\">(</span>s1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用深拷贝，浅拷贝程序会崩掉 需要深拷贝才能解决问题</span>\\n        <span class=\\"token comment\\">//解析：</span>\\n        <span class=\\"token comment\\">//浅拷贝是直接将内容复制过去，所以s1和s2的_str的地址是一样的</span>\\n        <span class=\\"token comment\\">//s1和s2的_str指向同一块空间，从而导致资源释放时，_str被释放两次，从而导致野指针问题崩溃</span>\\n        <span class=\\"token comment\\">//解决方案：自己实现拷贝构造，即深拷贝</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//10.全局和局部运算符重载</span>\\n<span class=\\"token comment\\">// 全局的operator==</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        bool operator<span class=\\"token operator\\">==</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//局部operator</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> _year <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>year\\n                        <span class=\\"token operator\\">&amp;&amp;</span> _month <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>month\\n                        <span class=\\"token operator\\">&amp;&amp;</span> _day <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">//private:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 这里会发现运算符重载成全局的就需要成员变量是共有的，那么问题来了，封装性如何保证？</span>\\n\\n\\n<span class=\\"token comment\\">// 这里其实可以用我们后面学习的友元解决，或者干脆重载成成员函数</span>\\nbool operator<span class=\\"token operator\\">==</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d1<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d2<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//操作符重载的声明和定义，全局operator</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> d1<span class=\\"token punctuation\\">.</span>_year <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">.</span>_year\\n                <span class=\\"token operator\\">&amp;&amp;</span> d1<span class=\\"token punctuation\\">.</span>_month <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">.</span>_month\\n                <span class=\\"token operator\\">&amp;&amp;</span> d1<span class=\\"token punctuation\\">.</span>_day <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">.</span>_day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//这里编译不通过，因为上面的成员是私有的</span>\\n<span class=\\"token comment\\">//处理方法3种：成员改为共有、提供函数获取内容、友元函数(常用)</span>\\n\\n<span class=\\"token comment\\">//运算符重载格式：</span>\\n<span class=\\"token comment\\">//1.</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>operator<span class=\\"token operator\\">==</span><span class=\\"token punctuation\\">(</span>d1<span class=\\"token punctuation\\">,</span> d2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//定义的：类外的operator，全局operator</span>\\n<span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"==\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//2.</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>d1<span class=\\"token punctuation\\">.</span>operator<span class=\\"token operator\\">==</span><span class=\\"token punctuation\\">(</span>d2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//定义的：类里面的operator，成员operator</span>\\n<span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"==\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//3.</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>d1 <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//编译器会处理成对应重载运算符调用if(operator==(d1,d2)){}或if(d1.operator(d2)){}</span>\\n<span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"==\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date <span class=\\"token function\\">d1</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Date <span class=\\"token function\\">d2</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token punctuation\\">(</span>d1 <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//10.运算符重载默认形参this</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// bool operator==(Date* this, const Date&amp; d2)</span>\\n        <span class=\\"token comment\\">// 这里需要注意的是，左操作数是this指向的调用函数的对象</span>\\n\\n        bool operator<span class=\\"token operator\\">==</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d2<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//操作符重载 隐含Date* this指针</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> _year <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">.</span>_year<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token operator\\">&amp;&amp;</span> _month <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">.</span>_month<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token operator\\">&amp;&amp;</span> _day <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">.</span>_day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date <span class=\\"token function\\">d1</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Date <span class=\\"token function\\">d2</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token punctuation\\">(</span>d1 <span class=\\"token operator\\">==</span> d2<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//d1==d2 -&gt;d1.operator==(const Date&amp; d2);</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//10.赋值运算符重载特性</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//构造函数</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">//赋值重载</span>\\n        Date<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//返回Date类的引用</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>this <span class=\\"token operator\\">!=</span> <span class=\\"token operator\\">&amp;</span>d<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//判断是否自己赋值自己</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                        _year <span class=\\"token operator\\">=</span> d<span class=\\"token punctuation\\">.</span>_year<span class=\\"token punctuation\\">;</span>\\n                        _month <span class=\\"token operator\\">=</span> d<span class=\\"token punctuation\\">.</span>_month<span class=\\"token punctuation\\">;</span>\\n                        _day <span class=\\"token operator\\">=</span> d<span class=\\"token punctuation\\">.</span>_day<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date <span class=\\"token function\\">d1</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Date <span class=\\"token function\\">d2</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Date <span class=\\"token function\\">d3</span><span class=\\"token punctuation\\">(</span>d1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝构造---一个存在的对象去初始化另一个要创建的对象</span>\\n        d2 <span class=\\"token operator\\">=</span> d1<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//赋值重载/复制拷贝---两个已经存在的对象之间赋值</span>\\n        <span class=\\"token function\\">d1</span><span class=\\"token punctuation\\">(</span>d2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//赋值重载---两个已经存在的对象赋值</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//10.普通对象取地址和const对象取地址</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        Date<span class=\\"token operator\\">*</span> operator<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//普通对象取地址</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> this<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">*</span> operator<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">const</span><span class=\\"token comment\\">//const取地址</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> this<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 年</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 月</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 日</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span>Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">&amp;</span>d <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func2</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d1<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">&amp;</span>d1 <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n<span class=\\"token comment\\">//C++默认构造函数的练习：日期类的实现</span>\\n\\n<span class=\\"token comment\\">//日期类文件名：Date.h</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">pragma</span> <span class=\\"token expression\\">once</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;assert.h&gt;</span></span>\\nusing std<span class=\\"token operator\\">::</span>cin<span class=\\"token punctuation\\">;</span>\\nusing std<span class=\\"token operator\\">::</span>cout<span class=\\"token punctuation\\">;</span>\\nusing std<span class=\\"token operator\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        bool <span class=\\"token function\\">isLeapYear</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//是闰年     4年一润且百年不润，或400年一润</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>year <span class=\\"token operator\\">%</span> <span class=\\"token number\\">4</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> year <span class=\\"token operator\\">%</span> <span class=\\"token number\\">100</span> <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>year <span class=\\"token operator\\">%</span> <span class=\\"token number\\">400</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">GetMonthDay</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 默认生成的析构函数，内置类型成员不做处理，自定义类型成员会去调用它的析构函数</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">//Date(const Date&amp; d)</span>\\n        <span class=\\"token comment\\">//{</span>\\n        <span class=\\"token comment\\">//        _year = d._year;</span>\\n        <span class=\\"token comment\\">//        _month = d._month;</span>\\n        <span class=\\"token comment\\">//        _day = d._day;</span>\\n        <span class=\\"token comment\\">//}</span>\\n\\n        <span class=\\"token comment\\">//Date&amp; operator=(const Date&amp; d)</span>\\n        <span class=\\"token comment\\">//{</span>\\n        <span class=\\"token comment\\">//        if (this != &amp;d)</span>\\n        <span class=\\"token comment\\">//        {</span>\\n        <span class=\\"token comment\\">//                _year = d._year;</span>\\n        <span class=\\"token comment\\">//                _month = d._month;</span>\\n        <span class=\\"token comment\\">//                _day = d._day;</span>\\n        <span class=\\"token comment\\">//        }</span>\\n\\n        <span class=\\"token comment\\">//        return *this;</span>\\n        <span class=\\"token comment\\">//}</span>\\n\\n        <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Print</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> _year <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> _month <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> _day <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        Date operator<span class=\\"token operator\\">+</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>  <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n        Date<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">+=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        Date operator<span class=\\"token operator\\">-</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>  <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n        Date<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">-=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">//代码短的用inline</span>\\n        <span class=\\"token comment\\">// ++d1</span>\\n        Date<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>      <span class=\\"token comment\\">// 前置</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// d1++</span>\\n        Date operator<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 后置 这里的int传的值大小无关，只是用于区分，一般写0或1</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                Date <span class=\\"token function\\">tmp</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//拷贝一份当前值</span>\\n                <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> tmp<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        Date<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>     <span class=\\"token comment\\">// 前置</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">-=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        Date operator<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 后置</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                Date <span class=\\"token function\\">tmp</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">-=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> tmp<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// d1 - d2</span>\\n        <span class=\\"token keyword\\">int</span> operator<span class=\\"token operator\\">-</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n\\n        bool operator<span class=\\"token operator\\">==</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>  <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n        bool operator<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>  <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// inline不支持声明和定义分别放到.h 和.cpp</span>\\n        <span class=\\"token comment\\">// 所以成员函数中要成为inline最好直接在类里面定义</span>\\n        <span class=\\"token comment\\">// 类里面定义默认就是inline</span>\\n        bool operator<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>  <span class=\\"token keyword\\">const</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">&lt;=</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        bool operator<span class=\\"token operator\\">&gt;=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>  <span class=\\"token keyword\\">const</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">&lt;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        bool operator<span class=\\"token operator\\">!=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>  <span class=\\"token keyword\\">const</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span>  <span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// d1 &lt;= d2</span>\\n        bool operator<span class=\\"token operator\\">&lt;=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>  <span class=\\"token keyword\\">const</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">&lt;</span> d <span class=\\"token operator\\">||</span> <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token comment\\">//文件名：Date.cpp</span>\\n\\n<span class=\\"token comment\\">//Date.cpp</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"Date.h\\"</span></span>\\n\\nbool Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>_year <span class=\\"token operator\\">&lt;</span> d<span class=\\"token punctuation\\">.</span>_year<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>_year <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>_year <span class=\\"token operator\\">&amp;&amp;</span> _month <span class=\\"token operator\\">&lt;</span> d<span class=\\"token punctuation\\">.</span>_month<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>_year <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>_year <span class=\\"token operator\\">&amp;&amp;</span> _month <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>_month <span class=\\"token operator\\">&amp;&amp;</span> _day <span class=\\"token operator\\">&lt;</span> d<span class=\\"token punctuation\\">.</span>_day<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> true<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> false<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// d1 == d2</span>\\nbool Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">==</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> _year <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>_year\\n                <span class=\\"token operator\\">&amp;&amp;</span> _month <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>_month\\n                <span class=\\"token operator\\">&amp;&amp;</span> _day <span class=\\"token operator\\">==</span> d<span class=\\"token punctuation\\">.</span>_day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> Date<span class=\\"token operator\\">::</span><span class=\\"token function\\">GetMonthDay</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">assert</span><span class=\\"token punctuation\\">(</span>year <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> month <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> month <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">13</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> monthDayArray<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">13</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">31</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">28</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">31</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">31</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">31</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">31</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">31</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">31</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>month <span class=\\"token operator\\">==</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">isLeapYear</span><span class=\\"token punctuation\\">(</span>year<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">29</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> monthDayArray<span class=\\"token punctuation\\">[</span>month<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nDate<span class=\\"token operator\\">::</span><span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>year <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">&amp;&amp;</span>\\n                month <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">12</span> <span class=\\"token operator\\">&amp;&amp;</span> month <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">&amp;&amp;</span>\\n                day <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">&amp;&amp;</span> day <span class=\\"token operator\\">&lt;=</span> <span class=\\"token function\\">GetMonthDay</span><span class=\\"token punctuation\\">(</span>year<span class=\\"token punctuation\\">,</span> month<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _year <span class=\\"token operator\\">=</span> year<span class=\\"token punctuation\\">;</span>\\n                _month <span class=\\"token operator\\">=</span> month<span class=\\"token punctuation\\">;</span>\\n                _day <span class=\\"token operator\\">=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"日期错误\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// d1 + 100 --&gt;d1.operator+(day);</span>\\n\\n<span class=\\"token comment\\">// d1 += 100</span>\\nDate<span class=\\"token operator\\">&amp;</span> Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">+=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">+</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\nDate Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">+</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date <span class=\\"token function\\">ret</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        ret<span class=\\"token punctuation\\">.</span>_day <span class=\\"token operator\\">+=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>ret<span class=\\"token punctuation\\">.</span>_day <span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">GetMonthDay</span><span class=\\"token punctuation\\">(</span>ret<span class=\\"token punctuation\\">.</span>_year<span class=\\"token punctuation\\">,</span> ret<span class=\\"token punctuation\\">.</span>_month<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                ret<span class=\\"token punctuation\\">.</span>_day <span class=\\"token operator\\">-=</span> <span class=\\"token function\\">GetMonthDay</span><span class=\\"token punctuation\\">(</span>ret<span class=\\"token punctuation\\">.</span>_year<span class=\\"token punctuation\\">,</span> ret<span class=\\"token punctuation\\">.</span>_month<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                ret<span class=\\"token punctuation\\">.</span>_month<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ret<span class=\\"token punctuation\\">.</span>_month <span class=\\"token operator\\">==</span> <span class=\\"token number\\">13</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token operator\\">++</span>ret<span class=\\"token punctuation\\">.</span>_year<span class=\\"token punctuation\\">;</span>\\n                        ret<span class=\\"token punctuation\\">.</span>_month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">return</span> ret<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nDate Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">+</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date <span class=\\"token function\\">ret</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        ret <span class=\\"token operator\\">+=</span> day<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">return</span> ret<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// d1 += 100</span>\\nDate<span class=\\"token operator\\">&amp;</span> Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">+=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>day <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">-=</span> <span class=\\"token operator\\">-</span>day<span class=\\"token punctuation\\">;</span>\\n\\n        _day <span class=\\"token operator\\">+=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>_day <span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">GetMonthDay</span><span class=\\"token punctuation\\">(</span>_year<span class=\\"token punctuation\\">,</span> _month<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                _day <span class=\\"token operator\\">-=</span> <span class=\\"token function\\">GetMonthDay</span><span class=\\"token punctuation\\">(</span>_year<span class=\\"token punctuation\\">,</span> _month<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                _month<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_month <span class=\\"token operator\\">==</span> <span class=\\"token number\\">13</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token operator\\">++</span>_year<span class=\\"token punctuation\\">;</span>\\n                        _month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nDate Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">-</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date ret <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n        ret <span class=\\"token operator\\">-=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> ret<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// d1 -= 100</span>\\nDate<span class=\\"token operator\\">&amp;</span> Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">-=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>day <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">+=</span> <span class=\\"token operator\\">-</span>day<span class=\\"token punctuation\\">;</span>\\n\\n        _day <span class=\\"token operator\\">-=</span> day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>_day <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token operator\\">--</span>_month<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_month <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                        _month <span class=\\"token operator\\">=</span> <span class=\\"token number\\">12</span><span class=\\"token punctuation\\">;</span>\\n                        <span class=\\"token operator\\">--</span>_year<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                _day <span class=\\"token operator\\">+=</span> <span class=\\"token function\\">GetMonthDay</span><span class=\\"token punctuation\\">(</span>_year<span class=\\"token punctuation\\">,</span> _month<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// d1 - d2 --&gt;  d1.operator-(const Date&amp; d) const </span>\\n\\n<span class=\\"token comment\\">//最简日期类相减运算</span>\\n<span class=\\"token keyword\\">int</span> Date<span class=\\"token operator\\">::</span>operator<span class=\\"token operator\\">-</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> flag <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//设置标识：1为正数，-1为负数</span>\\n        Date max <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n        Date min <span class=\\"token operator\\">=</span> d<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>this <span class=\\"token operator\\">&lt;</span> d<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                min <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">*</span>this<span class=\\"token punctuation\\">;</span>\\n                max <span class=\\"token operator\\">=</span> d<span class=\\"token punctuation\\">;</span>\\n                flag <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">int</span> n <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//天数标识</span>\\n        <span class=\\"token comment\\">//最大值和最小值不相等则让天数+1，用n标记数，最终由n*flag确定相差的天数</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>min <span class=\\"token operator\\">!=</span> max<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token operator\\">++</span>n<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token operator\\">++</span>min<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> n <span class=\\"token operator\\">*</span> flag<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n\\n\\n<span class=\\"token comment\\">//11.初始化列表</span>\\n<span class=\\"token keyword\\">int</span> data <span class=\\"token operator\\">=</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">;</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//列表初始化</span>\\n                <span class=\\"token operator\\">:</span> <span class=\\"token function\\">_year</span><span class=\\"token punctuation\\">(</span>year<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_month</span><span class=\\"token punctuation\\">(</span>month<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_day</span><span class=\\"token punctuation\\">(</span>day<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> year<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> month<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> day，<span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> data<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//列表初始化</span>\\n                <span class=\\"token operator\\">:</span> <span class=\\"token function\\">_year</span><span class=\\"token punctuation\\">(</span>year<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_month</span><span class=\\"token punctuation\\">(</span>month<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_day</span><span class=\\"token punctuation\\">(</span>day<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_n</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_data</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">//以下代码会报错：Date::n和Date::data必须初始化引用类型的成员，因为对象赋值不能让成员初始化，没有给_n和_data开空间</span>\\n        <span class=\\"token comment\\">/*\\n        Date(int year,int month,int day,int n,int data)\\n        {\\n                _year=year;\\n                _month=month;\\n                _day=day;\\n                _n=n;\\n                _data=data;\\n        }*/</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token comment\\">//这些成员不需要考虑，它们可以在定义的时候初始化也可以定义后赋值修改</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//声明_yaer</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//声明_month</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//声明_day</span>\\n\\n        <span class=\\"token comment\\">//这些成员(引用、const、没有默认构造函数)只能在定义的时候初始化</span>\\n        <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> _n<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> _data<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date <span class=\\"token function\\">d1</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2022</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//对象定义 对象整体定义调用构造函数，而初始化列表就是对象成员的定义</span>\\n        date d2<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n<span class=\\"token comment\\">//11.初始化列表特性</span>\\nclass B\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">B</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token operator\\">:</span><span class=\\"token function\\">_x</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//先列表初始化_x，再_y，再_z</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_z</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_y</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\nprivate<span class=\\"token operator\\">:</span>\\n        A _x<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//自定义类型成员变量---没有默认构造函数</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> _y<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//引用成员变量---由于B类中初始化列表初始化了_y</span>\\n        <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> _z<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//const成员变量 </span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nclass A\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">A</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token operator\\">:</span><span class=\\"token function\\">_a1</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//_a2初始化完，走_a1初始化，因为a=1，则_a1</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">_a2</span><span class=\\"token punctuation\\">(</span>_a1<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//先走_a2的列表初始化，因为_a1还没初始化则_a2为随机值，值为随机值</span>\\n        <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Print</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> _a1 <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> _a2 <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _a2<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//_a2先声明，则先执行_a2的初始化</span>\\n        <span class=\\"token keyword\\">int</span> _a1<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//_a2初始化完，然后_a1声明，_a1初始化</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        A <span class=\\"token function\\">aa</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        aa<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Print</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//输出 1 随机值</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//12.explicit关键字</span>\\nclass A\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token function\\">A</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">// 单参数的构造函数</span>\\n                <span class=\\"token operator\\">:</span> <span class=\\"token function\\">_a</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"A(int a)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _a<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 实例化新对象的两种写法：</span>\\n\\n        <span class=\\"token comment\\">// 调用构造函数，实例化新对象a1</span>\\n        A <span class=\\"token function\\">a1</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n        <span class=\\"token comment\\">// 下面本质上是一个隐式类型转换 --&gt; 用一个int类型变量给A类型对象赋值</span>\\n        <span class=\\"token comment\\">// 实际上编译器，会先用20作为参数构造一个临时对象，再用临时对象拷贝构造新对象a2</span>\\n        <span class=\\"token comment\\">// 最终编译器进行了优化(变成第一种形式)，直接用20作为参数构造新对象a2，把临时对象当成a2来用了，没有调用拷贝构造</span>\\n        A a2 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//14.友元类与友元函数</span>\\nclass Date\\n<span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//友元函数哪里声明都可以，推荐类开始，在类外实现</span>\\n        friend ostream<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token punctuation\\">(</span>ostream<span class=\\"token operator\\">&amp;</span> _cout<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//友元函数---可以访问私有、保护成员</span>\\n        friend istream<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token punctuation\\">(</span>istream<span class=\\"token operator\\">&amp;</span> _cin<span class=\\"token punctuation\\">,</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//友元函数</span>\\npublic<span class=\\"token operator\\">:</span>\\n\\n\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">int</span> _year<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _month<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> _day<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nostream<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token punctuation\\">(</span>ostream<span class=\\"token operator\\">&amp;</span> _cout<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        _cout <span class=\\"token operator\\">&lt;&lt;</span> d<span class=\\"token punctuation\\">.</span>_year <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> d<span class=\\"token punctuation\\">.</span>_month <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> d<span class=\\"token punctuation\\">.</span>_day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> _cout<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nistream<span class=\\"token operator\\">&amp;</span> operator<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token punctuation\\">(</span>istream<span class=\\"token operator\\">&amp;</span> _cin<span class=\\"token punctuation\\">,</span> Date<span class=\\"token operator\\">&amp;</span> d<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        _cin <span class=\\"token operator\\">&gt;&gt;</span> d<span class=\\"token punctuation\\">.</span>_year<span class=\\"token punctuation\\">;</span>\\n        _cin <span class=\\"token operator\\">&gt;&gt;</span> d<span class=\\"token punctuation\\">.</span>_month<span class=\\"token punctuation\\">;</span>\\n        _cin <span class=\\"token operator\\">&gt;&gt;</span> d<span class=\\"token punctuation\\">.</span>_day<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> _cin<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        Date d<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用默认构造</span>\\n        cin <span class=\\"token operator\\">&gt;&gt;</span> d<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用运算符重载</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> d <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用运算符重载</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token comment\\">//15.内部类</span>\\nclass A\\n<span class=\\"token punctuation\\">{</span>\\nprivate<span class=\\"token operator\\">:</span>\\n        <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> k<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> h<span class=\\"token punctuation\\">;</span>\\npublic<span class=\\"token operator\\">:</span>\\n        <span class=\\"token comment\\">//B天生是A的友元，A不是B的友元</span>\\n        class B \\n        <span class=\\"token punctuation\\">{</span>\\n        public<span class=\\"token operator\\">:</span>\\n                <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> A<span class=\\"token operator\\">&amp;</span> a<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                        cout <span class=\\"token operator\\">&lt;&lt;</span> k <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//内部类可以直接使用外部类的static成员、枚举成员</span>\\n                        cout <span class=\\"token operator\\">&lt;&lt;</span> a<span class=\\"token punctuation\\">.</span>h <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//内部类可以使用外部类对象成员</span>\\n                <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> A<span class=\\"token operator\\">::</span>k <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n        A<span class=\\"token operator\\">::</span>B b<span class=\\"token punctuation\\">;</span>\\n        b<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">A</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{d as comp,m as data};
